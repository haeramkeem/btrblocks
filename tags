!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
AJ	.cache/clangd/index/FastPFOR.cpp.1378DF4E779B2850.idx	/^RIFFÀ/;"	v
ALLOCATION_TAG	tools/playground/test-s3-custom-stream.cpp	/^#define ALLOCATION_TAG /;"	d	file:
ALLONES	btrblocks/common/Units.hpp	/^enum class BitmapType : u8 { ALLONES, ALLZEROS, REGULAR, FLIPPED };$/;"	m	class:btrblocks::units::BitmapType	access:private
ALLZEROS	btrblocks/common/Units.hpp	/^enum class BitmapType : u8 { ALLONES, ALLZEROS, REGULAR, FLIPPED };$/;"	m	class:btrblocks::units::BitmapType	access:private
Alhomssi	LICENSE	/^Copyright (c) 2023 Adnan Alhomssi, David Sauerwein, Maximilian Kuschewski, Viktor Leis$/;"	v
B	.cache/clangd/index/tester.cpp.56DEE6C2D2DF9A5C.idx	/^/;"	v
BENCHMARK_DATASET	btrblocks/common/Units.hpp	/^#define BENCHMARK_DATASET(/;"	d
BIGINT	btrblocks/common/Units.hpp	/^  BIGINT,$/;"	m	class:btrblocks::units::ColumnType	access:private
BLOCK_SIZE	tools/playground/sampling_algorithms.cpp	/^static constexpr size_t BLOCK_SIZE = 65000;$/;"	v	file:
BP	btrblocks/scheme/SchemeType.hpp	/^  BP = 5,$/;"	m	class:btrblocks::IntegerSchemeType	access:private
BTRBLOCKS_H_	btrblocks/btrblocks.hpp	/^#define BTRBLOCKS_H_$/;"	d
BTRBLOCKS_SCHEMECONFIG_H_	btrblocks/scheme/SchemeConfig.hpp	/^#define BTRBLOCKS_SCHEMECONFIG_H_$/;"	d
BTRBLOCKS_SCHEMESET_H_	btrblocks/scheme/SchemeSet.hpp	/^#define BTRBLOCKS_SCHEMESET_H_$/;"	d
BTRBLOCKS_SCHEMETYPE_H_	btrblocks/scheme/SchemeType.hpp	/^#define BTRBLOCKS_SCHEMETYPE_H_$/;"	d
BTRFILES_H_	btrfiles/btrfiles.hpp	/^#define BTRFILES_H_$/;"	d
BTR_ENABLE_FOR_SCHEME	btrblocks/compression/SchemePicker.hpp	/^#define BTR_ENABLE_FOR_SCHEME /;"	d
BTR_ENABLE_FOR_SCHEME	btrblocks/compression/SchemePicker.hpp	/^#undef BTR_ENABLE_FOR_SCHEME$/;"	d
BTR_IFELSESIMD	btrblocks/common/SIMD.hpp	/^#define BTR_IFELSESIMD(/;"	d
BTR_IFSIMD	btrblocks/common/SIMD.hpp	/^#define BTR_IFSIMD(/;"	d
BTR_USE_SIMD	btrblocks/common/SIMD.hpp	/^#define BTR_USE_SIMD /;"	d
BTR_USE_SIMD	btrblocks/common/SIMD.hpp	/^#undef BTR_USE_SIMD$/;"	d
BUFFER_SIZE	tools/playground/test-s3-transfer.cpp	/^static const size_t BUFFER_SIZE = 512 * 1024 * 1024;  \/\/ 512MB Buffer$/;"	v	file:
BitmapType	btrblocks/common/Units.hpp	/^enum class BitmapType : u8 { ALLONES, ALLZEROS, REGULAR, FLIPPED };$/;"	c	namespace:btrblocks::units	inherits:u8
BitmapWrapper	btrblocks/extern/RoaringBitmap.cpp	/^BitmapWrapper::BitmapWrapper(const u8* src,$/;"	f	class:btrblocks::bitmap::BitmapWrapper	signature:(const u8* src, BitmapType type, u32 tuple_count, boost::dynamic_bitset<>* bitset)
BitmapWrapper	btrblocks/extern/RoaringBitmap.hpp	/^  BitmapWrapper(const u8* src,$/;"	p	class:btrblocks::bitmap::BitmapWrapper	access:public	signature:(const u8* src, BitmapType type, u32 tuple_count, boost::dynamic_bitset<>* bitset = nullptr)
BitmapWrapper	btrblocks/extern/RoaringBitmap.hpp	/^class BitmapWrapper {$/;"	c	namespace:btrblocks::bitmap
BtrBlocksBenchmark	bench/bench-cases/regression_benchmark.cpp	/^static void BtrBlocksBenchmark(benchmark::State& state,$/;"	f	namespace:btrbench	signature:(benchmark::State& state, const string& dataset, const function<void()>& setup)
BtrBlocksConfig	btrblocks/btrblocks.hpp	/^struct BtrBlocksConfig {$/;"	s	namespace:btrblocks
BtrReader	btrblocks/compression/BtrReader.cpp	/^BtrReader::BtrReader(void* data) : data(data) {$/;"	f	class:btrblocks::BtrReader	signature:(void* data)
BtrReader	btrblocks/compression/BtrReader.hpp	/^  explicit BtrReader(void* data);$/;"	p	class:btrblocks::BtrReader	access:public	signature:(void* data)
BtrReader	btrblocks/compression/BtrReader.hpp	/^class BtrReader {$/;"	c	namespace:btrblocks
C	.cache/clangd/index/OneValue.cpp.B887C4FE0D5A7412.idx	/^/;"	v
CB	btrblocks/common/Units.hpp	/^#define CB(/;"	d
CD	btrblocks/common/Units.hpp	/^#define CD(/;"	d
CI	btrblocks/common/Units.hpp	/^#define CI(/;"	d
CONTRACT	LICENSE	/^LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,$/;"	v
CS	btrblocks/common/Units.hpp	/^#define CS(/;"	d
CSchemePicker	btrblocks/compression/SchemePicker.hpp	/^class CSchemePicker {$/;"	c	namespace:btrblocks
CU	btrblocks/common/Units.hpp	/^#define CU(/;"	d
CheckRelationCompression	test/test-cases/TestHelper.cpp	/^void TestHelper::CheckRelationCompression(Relation &relation, RelationCompressor &compressor, const vector<u8> expected_compression_schemes)$/;"	f	class:TestHelper	signature:(Relation &relation, RelationCompressor &compressor, const vector<u8> expected_compression_schemes)
CheckRelationCompression	test/test-cases/TestHelper.hpp	/^   static void CheckRelationCompression(Relation &relation, RelationCompressor &compressor, const vector<u8> expected_compression_schemes = {});$/;"	p	class:TestHelper	access:public	signature:(Relation &relation, RelationCompressor &compressor, const vector<u8> expected_compression_schemes = {})
Chunk	btrblocks/storage/Chunk.cpp	/^Chunk::Chunk(unique_ptr<unique_ptr<u8[]>[]>&& columns,$/;"	f	class:btrblocks::Chunk	signature:(unique_ptr<unique_ptr<u8[]>[]>&& columns, unique_ptr<unique_ptr<BITMAP[]>[]>&& bitmaps, u64 tuple_count, const Relation& relation, unique_ptr<SIZE[]>&& sizes)
Chunk	btrblocks/storage/Chunk.cpp	/^Chunk::Chunk(unique_ptr<unique_ptr<u8[]>[]>&& columns,$/;"	f	class:btrblocks::Chunk	signature:(unique_ptr<unique_ptr<u8[]>[]>&& columns, unique_ptr<unique_ptr<BITMAP[]>[]>&& bitmaps, unique_ptr<bool[]>&& column_requires_copy, u64 tuple_count, const Relation& relation, unique_ptr<SIZE[]>&& sizes)
Chunk	btrblocks/storage/Chunk.hpp	/^  Chunk(unique_ptr<unique_ptr<u8[]>[]>&& columns,$/;"	p	class:btrblocks::Chunk	access:public	signature:(unique_ptr<unique_ptr<u8[]>[]>&& columns, unique_ptr<unique_ptr<BITMAP[]>[]>&& bitmaps, u64 tuple_count, const Relation& relation, unique_ptr<SIZE[]>&& sizes)
Chunk	btrblocks/storage/Chunk.hpp	/^  Chunk(unique_ptr<unique_ptr<u8[]>[]>&& columns,$/;"	p	class:btrblocks::Chunk	access:public	signature:(unique_ptr<unique_ptr<u8[]>[]>&& columns, unique_ptr<unique_ptr<BITMAP[]>[]>&& bitmaps, unique_ptr<bool[]>&& column_requires_copy, u64 tuple_count, const Relation& relation, unique_ptr<SIZE[]>&& sizes)
Chunk	btrblocks/storage/Chunk.hpp	/^class Chunk {$/;"	c	namespace:btrblocks
Column	btrblocks/storage/Column.cpp	/^Column::Column(const ColumnType type,$/;"	f	class:btrblocks::Column	signature:(const ColumnType type, string name, const string& data_path, const string& bitmap_path)
Column	btrblocks/storage/Column.cpp	/^Column::Column(string name, Data&& data)$/;"	f	class:btrblocks::Column	signature:(string name, Data&& data)
Column	btrblocks/storage/Column.cpp	/^Column::Column(string name, Data&& data, Vector<BITMAP>&& bitmap)$/;"	f	class:btrblocks::Column	signature:(string name, Data&& data, Vector<BITMAP>&& bitmap)
Column	btrblocks/storage/Column.hpp	/^  Column(const ColumnType type, string name, const string& data_path, const string& bitmap_path);$/;"	p	class:btrblocks::Column	access:public	signature:(const ColumnType type, string name, const string& data_path, const string& bitmap_path)
Column	btrblocks/storage/Column.hpp	/^  Column(string name, Data&& data);$/;"	p	class:btrblocks::Column	access:public	signature:(string name, Data&& data)
Column	btrblocks/storage/Column.hpp	/^  Column(string name, Data&& data, Vector<BITMAP>&& bitmap);$/;"	p	class:btrblocks::Column	access:public	signature:(string name, Data&& data, Vector<BITMAP>&& bitmap)
Column	btrblocks/storage/Column.hpp	/^class Column {$/;"	c	namespace:btrblocks
ColumnChunkMeta	btrblocks/compression/Datablock.hpp	/^struct ColumnChunkMeta {$/;"	s	namespace:btrblocks
ColumnDescriptor	btrfiles/Parser.cpp	/^struct ColumnDescriptor {$/;"	s	namespace:btrblocks::files	file:
ColumnMeta	btrblocks/compression/Datablock.hpp	/^struct __attribute__((packed)) ColumnMeta {$/;"	s	namespace:btrblocks
ColumnPart	btrblocks/storage/Chunk.hpp	/^class ColumnPart {$/;"	c	namespace:btrblocks
ColumnPartInfo	btrblocks/compression/Datablock.hpp	/^struct ColumnPartInfo {$/;"	s	namespace:btrblocks
ColumnPartMetadata	btrblocks/storage/Chunk.hpp	/^struct ColumnPartMetadata {$/;"	s	namespace:btrblocks
ColumnType	btrblocks/common/Units.hpp	/^enum class ColumnType : u8 {$/;"	c	namespace:btrblocks::units	inherits:u8
ConvertSchemeTypeToString	btrblocks/scheme/CompressionScheme.cpp	/^string ConvertSchemeTypeToString(DoubleSchemeType type) {$/;"	f	namespace:btrblocks	signature:(DoubleSchemeType type)
ConvertSchemeTypeToString	btrblocks/scheme/CompressionScheme.cpp	/^string ConvertSchemeTypeToString(IntegerSchemeType type) {$/;"	f	namespace:btrblocks	signature:(IntegerSchemeType type)
ConvertSchemeTypeToString	btrblocks/scheme/CompressionScheme.cpp	/^string ConvertSchemeTypeToString(StringSchemeType type) {$/;"	f	namespace:btrblocks	signature:(StringSchemeType type)
ConvertSchemeTypeToString	btrblocks/scheme/CompressionScheme.hpp	/^string ConvertSchemeTypeToString(DoubleSchemeType type);$/;"	p	namespace:btrblocks	signature:(DoubleSchemeType type)
ConvertSchemeTypeToString	btrblocks/scheme/CompressionScheme.hpp	/^string ConvertSchemeTypeToString(IntegerSchemeType type);$/;"	p	namespace:btrblocks	signature:(IntegerSchemeType type)
ConvertSchemeTypeToString	btrblocks/scheme/CompressionScheme.hpp	/^string ConvertSchemeTypeToString(StringSchemeType type);$/;"	p	namespace:btrblocks	signature:(StringSchemeType type)
ConvertStringToType	btrblocks/common/Units.hpp	/^inline ColumnType ConvertStringToType(const string& type_str) {$/;"	f	namespace:btrblocks::units	signature:(const string& type_str)
ConvertTypeToString	btrblocks/common/Units.hpp	/^inline string ConvertTypeToString(const ColumnType type_str) {$/;"	f	namespace:btrblocks::units	signature:(const ColumnType type_str)
DICT	btrblocks/scheme/SchemeType.hpp	/^  DICT = 2,$/;"	m	class:btrblocks::IntegerSchemeType	access:private
DICT	btrblocks/scheme/SchemeType.hpp	/^  DICT = 2,$/;"	m	class:btrblocks::IntegerSchemeType::DoubleSchemeType	access:private
DICT	btrblocks/scheme/SchemeType.hpp	/^  DICT = 2,$/;"	m	class:btrblocks::IntegerSchemeType::DoubleSchemeType::StringSchemeType	access:private
DICTIONARY_16	btrblocks/scheme/SchemeType.hpp	/^  DICTIONARY_16 = 31,$/;"	m	class:btrblocks::IntegerSchemeType	access:private
DICTIONARY_16	btrblocks/scheme/SchemeType.hpp	/^  DICTIONARY_16 = 31,$/;"	m	class:btrblocks::IntegerSchemeType::DoubleSchemeType	access:private
DICTIONARY_16	btrblocks/scheme/SchemeType.hpp	/^  DICTIONARY_16 = 31,$/;"	m	class:btrblocks::IntegerSchemeType::DoubleSchemeType::StringSchemeType	access:private
DICTIONARY_8	btrblocks/scheme/SchemeType.hpp	/^  DICTIONARY_8 = 29,$/;"	m	class:btrblocks::IntegerSchemeType::DoubleSchemeType	access:private
DICTIONARY_8	btrblocks/scheme/SchemeType.hpp	/^  DICTIONARY_8 = 30,$/;"	m	class:btrblocks::IntegerSchemeType	access:private
DICTIONARY_8	btrblocks/scheme/SchemeType.hpp	/^  DICTIONARY_8 = 30,$/;"	m	class:btrblocks::IntegerSchemeType::DoubleSchemeType::StringSchemeType	access:private
DOUBLE	btrblocks/common/Units.hpp	/^  DOUBLE = 1,$/;"	m	class:btrblocks::units::ColumnType	access:private
DOUBLE_BP	btrblocks/scheme/SchemeType.hpp	/^  DOUBLE_BP = 28,$/;"	m	class:btrblocks::IntegerSchemeType::DoubleSchemeType	access:private
Data	btrblocks/storage/MMapVector.hpp	/^  struct Data {$/;"	s	struct:btrblocks::mmapvector::Vector	access:public
Datablock	btrblocks/compression/Datablock.cpp	/^Datablock::Datablock(const Relation& relation) : RelationCompressor(relation) {}$/;"	f	class:btrblocks::Datablock	signature:(const Relation& relation)
Datablock	btrblocks/compression/Datablock.hpp	/^  explicit Datablock(const Relation& relation);$/;"	p	class:btrblocks::Datablock	access:public	signature:(const Relation& relation)
Datablock	btrblocks/compression/Datablock.hpp	/^class Datablock : public RelationCompressor {$/;"	c	namespace:btrblocks	inherits:RelationCompressor
DatablockMeta	btrblocks/compression/Datablock.hpp	/^struct DatablockMeta {$/;"	s	namespace:btrblocks
Datasets	bench/AwsDatasetDownloader.cpp	/^vector<vector<string>> Datasets = {IntegerBenchmarkDatasets, DoubleBenchmarkDatasets,$/;"	v
Decimal	btrblocks/scheme/double/Pseudodecimal.hpp	/^class Decimal : public DoubleScheme {$/;"	c	namespace:btrblocks::doubles	inherits:DoubleScheme
DecimalIterateParam	btrblocks/scheme/double/Pseudodecimal.cpp	/^struct DecimalIterateParam {$/;"	s	namespace:btrblocks::doubles	file:
DecimalStructure	btrblocks/scheme/double/Pseudodecimal.hpp	/^struct DecimalStructure {$/;"	s	namespace:btrblocks::doubles
Dictionary16	btrblocks/scheme/double/FixedDictionary.hpp	/^class Dictionary16 : public DoubleScheme {$/;"	c	namespace:btrblocks::legacy::doubles	inherits:DoubleScheme
Dictionary16	btrblocks/scheme/integer/FixedDictionary.hpp	/^class Dictionary16 : public IntegerScheme {$/;"	c	namespace:btrblocks::legacy::integers	inherits:IntegerScheme
Dictionary16	btrblocks/scheme/string/FixedDictionary.hpp	/^class Dictionary16 : public StringScheme {$/;"	c	namespace:btrblocks::legacy::strings	inherits:StringScheme
Dictionary8	btrblocks/scheme/double/FixedDictionary.hpp	/^class Dictionary8 : public DoubleScheme {$/;"	c	namespace:btrblocks::legacy::doubles	inherits:DoubleScheme
Dictionary8	btrblocks/scheme/integer/FixedDictionary.hpp	/^class Dictionary8 : public IntegerScheme {$/;"	c	namespace:btrblocks::legacy::integers	inherits:IntegerScheme
Dictionary8	btrblocks/scheme/string/FixedDictionary.hpp	/^class Dictionary8 : public StringScheme {$/;"	c	namespace:btrblocks::legacy::strings	inherits:StringScheme
DoubleBP	btrblocks/scheme/double/DoubleBP.hpp	/^class DoubleBP : public DoubleScheme {$/;"	c	namespace:btrblocks::doubles	inherits:DoubleScheme
DoubleBPStructure	btrblocks/scheme/double/DoubleBP.hpp	/^struct DoubleBPStructure {$/;"	s	namespace:btrblocks::doubles
DoubleScheme	btrblocks/scheme/CompressionScheme.hpp	/^class DoubleScheme {$/;"	c	namespace:btrblocks
DoubleSchemeType	btrblocks/scheme/SchemeType.hpp	/^enum class DoubleSchemeType : uint8_t {$/;"	c	class:btrblocks::IntegerSchemeType	inherits:uint8_t	access:private
DownloadBenchmarkDataset	bench/AwsDatasetDownloader.cpp	/^void DownloadBenchmarkDataset(const Aws::String& bucket_name,$/;"	f	signature:(const Aws::String& bucket_name, const Aws::String& objectKey, const Aws::String& local_path, const shared_ptr<Aws::Transfer::TransferManager>& transfer_manager)
DumpMeta	btrblocks/cache/ThreadCache.hpp	/^  struct DumpMeta {$/;"	s	struct:btrblocks::ThreadCacheContainer	access:public
DynamicDictionary	btrblocks/scheme/double/DynamicDictionary.hpp	/^class DynamicDictionary : public DoubleScheme {$/;"	c	namespace:btrblocks::doubles	inherits:DoubleScheme
DynamicDictionary	btrblocks/scheme/integer/DynamicDictionary.hpp	/^class DynamicDictionary : public IntegerScheme {$/;"	c	namespace:btrblocks::integers	inherits:IntegerScheme
DynamicDictionary	btrblocks/scheme/string/DynamicDictionary.hpp	/^class DynamicDictionary : public StringScheme {$/;"	c	namespace:btrblocks::strings	inherits:StringScheme
DynamicDictionaryStructure	btrblocks/scheme/integer/DynamicDictionary.hpp	/^struct DynamicDictionaryStructure {$/;"	s	namespace:btrblocks::integers
DynamicDictionaryStructure	btrblocks/scheme/string/DynamicDictionary.hpp	/^struct DynamicDictionaryStructure {$/;"	s	namespace:btrblocks::strings
DynamicDictionaryStructure	btrblocks/scheme/templated/DynamicDictionary.hpp	/^struct __attribute__((packed)) DynamicDictionaryStructure {$/;"	s	namespace:btrblocks
EXP_FBP	btrblocks/scheme/integer/PBP.hpp	/^class EXP_FBP : public IntegerScheme {$/;"	c	namespace:btrblocks::integers	inherits:IntegerScheme
EnforceScheme	test/test-cases/TestHelper.hpp	/^   explicit EnforceScheme(T scheme_type) { getSchemeRef() = scheme_type; }$/;"	f	struct:EnforceScheme	access:public	signature:(T scheme_type)
EnforceScheme	test/test-cases/TestHelper.hpp	/^struct EnforceScheme {$/;"	s
EnforceScheme::EnforceScheme	test/test-cases/TestHelper.hpp	/^   explicit EnforceScheme(T scheme_type) { getSchemeRef() = scheme_type; }$/;"	f	struct:EnforceScheme	access:public	signature:(T scheme_type)
EnforceScheme::getSchemeRef	test/test-cases/TestHelper.hpp	/^   T& getSchemeRef();$/;"	p	struct:EnforceScheme	access:public	signature:()
EnforceScheme::getSchemeRef	test/test-cases/TestHelper.hpp	/^inline DoubleSchemeType& EnforceScheme<DoubleSchemeType>::getSchemeRef() {$/;"	f	class:EnforceScheme	signature:()
EnforceScheme::getSchemeRef	test/test-cases/TestHelper.hpp	/^inline IntegerSchemeType& EnforceScheme<IntegerSchemeType>::getSchemeRef() {$/;"	f	class:EnforceScheme	signature:()
EnforceScheme::getSchemeRef	test/test-cases/TestHelper.hpp	/^inline StringSchemeType& EnforceScheme<StringSchemeType>::getSchemeRef() {$/;"	f	class:EnforceScheme	signature:()
EnforceScheme::noexcept	test/test-cases/TestHelper.hpp	/^   ~EnforceScheme() noexcept(false) { getSchemeRef() = static_cast<T>(autoScheme()); }$/;"	f	struct:EnforceScheme	access:public	signature:(false)
FBP	btrblocks/scheme/integer/PBP.hpp	/^class FBP : public IntegerScheme {$/;"	c	namespace:btrblocks::integers	inherits:IntegerScheme
FBP64	btrblocks/scheme/integer/PBP.hpp	/^class FBP64 {$/;"	c	namespace:btrblocks::integers
FDictCompressColumn	btrblocks/scheme/templated/FixedDictionary.hpp	/^inline u32 FDictCompressColumn(const NumberType* src, const BITMAP*, u8* dest, StatsType& stats) {$/;"	f	namespace:btrblocks	signature:(const NumberType* src, const BITMAP*, u8* dest, StatsType& stats)
FDictDecompressColumn	btrblocks/scheme/templated/FixedDictionary.hpp	/^inline void FDictDecompressColumn(NumberType* dest,$/;"	f	namespace:btrblocks	signature:(NumberType* dest, BitmapWrapper*, const u8* src, u32 tuple_count, u32 level)
FDictExpectedCompressionRatio	btrblocks/scheme/templated/FixedDictionary.hpp	/^inline double FDictExpectedCompressionRatio(StatsType& stats) {$/;"	f	namespace:btrblocks	signature:(StatsType& stats)
FLOAT	btrblocks/common/Units.hpp	/^  FLOAT,$/;"	m	class:btrblocks::units::ColumnType	access:private
FOR	btrblocks/scheme/SchemeType.hpp	/^  FOR = 26,$/;"	m	class:btrblocks::IntegerSchemeType	access:private
FOR	btrblocks/scheme/integer/FOR.hpp	/^class FOR : public IntegerScheme {$/;"	c	namespace:btrblocks::legacy::integers	inherits:IntegerScheme
FORStructure	btrblocks/scheme/integer/FOR.hpp	/^struct FORStructure {$/;"	s	namespace:btrblocks::legacy::integers
FPF	btrblocks/extern/FastPFOR.hpp	/^enum class FastPForCodec { FPF, FBP };$/;"	m	class:FastPForCodec	access:private
FREQUENCY	btrblocks/scheme/SchemeType.hpp	/^  FREQUENCY = 25,$/;"	m	class:btrblocks::IntegerSchemeType	access:private
FREQUENCY	btrblocks/scheme/SchemeType.hpp	/^  FREQUENCY = 4,$/;"	m	class:btrblocks::IntegerSchemeType::DoubleSchemeType	access:private
FROM	LICENSE	/^LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,$/;"	v
FSST	btrblocks/scheme/SchemeType.hpp	/^  FSST = 3,$/;"	m	class:btrblocks::IntegerSchemeType::DoubleSchemeType::StringSchemeType	access:private
FSST_THRESHOLD	btrblocks/scheme/SchemeConfig.hpp	/^  static constexpr size_t FSST_THRESHOLD = 16ul * 1024;$/;"	m	struct:btrblocks::SchemeConfig	access:public
FastPForCodec	btrblocks/extern/FastPFOR.hpp	/^enum class FastPForCodec { FPF, FBP };$/;"	c
FastPForCodec::FPF	btrblocks/extern/FastPFOR.hpp	/^enum class FastPForCodec { FPF, FBP };$/;"	m	class:FastPForCodec	access:private
FileExists	bench/AwsDatasetDownloader.cpp	/^bool FileExists(string path) {$/;"	f	signature:(string path)
FileMetadata	btrblocks/compression/Datablock.hpp	/^struct FileMetadata {$/;"	s	namespace:btrblocks
FixedDictionaryStructure	btrblocks/scheme/templated/FixedDictionary.hpp	/^struct FixedDictionaryStructure {$/;"	s	namespace:btrblocks
Frequency	btrblocks/scheme/double/Frequency.hpp	/^class Frequency : public DoubleScheme {$/;"	c	namespace:btrblocks::legacy::doubles	inherits:DoubleScheme
Frequency	btrblocks/scheme/integer/Frequency.hpp	/^class Frequency : public IntegerScheme {$/;"	c	namespace:btrblocks::integers	inherits:IntegerScheme
FrequencyStructure	btrblocks/scheme/integer/Frequency.hpp	/^struct FrequencyStructure {$/;"	s	namespace:btrblocks::integers
FrequencyStructure	btrblocks/scheme/templated/Frequency.hpp	/^struct FrequencyStructure {$/;"	s	namespace:btrblocks
Fsst	btrblocks/scheme/string/Fsst.hpp	/^class Fsst : public StringScheme {$/;"	c	namespace:btrblocks::strings	inherits:StringScheme
FsstStructure	btrblocks/scheme/string/Fsst.hpp	/^struct FsstStructure {$/;"	s	namespace:btrblocks::strings
G	.cache/clangd/index/MaxExponent.cpp.940864CB1D0AB956.idx	/^d5C·rHvÒv»	²ÄØD¬$9MþýG;¬h0lQ6?ÒHqÎ87W¹õU¯Çøx>½Oäävt5ÈÛÑÝôa"G³éh>3>÷	bµ¨ìÀ$/;"	v
G	.cache/clangd/index/s3-management.hpp.AF4A25370820DDB5.idx	/^ÚÃ¥$JþC^Zsymbþ/;"	v
GenerateRandomString	test/DatasetGenerator.cpp	/^void GenerateRandomString(char *dest, SIZE len, u8 entropy = 26 * 2 + 10);$/;"	p	file:	signature:(char *dest, SIZE len, u8 entropy = 26 * 2 + 10)
GenerateRandomString	test/DatasetGenerator.cpp	/^void GenerateRandomString(char *dest, SIZE len, u8 entropy)$/;"	f	signature:(char *dest, SIZE len, u8 entropy)
GenericException	btrblocks/common/Exceptions.hpp	/^#define GenericException(/;"	d
Generic_Exception	btrblocks/common/Exceptions.hpp	/^GenericException(Generic_Exception);$/;"	v
GetObject	tools/playground/test-s3-custom-stream.cpp	/^bool GetObject(const Aws::String& objectKey,$/;"	f	signature:(const Aws::String& objectKey, const Aws::String& fromBucket, const Aws::String& region)
GetObject	tools/playground/test-s3-transfer.cpp	/^bool GetObject(const Aws::String& objectKey,$/;"	f	signature:(const Aws::String& objectKey, const Aws::String& fromBucket, const Aws::String& region)
GetObject	tools/playground/test-s3.cpp	/^bool GetObject(const Aws::String& objectKey,$/;"	f	signature:(const Aws::String& objectKey, const Aws::String& fromBucket, const Aws::String& region)
GetObjectResponseReceiveHandler	tools/playground/test-s3-crt.cpp	/^static void GetObjectResponseReceiveHandler($/;"	f	file:	signature:( const s3_client_t*, const s3::Model::GetObjectRequest& get_request, s3::Model::GetObjectOutcome outcome, const std::shared_ptr<const Aws::Client::AsyncCallerContext>&)
GetObjects	tools/playground/test-s3-crt.cpp	/^static void GetObjects(const s3_client_t& s3_client,$/;"	f	file:	signature:(const s3_client_t& s3_client, const Aws::String& fromBucket, long object_count, long object_size)
H	.cache/clangd/index/Compressor.hpp.2D2350440179A1D6.idx	/^/;"	v
I	.cache/clangd/index/Pseudodecimal.hpp.5BF37A45E94C55D7.idx	/^RIFFZ	/;"	v
I	.cache/clangd/index/double.cpp.FB8B0BB146038520.idx	/^RIFF¶/;"	v
IMPLIED	LICENSE	/^IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,$/;"	v
INTEGER	btrblocks/common/Units.hpp	/^  INTEGER = 0,$/;"	m	class:btrblocks::units::ColumnType	access:private
INT_BUFFER_SIZE	btrblocks/common/Units.hpp	/^enum { INT_BUFFER_SIZE = (65000 * 4 * 2) };$/;"	e	enum:btrblocks::units::__anon9
IT	.cache/clangd/index/StringStats.cpp.964759BE7B0DCC82.idx	/^)&ß¹éÔ6`G|âY]X)8ITß,rùXDÈÊkR÷®)!!Tß,rùXDÏ¥ØãâS*³)#%Tß,rùXD|]Õ¶ù¨Á)MPTß,rùXDþó{¦cÂ)'*Tß,rùXDó¨Ö Ã)$Tß,rùXDËãs·é×)Tß,rùXD)Tß,rùXD)"."8Tß,rùXDÅp!\\'Ø)$/;"	v
ITruncCompress	btrblocks/scheme/integer/Truncation.hpp	/^double ITruncCompress(const INTEGER* src, const BITMAP* nullmap, u8* dest, SInteger32Stats& stats) {$/;"	f	namespace:btrblocks::legacy::integers	signature:(const INTEGER* src, const BITMAP* nullmap, u8* dest, SInteger32Stats& stats)
ITruncDecompress	btrblocks/scheme/integer/Truncation.hpp	/^void ITruncDecompress(INTEGER* dest,$/;"	f	namespace:btrblocks::legacy::integers	signature:(INTEGER* dest, BitmapWrapper* nullmap, const u8* src, u32 tuple_count, u32 level)
ITruncExpectedCF	btrblocks/scheme/integer/Truncation.hpp	/^double ITruncExpectedCF(btrblocks::SInteger32Stats& stats) {$/;"	f	namespace:btrblocks::legacy::integers	signature:(btrblocks::SInteger32Stats& stats)
InputChunk	btrblocks/storage/Chunk.cpp	/^InputChunk::InputChunk(unique_ptr<u8[]>&& data,$/;"	f	class:btrblocks::InputChunk	signature:(unique_ptr<u8[]>&& data, unique_ptr<BITMAP[]>&& bitmap, ColumnType type, u64 tuple_count, SIZE size)
InputChunk	btrblocks/storage/Chunk.hpp	/^  InputChunk(unique_ptr<u8[]>&& data,$/;"	p	class:btrblocks::InputChunk	access:public	signature:(unique_ptr<u8[]>&& data, unique_ptr<BITMAP[]>&& bitmap, ColumnType type, u64 tuple_count, SIZE size)
InputChunk	btrblocks/storage/Chunk.hpp	/^class InputChunk {$/;"	c	namespace:btrblocks
InputFiles	tools/playground/pseudodecimal_benchmark.cpp	/^    InputFiles(const std::string& filename) : list(filename) {$/;"	f	struct:InputFiles	access:public	signature:(const std::string& filename)
InputFiles	tools/playground/pseudodecimal_benchmark.cpp	/^struct InputFiles {$/;"	s	file:
InputFiles	tools/playground/sampling_algorithms.cpp	/^    InputFiles(const std::string& filename) : list(filename) {$/;"	f	struct:InputFiles	access:public	signature:(const std::string& filename)
InputFiles	tools/playground/sampling_algorithms.cpp	/^struct InputFiles {$/;"	s	file:
InputFiles::InputFiles	tools/playground/pseudodecimal_benchmark.cpp	/^    InputFiles(const std::string& filename) : list(filename) {$/;"	f	struct:InputFiles	access:public	signature:(const std::string& filename)
InputFiles::InputFiles	tools/playground/sampling_algorithms.cpp	/^    InputFiles(const std::string& filename) : list(filename) {$/;"	f	struct:InputFiles	access:public	signature:(const std::string& filename)
InputFiles::list	tools/playground/pseudodecimal_benchmark.cpp	/^    std::ifstream list;$/;"	m	struct:InputFiles	file:	access:public
InputFiles::list	tools/playground/sampling_algorithms.cpp	/^    std::ifstream list;$/;"	m	struct:InputFiles	file:	access:public
InputFiles::next	tools/playground/pseudodecimal_benchmark.cpp	/^    bool next(std::string& output) {$/;"	f	struct:InputFiles	access:public	signature:(std::string& output)
InputFiles::next	tools/playground/sampling_algorithms.cpp	/^    bool next(std::string& output) {$/;"	f	struct:InputFiles	access:public	signature:(std::string& output)
IntegerScheme	btrblocks/scheme/CompressionScheme.hpp	/^class IntegerScheme {$/;"	c	namespace:btrblocks
IntegerSchemeType	btrblocks/scheme/SchemeType.hpp	/^enum class IntegerSchemeType : uint8_t {$/;"	c	namespace:btrblocks	inherits:uint8_t
JM	.cache/clangd/index/MMapVector.cpp.2B47801683493D7F.idx	/^ãTÕh8<dm^ùQR¡1+e(ûÐ]CPhò>#li<å&è±ÞÆE(¨{`}Ûcl=õGf©Êúî9Òþ6;u4Þõh[CFúBÿÔÞAzÙ	åþ [£¥X:rwÐÎÈöXC½¿!ÖkÚï ?7;ðåRnà©àb$$ÿÔÄ3öÝ9ûõb2¶lM°TCJÕ%![o4»EáÂ8R`öÌ°s÷/;"	v
KIND	LICENSE	/^THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR$/;"	v
Kuschewski	LICENSE	/^Copyright (c) 2023 Adnan Alhomssi, David Sauerwein, Maximilian Kuschewski, Viktor Leis$/;"	v
LIABILITY	LICENSE	/^LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,$/;"	v
LemiereImpl	btrblocks/extern/FastPFOR.cpp	/^LemiereImpl<Codec>::LemiereImpl() : pImpl(new LemiereImpl<Codec>::impl) {}$/;"	f	class:LemiereImpl	signature:()
LemiereImpl	btrblocks/extern/FastPFOR.hpp	/^struct LemiereImpl {$/;"	s
LemiereImpl::LemiereImpl	btrblocks/extern/FastPFOR.cpp	/^LemiereImpl<Codec>::LemiereImpl() : pImpl(new LemiereImpl<Codec>::impl) {}$/;"	f	class:LemiereImpl	signature:()
LemiereImpl::applyDelta	btrblocks/extern/FastPFOR.cpp	/^void LemiereImpl<Codec>::applyDelta(data_t* src, size_t count) {$/;"	f	class:LemiereImpl	signature:(data_t* src, size_t count)
LemiereImpl::applyDelta	btrblocks/extern/FastPFOR.hpp	/^  static void applyDelta(data_t* src, size_t count);$/;"	p	struct:LemiereImpl	access:public	signature:(data_t* src, size_t count)
LemiereImpl::compress	btrblocks/extern/FastPFOR.cpp	/^u32 LemiereImpl<Codec>::compress(const data_t* src, u32 count, data_t* dest, SIZE& outsize) {$/;"	f	class:LemiereImpl	signature:(const data_t* src, u32 count, data_t* dest, SIZE& outsize)
LemiereImpl::compress	btrblocks/extern/FastPFOR.hpp	/^  u32 compress(const data_t* src, u32 count, data_t* dest, size_t& outsize);$/;"	p	struct:LemiereImpl	access:public	signature:(const data_t* src, u32 count, data_t* dest, size_t& outsize)
LemiereImpl::decompress	btrblocks/extern/FastPFOR.cpp	/^const typename LemiereImpl<Codec>::data_t* LemiereImpl<Codec>::decompress(const data_t* src,$/;"	f	class:LemiereImpl	signature:(const data_t* src, u32 count, data_t* dest, SIZE& outsize)
LemiereImpl::decompress	btrblocks/extern/FastPFOR.hpp	/^  const data_t* decompress(const data_t* src, u32 count, data_t* dest, size_t& outsize);$/;"	p	struct:LemiereImpl	access:public	signature:(const data_t* src, u32 count, data_t* dest, size_t& outsize)
LemiereImpl::impl	btrblocks/extern/FastPFOR.cpp	/^struct LemiereImpl<FastPForCodec::FBP>::impl {$/;"	s	class:LemiereImpl	file:
LemiereImpl::impl	btrblocks/extern/FastPFOR.cpp	/^struct LemiereImpl<FastPForCodec::FPF>::impl {$/;"	s	class:LemiereImpl	file:
LemiereImpl::impl::codec	btrblocks/extern/FastPFOR.cpp	/^  FastPForLib::CompositeCodec<FastPForLib::FastBinaryPacking<32>, FastPForLib::VariableByte> codec;$/;"	m	struct:LemiereImpl::impl	file:	access:public
LemiereImpl::pImpl	btrblocks/extern/FastPFOR.hpp	/^  std::unique_ptr<impl> pImpl;$/;"	m	struct:LemiereImpl	access:private
LemiereImpl::revertDelta	btrblocks/extern/FastPFOR.cpp	/^void LemiereImpl<Codec>::revertDelta(data_t* src, size_t count) {$/;"	f	class:LemiereImpl	signature:(data_t* src, size_t count)
LemiereImpl::revertDelta	btrblocks/extern/FastPFOR.hpp	/^  static void revertDelta(data_t* src, size_t count);$/;"	p	struct:LemiereImpl	access:public	signature:(data_t* src, size_t count)
LemiereImpl::~LemiereImpl	btrblocks/extern/FastPFOR.cpp	/^LemiereImpl<Codec>::~LemiereImpl() = default;$/;"	p	class:LemiereImpl	file:	signature:()
LemiereImpl::~LemiereImpl	btrblocks/extern/FastPFOR.hpp	/^  ~LemiereImpl();$/;"	p	struct:LemiereImpl	access:public	signature:()
Log	btrblocks/common/Log.hpp	/^namespace Log {$/;"	n
Log::debug	btrblocks/common/Log.hpp	/^inline void debug([[maybe_unused]] Args&&... args) { \/* noop *\/$/;"	f	namespace:Log	signature:([[maybe_unused]] Args&&.... args)
Log::error	btrblocks/common/Log.hpp	/^inline void error([[maybe_unused]] Args&&... args) { \/* noop *\/$/;"	f	namespace:Log	signature:([[maybe_unused]] Args&&.... args)
Log::info	btrblocks/common/Log.hpp	/^inline void info([[maybe_unused]] Args&&... args) { \/* noop *\/$/;"	f	namespace:Log	signature:([[maybe_unused]] Args&&.... args)
Log::level	btrblocks/common/Log.hpp	/^enum class level { trace, debug, info, warn, err, critical, off };$/;"	c	namespace:Log
Log::level::critical	btrblocks/common/Log.hpp	/^enum class level { trace, debug, info, warn, err, critical, off };$/;"	m	class:Log::level	access:private
Log::level::debug	btrblocks/common/Log.hpp	/^enum class level { trace, debug, info, warn, err, critical, off };$/;"	m	class:Log::level	access:private
Log::level::err	btrblocks/common/Log.hpp	/^enum class level { trace, debug, info, warn, err, critical, off };$/;"	m	class:Log::level	access:private
Log::level::info	btrblocks/common/Log.hpp	/^enum class level { trace, debug, info, warn, err, critical, off };$/;"	m	class:Log::level	access:private
Log::level::trace	btrblocks/common/Log.hpp	/^enum class level { trace, debug, info, warn, err, critical, off };$/;"	m	class:Log::level	access:private
Log::level::warn	btrblocks/common/Log.hpp	/^enum class level { trace, debug, info, warn, err, critical, off };$/;"	m	class:Log::level	access:private
Log::set_level	btrblocks/common/Log.hpp	/^inline void set_level(level) { \/* noop *\/$/;"	f	namespace:Log	signature:(level)
Log::warn	btrblocks/common/Log.hpp	/^inline void warn([[maybe_unused]] Args&&... args) { \/* noop *\/$/;"	f	namespace:Log	signature:([[maybe_unused]] Args&&.... args)
MAX_PBI_BYTES	tools/playground/sampling_algorithms.cpp	/^static constexpr size_t MAX_PBI_BYTES = 2019996069;$/;"	v	file:
MAX_STR_LENGTH	btrblocks/scheme/CompressionScheme.hpp	/^enum { MAX_STR_LENGTH = (2048 * 4) };$/;"	e	enum:__anon1
MERCHANTABILITY	LICENSE	/^IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,$/;"	v
MaxExponent	btrblocks/scheme/double/MaxExponent.hpp	/^class MaxExponent : public DoubleScheme {$/;"	c	namespace:btrblocks::legacy::doubles	inherits:DoubleScheme
MaxExponentStructure	btrblocks/scheme/double/MaxExponent.hpp	/^struct MaxExponentStructure {$/;"	s	namespace:btrblocks::legacy::doubles
NULL_CODE	btrblocks/common/Units.hpp	/^enum { NULL_CODE = 0 };$/;"	e	enum:btrblocks::units::__anon10
NULL_CODE_MARGIN	btrblocks/common/Units.hpp	/^enum { NULL_CODE_MARGIN = 1 };$/;"	e	enum:btrblocks::units::__anon8
NumberStats	btrblocks/stats/NumberStats.hpp	/^  NumberStats() = delete;$/;"	p	struct:btrblocks::NumberStats	access:public	signature:()
NumberStats	btrblocks/stats/NumberStats.hpp	/^  NumberStats(const T* src, const BITMAP* bitmap, u32 tuple_count)$/;"	f	struct:btrblocks::NumberStats	access:public	signature:(const T* src, const BITMAP* bitmap, u32 tuple_count)
NumberStats	btrblocks/stats/NumberStats.hpp	/^struct NumberStats {$/;"	s	namespace:btrblocks
O0	.cache/clangd/index/Pseudodecimal.hpp.5BF37A45E94C55D7.idx	/^0!01Çxx·]ómKi0O0\\õ¹á,lÈVJºU)¡´l##«Êâãæ³((aÐælq¸/;"	v
OL	tools/playground/s3-columns.txt	/^Rentabilidad\/1\/Rentabilidad_1\/131_VENTA_Coord, OL, Merc. 14.integer$/;"	v
OL	tools/playground/s3-columns.txt	/^Rentabilidad\/2\/Rentabilidad_2\/129_VENTA_Coord, OL, Merc. 14.integer$/;"	v
OL	tools/playground/s3-columns.txt	/^Rentabilidad\/3\/Rentabilidad_3\/131_VENTA_Coord, OL, Merc. 14.integer$/;"	v
OL	tools/playground/s3-columns.txt	/^Rentabilidad\/4\/Rentabilidad_4\/131_VENTA_Coord, OL, Merc. 14.integer$/;"	v
OL	tools/playground/s3-columns.txt	/^Rentabilidad\/5\/Rentabilidad_5\/131_VENTA_Coord, OL, Merc. 14.integer$/;"	v
OL	tools/playground/s3-columns.txt	/^Rentabilidad\/6\/Rentabilidad_6\/131_VENTA_Coord, OL, Merc. 14.integer$/;"	v
OL	tools/playground/s3-columns.txt	/^Rentabilidad\/7\/Rentabilidad_7\/131_VENTA_Coord, OL, Merc. 14.integer$/;"	v
OL	tools/playground/s3-columns.txt	/^Rentabilidad\/8\/Rentabilidad_8\/131_VENTA_Coord, OL, Merc. 14.integer$/;"	v
OL	tools/playground/s3-columns.txt	/^Rentabilidad\/9\/Rentabilidad_9\/131_VENTA_Coord, OL, Merc. 14.integer$/;"	v
ONE_VALUE	btrblocks/scheme/SchemeType.hpp	/^  ONE_VALUE = 1,$/;"	m	class:btrblocks::IntegerSchemeType	access:private
ONE_VALUE	btrblocks/scheme/SchemeType.hpp	/^  ONE_VALUE = 1,$/;"	m	class:btrblocks::IntegerSchemeType::DoubleSchemeType	access:private
ONE_VALUE	btrblocks/scheme/SchemeType.hpp	/^  ONE_VALUE = 1,$/;"	m	class:btrblocks::IntegerSchemeType::DoubleSchemeType::StringSchemeType	access:private
OTHERWISE	LICENSE	/^LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,$/;"	v
OneValue	btrblocks/scheme/double/OneValue.hpp	/^class OneValue : public DoubleScheme {$/;"	c	namespace:btrblocks::legacy::doubles	inherits:DoubleScheme
OneValue	btrblocks/scheme/integer/OneValue.hpp	/^class OneValue : public IntegerScheme {$/;"	c	namespace:btrblocks::legacy::integers	inherits:IntegerScheme
OneValue	btrblocks/scheme/string/OneValue.hpp	/^class OneValue : public StringScheme {$/;"	c	namespace:btrblocks::legacy::strings	inherits:StringScheme
OneValueStructure	btrblocks/scheme/double/OneValue.hpp	/^struct OneValueStructure {$/;"	s	namespace:btrblocks::legacy::doubles
OneValueStructure	btrblocks/scheme/integer/OneValue.hpp	/^struct OneValueStructure {$/;"	s	namespace:btrblocks::legacy::integers
OneValueStructure	btrblocks/scheme/string/OneValue.hpp	/^struct OneValueStructure {$/;"	s	namespace:btrblocks::legacy::strings
OutputBlockStats	btrblocks/compression/Compressor.hpp	/^struct OutputBlockStats {$/;"	s	namespace:btrblocks
PA	.cache/clangd/index/FOR.hpp.22C1602466B83111.idx	/^RIFFª/;"	v
PARSER_EXEC	tools/datasets/prepare_dataset.sh	/^            if [[ $PARSER ]]; then PARSER_EXEC=$PARSER; else PARSER_EXEC=harbook; fi$/;"	v
PBP	btrblocks/scheme/integer/PBP.hpp	/^class PBP : public IntegerScheme {$/;"	c	namespace:btrblocks::integers	inherits:IntegerScheme
PBP_DELTA	btrblocks/scheme/integer/PBP.hpp	/^class PBP_DELTA : public IntegerScheme {$/;"	c	namespace:btrblocks::integers	inherits:IntegerScheme
PBP_H_	btrblocks/scheme/double/PBP.hpp	/^#define PBP_H_$/;"	d
PFOR	btrblocks/scheme/SchemeType.hpp	/^  PFOR = 4,$/;"	m	class:btrblocks::IntegerSchemeType	access:private
PFOR_DELTA	btrblocks/scheme/SchemeType.hpp	/^  PFOR_DELTA = 27,$/;"	m	class:btrblocks::IntegerSchemeType	access:private
PREFIX_FLAG	bench.sh	/^	PREFIX_FLAG="--benchmark_filter=$OPTARG"$/;"	v
PSEUDODECIMAL	btrblocks/scheme/SchemeType.hpp	/^  PSEUDODECIMAL = 5,$/;"	m	class:btrblocks::IntegerSchemeType::DoubleSchemeType	access:private
PT	.cache/clangd/index/StringStats.cpp.964759BE7B0DCC82.idx	/^)&ß¹éÔ6`G|âY]X)8ITß,rùXDÈÊkR÷®)!!Tß,rùXDÏ¥ØãâS*³)#%Tß,rùXD|]Õ¶ù¨Á)MPTß,rùXDþó{¦cÂ)'*Tß,rùXDó¨Ö Ã)$Tß,rùXDËãs·é×)Tß,rùXD)Tß,rùXD)"."8Tß,rùXDÅp!\\'Ø)$/;"	v
PerfEvent	btrblocks/common/PerfEvent.hpp	/^  PerfEvent() : printHeader(true) {$/;"	f	struct:PerfEvent	access:public	signature:()
PerfEvent	btrblocks/common/PerfEvent.hpp	/^struct PerfEvent {$/;"	s
PerfEvent::PerfEvent	btrblocks/common/PerfEvent.hpp	/^  PerfEvent() : printHeader(true) {$/;"	f	struct:PerfEvent	access:public	signature:()
PerfEvent::event	btrblocks/common/PerfEvent.hpp	/^  struct event {$/;"	s	struct:PerfEvent	access:public
PerfEvent::event::data	btrblocks/common/PerfEvent.hpp	/^    read_format data;$/;"	m	struct:PerfEvent::event	access:public
PerfEvent::event::fd	btrblocks/common/PerfEvent.hpp	/^    int fd;$/;"	m	struct:PerfEvent::event	access:public
PerfEvent::event::pe	btrblocks/common/PerfEvent.hpp	/^    perf_event_attr pe;$/;"	m	struct:PerfEvent::event	access:public
PerfEvent::event::prev	btrblocks/common/PerfEvent.hpp	/^    read_format prev;$/;"	m	struct:PerfEvent::event	access:public
PerfEvent::event::readCounter	btrblocks/common/PerfEvent.hpp	/^    double readCounter() {$/;"	f	struct:PerfEvent::event	access:public	signature:()
PerfEvent::event::read_format	btrblocks/common/PerfEvent.hpp	/^    struct read_format {$/;"	s	struct:PerfEvent::event	access:public
PerfEvent::event::read_format::id	btrblocks/common/PerfEvent.hpp	/^      uint64_t id;$/;"	m	struct:PerfEvent::event::read_format	access:public
PerfEvent::event::read_format::time_enabled	btrblocks/common/PerfEvent.hpp	/^      uint64_t time_enabled;$/;"	m	struct:PerfEvent::event::read_format	access:public
PerfEvent::event::read_format::time_running	btrblocks/common/PerfEvent.hpp	/^      uint64_t time_running;$/;"	m	struct:PerfEvent::event::read_format	access:public
PerfEvent::event::read_format::value	btrblocks/common/PerfEvent.hpp	/^      uint64_t value;$/;"	m	struct:PerfEvent::event::read_format	access:public
PerfEvent::events	btrblocks/common/PerfEvent.hpp	/^  std::vector<event> events;$/;"	m	struct:PerfEvent	access:public
PerfEvent::getCPUs	btrblocks/common/PerfEvent.hpp	/^  double getCPUs() { return getCounter("task") \/ (getDuration() * 1e9); }$/;"	f	struct:PerfEvent	access:public	signature:()
PerfEvent::getCounter	btrblocks/common/PerfEvent.hpp	/^  double getCounter(const std::string& name) {$/;"	f	struct:PerfEvent	access:public	signature:(const std::string& name)
PerfEvent::getDuration	btrblocks/common/PerfEvent.hpp	/^  double getDuration() { return std::chrono::duration<double>(stopTime - startTime).count(); }$/;"	f	struct:PerfEvent	access:public	signature:()
PerfEvent::getGHz	btrblocks/common/PerfEvent.hpp	/^  double getGHz() { return getCounter("cycle") \/ getCounter("task"); }$/;"	f	struct:PerfEvent	access:public	signature:()
PerfEvent::getIPC	btrblocks/common/PerfEvent.hpp	/^  double getIPC() { return getCounter("instr") \/ getCounter("cycle"); }$/;"	f	struct:PerfEvent	access:public	signature:()
PerfEvent::names	btrblocks/common/PerfEvent.hpp	/^  std::vector<std::string> names;$/;"	m	struct:PerfEvent	access:public
PerfEvent::params	btrblocks/common/PerfEvent.hpp	/^  std::map<std::string, std::string> params;$/;"	m	struct:PerfEvent	access:public
PerfEvent::printCounter	btrblocks/common/PerfEvent.hpp	/^  static void printCounter(std::ostream& headerOut,$/;"	f	struct:PerfEvent	access:public	signature:(std::ostream& headerOut, std::ostream& dataOut, const std::string& name, const std::string& counterValue, bool addComma = true)
PerfEvent::printCounter	btrblocks/common/PerfEvent.hpp	/^  static void printCounter(std::ostream& headerOut,$/;"	f	struct:PerfEvent	access:public	signature:(std::ostream& headerOut, std::ostream& dataOut, std::string name, T counterValue, bool addComma = true)
PerfEvent::printHeader	btrblocks/common/PerfEvent.hpp	/^  bool printHeader;$/;"	m	struct:PerfEvent	access:public
PerfEvent::printParams	btrblocks/common/PerfEvent.hpp	/^  void printParams(std::ostream& header, std::ostream& data) {$/;"	f	struct:PerfEvent	access:public	signature:(std::ostream& header, std::ostream& data)
PerfEvent::printReport	btrblocks/common/PerfEvent.hpp	/^  void printReport(std::ostream& headerOut, std::ostream& dataOut, uint64_t normalizationConstant) {$/;"	f	struct:PerfEvent	access:public	signature:(std::ostream& headerOut, std::ostream& dataOut, uint64_t normalizationConstant)
PerfEvent::printReport	btrblocks/common/PerfEvent.hpp	/^  void printReport(std::ostream& out, uint64_t normalizationConstant) {$/;"	f	struct:PerfEvent	access:public	signature:(std::ostream& out, uint64_t normalizationConstant)
PerfEvent::printReport	btrblocks/common/PerfEvent.hpp	/^  void printReport(std::ostream&, uint64_t) {}$/;"	f	struct:PerfEvent	access:public	signature:(std::ostream&, uint64_t)
PerfEvent::registerCounter	btrblocks/common/PerfEvent.hpp	/^  void registerCounter(const std::string& name, uint64_t type, uint64_t eventID) {$/;"	f	struct:PerfEvent	access:public	signature:(const std::string& name, uint64_t type, uint64_t eventID)
PerfEvent::setParam	btrblocks/common/PerfEvent.hpp	/^  void setParam(const std::string& name, T value) {$/;"	f	struct:PerfEvent	access:public	signature:(const std::string& name, T value)
PerfEvent::setParam	btrblocks/common/PerfEvent.hpp	/^  void setParam(const std::string& name, const char* value) { params[name] = value; }$/;"	f	struct:PerfEvent	access:public	signature:(const std::string& name, const char* value)
PerfEvent::setParam	btrblocks/common/PerfEvent.hpp	/^  void setParam(const std::string& name, const std::string& value) { params[name] = value; }$/;"	f	struct:PerfEvent	access:public	signature:(const std::string& name, const std::string& value)
PerfEvent::startCounters	btrblocks/common/PerfEvent.hpp	/^  void startCounters() {$/;"	f	struct:PerfEvent	access:public	signature:()
PerfEvent::startCounters	btrblocks/common/PerfEvent.hpp	/^  void startCounters() {}$/;"	f	struct:PerfEvent	access:public	signature:()
PerfEvent::startTime	btrblocks/common/PerfEvent.hpp	/^  std::chrono::time_point<std::chrono::steady_clock> startTime;$/;"	m	struct:PerfEvent	access:public
PerfEvent::stopCounters	btrblocks/common/PerfEvent.hpp	/^  void stopCounters() {$/;"	f	struct:PerfEvent	access:public	signature:()
PerfEvent::stopCounters	btrblocks/common/PerfEvent.hpp	/^  void stopCounters() {}$/;"	f	struct:PerfEvent	access:public	signature:()
PerfEvent::stopTime	btrblocks/common/PerfEvent.hpp	/^  std::chrono::time_point<std::chrono::steady_clock> stopTime;$/;"	m	struct:PerfEvent	access:public
PerfEvent::~PerfEvent	btrblocks/common/PerfEvent.hpp	/^  ~PerfEvent() {$/;"	f	struct:PerfEvent	access:public	signature:()
PerfEventBlock	btrblocks/common/PerfEvent.hpp	/^  explicit PerfEventBlock(PerfEvent& e, uint64_t scale = 1) : e(e), scale(scale) {$/;"	f	struct:PerfEventBlock	access:public	signature:(PerfEvent& e, uint64_t scale = 1)
PerfEventBlock	btrblocks/common/PerfEvent.hpp	/^struct PerfEventBlock {$/;"	s
PerfEventBlock::PerfEventBlock	btrblocks/common/PerfEvent.hpp	/^  explicit PerfEventBlock(PerfEvent& e, uint64_t scale = 1) : e(e), scale(scale) {$/;"	f	struct:PerfEventBlock	access:public	signature:(PerfEvent& e, uint64_t scale = 1)
PerfEventBlock::e	btrblocks/common/PerfEvent.hpp	/^  PerfEvent& e;$/;"	m	struct:PerfEventBlock	access:public
PerfEventBlock::scale	btrblocks/common/PerfEvent.hpp	/^  uint64_t scale;$/;"	m	struct:PerfEventBlock	access:public
PerfEventBlock::~PerfEventBlock	btrblocks/common/PerfEvent.hpp	/^  ~PerfEventBlock() {$/;"	f	struct:PerfEventBlock	access:public	signature:()
PerfExternal	btrblocks/common/PerfExternal.hpp	/^struct PerfExternal {$/;"	s
PerfExternal::start	btrblocks/common/PerfExternal.hpp	/^  static void start(bool print = false) {$/;"	f	struct:PerfExternal	access:public	signature:(bool print = false)
PerfExternal::stop	btrblocks/common/PerfExternal.hpp	/^  static void stop(bool print = false) {$/;"	f	struct:PerfExternal	access:public	signature:(bool print = false)
PerfExternalBlock	btrblocks/common/PerfExternal.hpp	/^  PerfExternalBlock() {$/;"	f	struct:PerfExternalBlock	access:public	signature:()
PerfExternalBlock	btrblocks/common/PerfExternal.hpp	/^  explicit PerfExternalBlock(bool activate) : activate(activate) { start(); }$/;"	f	struct:PerfExternalBlock	access:public	signature:(bool activate)
PerfExternalBlock	btrblocks/common/PerfExternal.hpp	/^struct PerfExternalBlock {$/;"	s
PerfExternalBlock::PerfExternalBlock	btrblocks/common/PerfExternal.hpp	/^  PerfExternalBlock() {$/;"	f	struct:PerfExternalBlock	access:public	signature:()
PerfExternalBlock::PerfExternalBlock	btrblocks/common/PerfExternal.hpp	/^  explicit PerfExternalBlock(bool activate) : activate(activate) { start(); }$/;"	f	struct:PerfExternalBlock	access:public	signature:(bool activate)
PerfExternalBlock::activate	btrblocks/common/PerfExternal.hpp	/^  bool activate = true;$/;"	m	struct:PerfExternalBlock	access:public
PerfExternalBlock::start	btrblocks/common/PerfExternal.hpp	/^  void start() {$/;"	f	struct:PerfExternalBlock	access:private	signature:()
PerfExternalBlock::stop	btrblocks/common/PerfExternal.hpp	/^  void stop() {$/;"	f	struct:PerfExternalBlock	access:private	signature:()
PerfExternalBlock::~PerfExternalBlock	btrblocks/common/PerfExternal.hpp	/^  ~PerfExternalBlock() { stop(); }$/;"	f	struct:PerfExternalBlock	access:public	signature:()
Predicate	btrblocks/scheme/CompressionScheme.hpp	/^struct Predicate {};$/;"	s	namespace:btrblocks
Q	.cache/clangd/index/RLE.hpp.0A08AFC9783F16BF.idx	/^RIFF~/;"	v
RD	btrblocks/common/Reinterpret.hpp	/^#define RD(/;"	d
REGULAR	btrblocks/common/Units.hpp	/^enum class BitmapType : u8 { ALLONES, ALLZEROS, REGULAR, FLIPPED };$/;"	m	class:btrblocks::units::BitmapType	access:private
RLE	btrblocks/scheme/SchemeType.hpp	/^  RLE = 3,$/;"	m	class:btrblocks::IntegerSchemeType	access:private
RLE	btrblocks/scheme/SchemeType.hpp	/^  RLE = 3,$/;"	m	class:btrblocks::IntegerSchemeType::DoubleSchemeType	access:private
RLE	btrblocks/scheme/double/RLE.hpp	/^class RLE : public DoubleScheme {$/;"	c	namespace:btrblocks::doubles	inherits:DoubleScheme
RLE	btrblocks/scheme/integer/RLE.hpp	/^class RLE : public IntegerScheme {$/;"	c	namespace:btrblocks::integers	inherits:IntegerScheme
RLEStructure	btrblocks/scheme/integer/RLE.hpp	/^struct RLEStructure {$/;"	s	namespace:btrblocks::integers
RLEStructure	btrblocks/scheme/templated/RLE.hpp	/^struct RLEStructure {$/;"	s	namespace:btrblocks
RU64	btrblocks/common/Reinterpret.hpp	/^#define RU64(/;"	d
RandomSampler	tools/playground/sampling_algorithms.cpp	/^  RandomSampler() : RandomSampler(cfg().sample_size, cfg().sample_count) {}$/;"	f	struct:RandomSampler	access:public	signature:()
RandomSampler	tools/playground/sampling_algorithms.cpp	/^  RandomSampler(const std::string& name, u32 sample_size, u32 sample_count)$/;"	f	struct:RandomSampler	access:public	signature:(const std::string& name, u32 sample_size, u32 sample_count)
RandomSampler	tools/playground/sampling_algorithms.cpp	/^  RandomSampler(u32 sample_size, u32 sample_count)$/;"	f	struct:RandomSampler	access:public	signature:(u32 sample_size, u32 sample_count)
RandomSampler	tools/playground/sampling_algorithms.cpp	/^struct RandomSampler : Sampler<T> {$/;"	s	file:	inherits:Sampler
RandomSampler::RandomSampler	tools/playground/sampling_algorithms.cpp	/^  RandomSampler() : RandomSampler(cfg().sample_size, cfg().sample_count) {}$/;"	f	struct:RandomSampler	access:public	signature:()
RandomSampler::RandomSampler	tools/playground/sampling_algorithms.cpp	/^  RandomSampler(const std::string& name, u32 sample_size, u32 sample_count)$/;"	f	struct:RandomSampler	access:public	signature:(const std::string& name, u32 sample_size, u32 sample_count)
RandomSampler::RandomSampler	tools/playground/sampling_algorithms.cpp	/^  RandomSampler(u32 sample_size, u32 sample_count)$/;"	f	struct:RandomSampler	access:public	signature:(u32 sample_size, u32 sample_count)
RandomSampler::_name	tools/playground/sampling_algorithms.cpp	/^  std::string _name;$/;"	m	struct:RandomSampler	file:	access:public
RandomSampler::cfg	tools/playground/sampling_algorithms.cpp	/^  static BtrBlocksConfig& cfg() {$/;"	f	struct:RandomSampler	access:public	signature:()
RandomSampler::sample_count	tools/playground/sampling_algorithms.cpp	/^  u32 sample_size, sample_count;$/;"	m	struct:RandomSampler	file:	access:public
RandomSampler::sample_size	tools/playground/sampling_algorithms.cpp	/^  u32 sample_size, sample_count;$/;"	m	struct:RandomSampler	file:	access:public
RegisterSingleBenchmarks	bench/bench-cases/regression_benchmark.cpp	/^void RegisterSingleBenchmarks() {$/;"	f	namespace:btrbench	signature:()
Relation	btrblocks/storage/Relation.cpp	/^Relation::Relation() {$/;"	f	class:btrblocks::Relation	signature:()
Relation	btrblocks/storage/Relation.hpp	/^  Relation();$/;"	p	class:btrblocks::Relation	access:public	signature:()
Relation	btrblocks/storage/Relation.hpp	/^class Relation {$/;"	c	namespace:btrblocks
RelationCompressor	btrblocks/compression/Compressor.hpp	/^  explicit RelationCompressor(const Relation& relation) : relation(relation) {}$/;"	f	class:btrblocks::RelationCompressor	access:public	signature:(const Relation& relation)
RelationCompressor	btrblocks/compression/Compressor.hpp	/^class RelationCompressor {$/;"	c	namespace:btrblocks
RoaringBitmap	btrblocks/extern/RoaringBitmap.hpp	/^class RoaringBitmap {$/;"	c	namespace:btrblocks::bitmap
S	.cache/clangd/index/Log.hpp.763E873E577A1E23.idx	/^RIFFÚ/;"	v
SAMPLE	btrblocks/btrblocks.hpp	/^enum class SchemeSelection : uint8_t { SAMPLE, TRY_ALL };$/;"	m	class:btrblocks::SchemeSelection	access:private
SCHEME_MAX	btrblocks/scheme/SchemeType.hpp	/^  SCHEME_MAX = 32$/;"	m	class:btrblocks::IntegerSchemeType	access:private
SCHEME_MAX	btrblocks/scheme/SchemeType.hpp	/^  SCHEME_MAX = 32$/;"	m	class:btrblocks::IntegerSchemeType::DoubleSchemeType	access:private
SCHEME_MAX	btrblocks/scheme/SchemeType.hpp	/^  SCHEME_MAX = 32$/;"	m	class:btrblocks::IntegerSchemeType::DoubleSchemeType::StringSchemeType	access:private
SEQUENTIAL	btrblocks/storage/Relation.hpp	/^enum class SplitStrategy : u8 { SEQUENTIAL, RANDOM };$/;"	m	class:btrblocks::SplitStrategy	access:private
SERVER	bench.sh	/^	SERVER=$OPTARG$/;"	v
SIMD_EXTRA_BYTES	btrblocks/common/SIMD.hpp	/^#define SIMD_EXTRA_BYTES /;"	d
SIMD_EXTRA_ELEMENTS	btrblocks/common/SIMD.hpp	/^#define SIMD_EXTRA_ELEMENTS(/;"	d
SKIP	btrblocks/common/Units.hpp	/^  SKIP,  \/\/ SKIP THIS COLUMN$/;"	m	class:btrblocks::units::ColumnType	access:private
SMALLINT	btrblocks/common/Units.hpp	/^  SMALLINT,$/;"	m	class:btrblocks::units::ColumnType	access:private
STRING	btrblocks/common/Units.hpp	/^  STRING = 2,$/;"	m	class:btrblocks::units::ColumnType	access:private
Sampler	tools/playground/sampling_algorithms.cpp	/^struct Sampler {$/;"	s	file:
Sampler::operator ()	tools/playground/sampling_algorithms.cpp	/^  virtual sample_t<T> operator()(const T* input, size_t count, stats_t& stats) const = 0;$/;"	p	struct:Sampler	file:	access:public	signature:(const T* input, size_t count, stats_t& stats) const
Sampler::sampled_items	tools/playground/sampling_algorithms.cpp	/^  virtual u32 sampled_items() const = 0;$/;"	p	struct:Sampler	file:	access:public	signature:() const
Sauerwein	LICENSE	/^Copyright (c) 2023 Adnan Alhomssi, David Sauerwein, Maximilian Kuschewski, Viktor Leis$/;"	v
SchemeConfig	btrblocks/scheme/SchemeConfig.hpp	/^struct SchemeConfig {$/;"	s	namespace:btrblocks
SchemePool	btrblocks/scheme/SchemePool.hpp	/^class SchemePool {$/;"	c	namespace:btrblocks
SchemeSelection	btrblocks/btrblocks.hpp	/^enum class SchemeSelection : uint8_t { SAMPLE, TRY_ALL };$/;"	c	namespace:btrblocks	inherits:uint8_t
SchemeSet	btrblocks/scheme/SchemeSet.hpp	/^  constexpr SchemeSet(std::initializer_list<T> schemes) { enable(schemes); }$/;"	f	struct:btrblocks::SchemeSet	access:public	signature:(std::initializer_list<T> schemes)
SchemeSet	btrblocks/scheme/SchemeSet.hpp	/^struct SchemeSet {$/;"	s	namespace:btrblocks
Schemes	tools/playground/sampling_algorithms.cpp	/^struct Schemes<DOUBLE> {$/;"	s	file:
Schemes	tools/playground/sampling_algorithms.cpp	/^struct Schemes<INTEGER> {$/;"	s	file:
Schemes	tools/playground/sampling_algorithms.cpp	/^struct Schemes<std::string_view> {$/;"	s	file:
Schemes	tools/playground/sampling_algorithms.cpp	/^struct Schemes{};$/;"	s	file:
Schemes::excluded	tools/playground/sampling_algorithms.cpp	/^  static const std::set<scheme_enum> excluded() {$/;"	f	struct:Schemes	access:public	signature:()
Schemes::name	tools/playground/sampling_algorithms.cpp	/^  static constexpr char name[] = "double";$/;"	m	struct:Schemes	file:	access:public
Schemes::name	tools/playground/sampling_algorithms.cpp	/^  static constexpr char name[] = "integer";$/;"	m	struct:Schemes	file:	access:public
Schemes::name	tools/playground/sampling_algorithms.cpp	/^  static constexpr char name[] = "string";$/;"	m	struct:Schemes	file:	access:public
Schemes::schemes	tools/playground/sampling_algorithms.cpp	/^  static const pool& schemes() {$/;"	f	struct:Schemes	access:public	signature:()
SchemesCollection	btrblocks/scheme/SchemePool.cpp	/^SchemesCollection::SchemesCollection() {$/;"	f	class:btrblocks::SchemesCollection	signature:()
SchemesCollection	btrblocks/scheme/SchemePool.hpp	/^  SchemesCollection();$/;"	p	struct:btrblocks::SchemesCollection	access:public	signature:()
SchemesCollection	btrblocks/scheme/SchemePool.hpp	/^struct SchemesCollection {$/;"	s	namespace:btrblocks
SetupAllSchemes	bench/bench-cases/regression_benchmark.cpp	/^static void SetupAllSchemes() {$/;"	f	namespace:btrbench	signature:()
SetupSchemes	bench/bench-cases/regression_benchmark.cpp	/^static void SetupSchemes(DoubleSchemeType scheme) {$/;"	f	namespace:btrbench	signature:(DoubleSchemeType scheme)
SetupSchemes	bench/bench-cases/regression_benchmark.cpp	/^static void SetupSchemes(StringSchemeType scheme) {$/;"	f	namespace:btrbench	signature:(StringSchemeType scheme)
SetupSchemes	bench/bench-cases/regression_benchmark.cpp	/^static void SetupSchemes(const vector<IntegerSchemeType>& schemes) {$/;"	f	namespace:btrbench	signature:(const vector<IntegerSchemeType>& schemes)
Slot	btrblocks/scheme/double/Pseudodecimal.hpp	/^  struct __attribute__((packed)) Slot {$/;"	s	struct:btrblocks::doubles::DecimalStructure	access:public
Slot	btrblocks/storage/StringArrayViewer.hpp	/^  struct Slot {$/;"	s	struct:btrblocks::StringArrayViewer	access:public
Software	LICENSE	/^copies of the Software, and to permit persons to whom the Software is$/;"	v
SplitStrategy	btrblocks/storage/Relation.hpp	/^enum class SplitStrategy : u8 { SEQUENTIAL, RANDOM };$/;"	c	namespace:btrblocks	inherits:u8
StringArrayViewer	btrblocks/storage/StringArrayViewer.hpp	/^  explicit StringArrayViewer(const u8* slots_ptr) : slots_ptr(slots_ptr) {}$/;"	f	struct:btrblocks::StringArrayViewer	access:public	signature:(const u8* slots_ptr)
StringArrayViewer	btrblocks/storage/StringArrayViewer.hpp	/^struct StringArrayViewer {$/;"	s	namespace:btrblocks
StringIndexSlot	btrblocks/storage/MMapVector.hpp	/^struct StringIndexSlot {$/;"	s	namespace:btrblocks::mmapvector
StringPointerArrayViewer	btrblocks/storage/StringPointerArrayViewer.hpp	/^  explicit StringPointerArrayViewer(const u8* data) {$/;"	f	struct:btrblocks::StringPointerArrayViewer	access:public	signature:(const u8* data)
StringPointerArrayViewer	btrblocks/storage/StringPointerArrayViewer.hpp	/^struct StringPointerArrayViewer {$/;"	s	namespace:btrblocks
StringScheme	btrblocks/scheme/CompressionScheme.hpp	/^class StringScheme {$/;"	c	namespace:btrblocks
StringSchemeType	btrblocks/scheme/SchemeType.hpp	/^enum class StringSchemeType : uint8_t {$/;"	c	class:btrblocks::IntegerSchemeType::DoubleSchemeType	inherits:uint8_t	access:private
StringStats	btrblocks/stats/StringStats.hpp	/^struct StringStats {$/;"	s	namespace:btrblocks
StringToVector	tools/playground/double.cpp	/^static Vector<const char> StringToVector(const char *str) {$/;"	f	file:	signature:(const char *str)
StringToVector	tools/playground/double_benchmarking.cpp	/^static Vector<const char> StringToVector(const char* str) {$/;"	f	file:	signature:(const char* str)
T	.cache/clangd/index/StringStats.cpp.964759BE7B0DCC82.idx	/^$/;"	v
T	.cache/clangd/index/StringStats.cpp.964759BE7B0DCC82.idx	/^)&ß¹éÔ6`G|âY]X)8ITß,rùXDÈÊkR÷®)!!Tß,rùXDÏ¥ØãâS*³)#%Tß,rùXD|]Õ¶ù¨Á)MPTß,rùXDþó{¦cÂ)'*Tß,rùXDó¨Ö Ã)$Tß,rùXDËãs·é×)Tß,rùXD)Tß,rùXD)"."8Tß,rùXDÅp!\\'Ø)$/;"	v
T	.cache/clangd/index/StringStats.cpp.964759BE7B0DCC82.idx	/^Tß,rùXDåB¦ð¡È)!-!1Tß,rùXD#$8Ö²)Tß,rùXD)""%Tß,rùXD°(¨n®%)*.Tß,rùXDì(¥ñb!,)-3Tß,rùXDa¿ç-)39Tß,rùXD½Ûl5])Tß,rùXDß¹éÔ6`)/;"	v
TDynamicDictionary	btrblocks/scheme/templated/DynamicDictionary.hpp	/^class TDynamicDictionary {$/;"	c	namespace:btrblocks
TEST	test/test-cases/V1.cpp	/^TEST(V1, Begin) {$/;"	f	signature:(V1, Begin)
TEST	test/test-cases/V1.cpp	/^TEST(V1, DoubleDict16)$/;"	f	signature:(V1, DoubleDict16)
TEST	test/test-cases/V1.cpp	/^TEST(V1, DoubleDict8)$/;"	f	signature:(V1, DoubleDict8)
TEST	test/test-cases/V1.cpp	/^TEST(V1, DoubleOneValue)$/;"	f	signature:(V1, DoubleOneValue)
TEST	test/test-cases/V1.cpp	/^TEST(V1, DoubleRandom)$/;"	f	signature:(V1, DoubleRandom)
TEST	test/test-cases/V1.cpp	/^TEST(V1, End) {$/;"	f	signature:(V1, End)
TEST	test/test-cases/V1.cpp	/^TEST(V1, Integer)$/;"	f	signature:(V1, Integer)
TEST	test/test-cases/V1.cpp	/^TEST(V1, IntegerDictionary)$/;"	f	signature:(V1, IntegerDictionary)
TEST	test/test-cases/V1.cpp	/^TEST(V1, IntegerDictionary16)$/;"	f	signature:(V1, IntegerDictionary16)
TEST	test/test-cases/V1.cpp	/^TEST(V1, IntegerDictionary8)$/;"	f	signature:(V1, IntegerDictionary8)
TEST	test/test-cases/V1.cpp	/^TEST(V1, IntegerOneValue)$/;"	f	signature:(V1, IntegerOneValue)
TEST	test/test-cases/V1.cpp	/^TEST(V1, MixedTest)$/;"	f	signature:(V1, MixedTest)
TEST	test/test-cases/V1.cpp	/^TEST(V1, StringDictionary)$/;"	f	signature:(V1, StringDictionary)
TEST	test/test-cases/V1.cpp	/^TEST(V1, StringOneValue)$/;"	f	signature:(V1, StringOneValue)
TEST	test/test-cases/V2.cpp	/^TEST(V2, Begin) {$/;"	f	signature:(V2, Begin)
TEST	test/test-cases/V2.cpp	/^TEST(V2, DoubleDecimal)$/;"	f	signature:(V2, DoubleDecimal)
TEST	test/test-cases/V2.cpp	/^TEST(V2, DoubleDyanmicDict)$/;"	f	signature:(V2, DoubleDyanmicDict)
TEST	test/test-cases/V2.cpp	/^TEST(V2, DoubleFrequency)$/;"	f	signature:(V2, DoubleFrequency)
TEST	test/test-cases/V2.cpp	/^TEST(V2, DoubleRLE)$/;"	f	signature:(V2, DoubleRLE)
TEST	test/test-cases/V2.cpp	/^TEST(V2, End)$/;"	f	signature:(V2, End)
TEST	test/test-cases/V2.cpp	/^TEST(V2, IntegerDyanmicDict)$/;"	f	signature:(V2, IntegerDyanmicDict)
TEST	test/test-cases/V2.cpp	/^TEST(V2, IntegerRLE)$/;"	f	signature:(V2, IntegerRLE)
TEST	test/test-cases/V2.cpp	/^TEST(V2, StringCompressedDictionary)$/;"	f	signature:(V2, StringCompressedDictionary)
TEST_DATASET	btrblocks/common/Units.hpp	/^#define TEST_DATASET(/;"	d
TFrequency	btrblocks/scheme/templated/Frequency.hpp	/^class TFrequency {$/;"	c	namespace:btrblocks
TODO	btrblocks/common/Exceptions.hpp	/^#define TODO(/;"	d
TRLE	btrblocks/scheme/templated/RLE.hpp	/^class TRLE {$/;"	c	namespace:btrblocks
TRUNCATION_16	btrblocks/scheme/SchemeType.hpp	/^  TRUNCATION_16 = 29,$/;"	m	class:btrblocks::IntegerSchemeType	access:private
TRUNCATION_8	btrblocks/scheme/SchemeType.hpp	/^  TRUNCATION_8 = 28,$/;"	m	class:btrblocks::IntegerSchemeType	access:private
TYPE_MAPPING_SUFFIX_LENGTH	tools/playground/sampling_algorithms.cpp	/^static constexpr u8 TYPE_MAPPING_SUFFIX_LENGTH = 7;$/;"	v	file:
TestHelper	test/test-cases/TestHelper.hpp	/^class TestHelper {$/;"	c
TestHelper::CheckRelationCompression	test/test-cases/TestHelper.cpp	/^void TestHelper::CheckRelationCompression(Relation &relation, RelationCompressor &compressor, const vector<u8> expected_compression_schemes)$/;"	f	class:TestHelper	signature:(Relation &relation, RelationCompressor &compressor, const vector<u8> expected_compression_schemes)
TestHelper::CheckRelationCompression	test/test-cases/TestHelper.hpp	/^   static void CheckRelationCompression(Relation &relation, RelationCompressor &compressor, const vector<u8> expected_compression_schemes = {});$/;"	p	class:TestHelper	access:public	signature:(Relation &relation, RelationCompressor &compressor, const vector<u8> expected_compression_schemes = {})
TestResult	tools/playground/sampling_algorithms.cpp	/^struct TestResult {$/;"	s	file:
TestResult::operator <<	tools/playground/sampling_algorithms.cpp	/^    friend std::ostream& operator<<(std::ostream& s, const TestResult&) {$/;"	f	struct:TestResult	access:friend	signature:(std::ostream& s, const TestResult&)
ThreadCache	btrblocks/cache/ThreadCache.hpp	/^class ThreadCache {$/;"	c	namespace:btrblocks
ThreadCacheContainer	btrblocks/cache/ThreadCache.hpp	/^  ThreadCacheContainer() { log << '\\n'; }$/;"	f	struct:btrblocks::ThreadCacheContainer	access:public	signature:()
ThreadCacheContainer	btrblocks/cache/ThreadCache.hpp	/^struct ThreadCacheContainer {$/;"	s	namespace:btrblocks
Truncation16	btrblocks/scheme/integer/Truncation.hpp	/^class Truncation16 : public IntegerScheme {$/;"	c	namespace:btrblocks::legacy::integers	inherits:IntegerScheme
Truncation8	btrblocks/scheme/integer/Truncation.hpp	/^class Truncation8 : public IntegerScheme {$/;"	c	namespace:btrblocks::legacy::integers	inherits:IntegerScheme
TruncationStructure	btrblocks/scheme/integer/Truncation.hpp	/^struct TruncationStructure {$/;"	s	namespace:btrblocks::legacy::integers
TypeWrapper	btrblocks/compression/SchemePicker.hpp	/^class TypeWrapper {};$/;"	c	namespace:btrblocks
TypeWrapper	btrblocks/compression/SchemePicker.hpp	/^class TypeWrapper<DoubleScheme, DoubleSchemeType> {$/;"	c	namespace:btrblocks
TypeWrapper	btrblocks/compression/SchemePicker.hpp	/^class TypeWrapper<IntegerScheme, IntegerSchemeType> {$/;"	c	namespace:btrblocks
TypeWrapper	btrblocks/compression/SchemePicker.hpp	/^class TypeWrapper<StringScheme, StringSchemeType> {$/;"	c	namespace:btrblocks
UNCOMPRESSED	btrblocks/scheme/SchemeType.hpp	/^  UNCOMPRESSED = 0,$/;"	m	class:btrblocks::IntegerSchemeType	access:private
UNCOMPRESSED	btrblocks/scheme/SchemeType.hpp	/^  UNCOMPRESSED = 0,$/;"	m	class:btrblocks::IntegerSchemeType::DoubleSchemeType	access:private
UNCOMPRESSED	btrblocks/scheme/SchemeType.hpp	/^  UNCOMPRESSED = 0,$/;"	m	class:btrblocks::IntegerSchemeType::DoubleSchemeType::StringSchemeType	access:private
UNREACHABLE	btrblocks/common/Exceptions.hpp	/^#define UNREACHABLE(/;"	d
USES3CRT	tools/playground/test-s3-crt.cpp	/^#define USES3CRT$/;"	d	file:
Uncompressed	btrblocks/scheme/double/Uncompressed.hpp	/^class Uncompressed : public DoubleScheme {$/;"	c	namespace:btrblocks::legacy::doubles	inherits:DoubleScheme
Uncompressed	btrblocks/scheme/integer/Uncompressed.hpp	/^class Uncompressed : public IntegerScheme {$/;"	c	namespace:btrblocks::legacy::integers	inherits:IntegerScheme
Uncompressed	btrblocks/scheme/string/Uncompressed.hpp	/^class Uncompressed : public StringScheme {$/;"	c	namespace:btrblocks::legacy::strings	inherits:StringScheme
UncompressedStructure	btrblocks/scheme/string/Uncompressed.hpp	/^struct UncompressedStructure {$/;"	s	namespace:btrblocks::legacy::strings
Utils	btrblocks/common/Utils.hpp	/^class Utils {$/;"	c	namespace:btrblocks
VDictCompressColumn	btrblocks/scheme/templated/VarDictionary.hpp	/^inline u32 VDictCompressColumn(const StringArrayViewer src,$/;"	f	namespace:btrblocks::legacy	signature:(const StringArrayViewer src, const BITMAP*, u8* dest, StringStats& stats)
VDictDecompressColumn	btrblocks/scheme/templated/VarDictionary.hpp	/^inline void VDictDecompressColumn(u8* dest,$/;"	f	namespace:btrblocks::legacy	signature:(u8* dest, BitmapWrapper*, const u8* src, u32 tuple_count, u32 level)
VDictExpectedCompressionRatio	btrblocks/scheme/templated/VarDictionary.hpp	/^inline double VDictExpectedCompressionRatio(StringStats& stats) {$/;"	f	namespace:btrblocks::legacy	signature:(StringStats& stats)
VDictGetDecompressedSize	btrblocks/scheme/templated/VarDictionary.hpp	/^inline u32 VDictGetDecompressedSize(const u8* src, u32) {$/;"	f	namespace:btrblocks::legacy	signature:(const u8* src, u32)
VQo	.cache/clangd/index/IntegerStats.cpp.F4BA4C1C0B41EBC3.idx	/^RIFF:$/;"	v
VarDictionaryStructure	btrblocks/scheme/templated/VarDictionary.hpp	/^struct VarDictionaryStructure {$/;"	s	namespace:btrblocks::legacy
Vector	btrblocks/storage/MMapVector.hpp	/^  Vector() : data(nullptr) {}$/;"	f	struct:btrblocks::mmapvector::Vector	access:public	signature:()
Vector	btrblocks/storage/MMapVector.hpp	/^  Vector(const Vector&) = delete;$/;"	p	struct:btrblocks::mmapvector::Vector	access:public	signature:(const Vector&)
Vector	btrblocks/storage/MMapVector.hpp	/^  explicit Vector(const char* pathname) { readBinary(pathname); }$/;"	f	struct:btrblocks::mmapvector::Vector	access:public	signature:(const char* pathname)
Vector	btrblocks/storage/MMapVector.hpp	/^  explicit Vector(uint64_t count) : count(count), data(new T[count]) {}$/;"	f	struct:btrblocks::mmapvector::Vector	access:public	signature:(uint64_t count)
Vector	btrblocks/storage/MMapVector.hpp	/^struct Vector {$/;"	s	namespace:btrblocks::mmapvector
Vector	btrblocks/storage/MMapVector.hpp	/^struct Vector<std::string_view> {$/;"	s	namespace:btrblocks::mmapvector
View	btrblocks/storage/StringPointerArrayViewer.hpp	/^  struct View {$/;"	s	struct:btrblocks::StringPointerArrayViewer	access:public
WRITE_RAW	btrblocks/common/Units.hpp	/^#define WRITE_RAW(/;"	d
X	.cache/clangd/index/config.cpp.FB9998126E03626D.idx	/^RIFF®/;"	v
XPBPStructure	btrblocks/scheme/integer/PBP.hpp	/^struct XPBPStructure {  \/\/ need to be aligned by 4 because of$/;"	s	namespace:btrblocks::integers
Y	.cache/clangd/index/Relation.hpp.3445CECF2F3A715D.idx	/^¡B#Y;ºØ·EÙ¬¨½Ñ\\sê$/;"	v
_	.cache/clangd/index/Log.hpp.763E873E577A1E23.idx	/^RIFFÚ/;"	v
_iterator	btrblocks/storage/MMapVector.hpp	/^    _iterator(SlotPtr slot, Ptr data) : slot(slot), data(data) {}$/;"	f	struct:btrblocks::mmapvector::Vector::_iterator	access:public	signature:(SlotPtr slot, Ptr data)
_iterator	btrblocks/storage/MMapVector.hpp	/^  struct _iterator {$/;"	s	struct:btrblocks::mmapvector::Vector	access:public
_name	tools/playground/sampling_algorithms.cpp	/^  std::string _name;$/;"	m	struct:RandomSampler	file:	access:public
activate	btrblocks/common/PerfExternal.hpp	/^  bool activate = true;$/;"	m	struct:PerfExternalBlock	access:public
addColumn	btrblocks/storage/Relation.cpp	/^void Relation::addColumn(Column&& column) {$/;"	f	class:btrblocks::Relation	signature:(Column&& column)
addColumn	btrblocks/storage/Relation.cpp	/^void Relation::addColumn(const string& column_file_path) {$/;"	f	class:btrblocks::Relation	signature:(const string& column_file_path)
addColumn	btrblocks/storage/Relation.hpp	/^  void addColumn(Column&& column);$/;"	p	class:btrblocks::Relation	access:public	signature:(Column&& column)
addColumn	btrblocks/storage/Relation.hpp	/^  void addColumn(const string& column_file_path);$/;"	p	class:btrblocks::Relation	access:public	signature:(const string& column_file_path)
addCompressedChunk	btrblocks/storage/Chunk.cpp	/^void ColumnPart::addCompressedChunk(vector<u8>&& chunk) {$/;"	f	class:btrblocks::ColumnPart	signature:(vector<u8>&& chunk)
addCompressedChunk	btrblocks/storage/Chunk.hpp	/^  void addCompressedChunk(vector<u8>&& chunk);$/;"	p	class:btrblocks::ColumnPart	access:public	signature:(vector<u8>&& chunk)
addIfEnabled	btrblocks/scheme/SchemePool.cpp	/^int addIfEnabled(SchemeMap& schemeMap, const SchemeSet& schemeSet) {$/;"	f	namespace:btrblocks	signature:(SchemeMap& schemeMap, const SchemeSet& schemeSet)
alignBy	btrblocks/common/Utils.hpp	/^  static constexpr u64 alignBy(u64 num, u64 alignment, u64& diff) {$/;"	f	class:btrblocks::Utils	access:public	signature:(u64 num, u64 alignment, u64& diff)
all	btrblocks/scheme/SchemeSet.hpp	/^  constexpr static SchemeSet all() {$/;"	f	struct:btrblocks::SchemeSet	access:public	signature:()
allocated	tools/conversion/s3-management.hpp	/^static std::atomic<uint64_t> allocated = 0;$/;"	v
allocation_tag	tools/conversion/s3-management.hpp	/^static const char *allocation_tag = "btr";$/;"	v
allocation_tag	tools/playground/test-s3-crt.cpp	/^static const char* allocation_tag = "test-s3-crt";$/;"	v	file:
analyzeBlock	tools/datasets/integer-stats/IntegerStats.cpp	/^map<string, string> analyzeBlock(Vector<INTEGER> &column, Vector<BITMAP> &bitmap, u32 start_index, u32 tuple_count, bool print_block = false)$/;"	f	signature:(Vector<INTEGER> &column, Vector<BITMAP> &bitmap, u32 start_index, u32 tuple_count, bool print_block = false)
analyzeBlock	tools/datasets/string-stats/StringStats.cpp	/^map<string, string> analyzeBlock(Vector<str> &column, Vector<BITMAP> &bitmap, u32 start_index, u32 tuple_count, bool print_block = false)$/;"	f	signature:(Vector<str> &column, Vector<BITMAP> &bitmap, u32 start_index, u32 tuple_count, bool print_block = false)
applyDelta	btrblocks/extern/FastPFOR.cpp	/^void LemiereImpl<Codec>::applyDelta(data_t* src, size_t count) {$/;"	f	class:LemiereImpl	signature:(data_t* src, size_t count)
applyDelta	btrblocks/extern/FastPFOR.hpp	/^  static void applyDelta(data_t* src, size_t count);$/;"	p	struct:LemiereImpl	access:public	signature:(data_t* src, size_t count)
array	btrblocks/storage/Chunk.hpp	/^  [[nodiscard]] [[nodiscard]] [[nodiscard]] [[nodiscard]] inline const T* array(u32 c) const {$/;"	f	class:btrblocks::Chunk	access:public	signature:(u32 c) const
attributes_meta	btrblocks/compression/Datablock.hpp	/^  ColumnMeta attributes_meta[];$/;"	m	struct:btrblocks::DatablockMeta	access:public
autoScheme	btrblocks/scheme/SchemeType.hpp	/^constexpr auto autoScheme() {$/;"	f	class:btrblocks::IntegerSchemeType::DoubleSchemeType::StringSchemeType	access:private	signature:()
auto_fpb	btrblocks/scheme/integer/PBP.cpp	/^constexpr bool auto_fpb = true;$/;"	v
available_schemes	btrblocks/scheme/SchemePool.hpp	/^  static unique_ptr<SchemesCollection> available_schemes;$/;"	m	class:btrblocks::SchemePool	access:public
average_run_length	btrblocks/stats/NumberStats.hpp	/^  u32 average_run_length;$/;"	m	struct:btrblocks::NumberStats	access:public
b	.cache/clangd/index/Relation.cpp.8D18D29B56AE84D8.idx	/^õáÓ5]b;.'ØõÄF2®\/85Sàïê§íjhCR´ª´ù±æÎ'Ì´É~s1Ú?¿\/^*ÂUêºÀQî<>w÷¹µ0/;"	v
base	btrblocks/scheme/integer/Truncation.hpp	/^  INTEGER base;$/;"	m	struct:btrblocks::legacy::integers::TruncationStructure	access:public
begin	btrblocks/storage/MMapVector.hpp	/^  [[nodiscard]] const_iterator begin() const { return data; }$/;"	f	struct:btrblocks::mmapvector::Vector	access:public	signature:() const
begin	btrblocks/storage/MMapVector.hpp	/^  [[nodiscard]] const_iterator begin() const { return {data->slot, reinterpret_cast<char*>(data)}; }$/;"	f	struct:btrblocks::mmapvector::Vector	access:public	signature:() const
begin	btrblocks/storage/MMapVector.hpp	/^  iterator begin() { return data; }$/;"	f	struct:btrblocks::mmapvector::Vector	access:public	signature:()
begin	btrblocks/storage/MMapVector.hpp	/^  iterator begin() { return {data->slot, reinterpret_cast<char*>(data)}; }$/;"	f	struct:btrblocks::mmapvector::Vector	access:public	signature:()
bg	.cache/clangd/index/DoubleBP.hpp.C5C27C78AF3868A1.idx	/^RIFF/;"	v
bias	btrblocks/compression/Datablock.hpp	/^  s32 bias;$/;"	m	struct:btrblocks::ColumnMeta	access:public
bias	btrblocks/scheme/integer/FOR.hpp	/^  INTEGER bias;$/;"	m	struct:btrblocks::legacy::integers::FORStructure	access:public
bitmap	btrblocks/extern/RoaringBitmap.cpp	/^namespace btrblocks::bitmap {$/;"	n	class:btrblocks	file:
bitmap	btrblocks/extern/RoaringBitmap.hpp	/^namespace btrblocks::bitmap {$/;"	n	class:btrblocks
bitmap	btrblocks/stats/NumberStats.hpp	/^  const BITMAP* bitmap;$/;"	m	struct:btrblocks::NumberStats	access:public
bitmap	btrblocks/storage/Column.hpp	/^  Vector<BITMAP> bitmap;$/;"	m	class:btrblocks::Column	access:public
bitmap_type	btrblocks/compression/Datablock.hpp	/^  BitmapType bitmap_type;$/;"	m	struct:btrblocks::ColumnMeta	access:public
bitmaps	btrblocks/storage/Chunk.hpp	/^  unique_ptr<unique_ptr<BITMAP[]>[]> bitmaps;$/;"	m	class:btrblocks::Chunk	access:public
bitmaps	btrblocks/storage/Column.cpp	/^const Vector<BITMAP>& Column::bitmaps() const {$/;"	f	class:btrblocks::Column	signature:() const
bitmaps	btrblocks/storage/Column.hpp	/^  [[nodiscard]] const Vector<BITMAP>& bitmaps() const;$/;"	p	class:btrblocks::Column	access:public	signature:() const
block_size	btrblocks/scheme/double/Pseudodecimal.hpp	/^const u32 block_size = 4;  \/\/ Block size adjusted for AVX2$/;"	m	namespace:btrblocks::doubles
btrbench	bench/bench-cases/regression_benchmark.cpp	/^namespace btrbench {$/;"	n	file:
btrbench::BtrBlocksBenchmark	bench/bench-cases/regression_benchmark.cpp	/^static void BtrBlocksBenchmark(benchmark::State& state,$/;"	f	namespace:btrbench	signature:(benchmark::State& state, const string& dataset, const function<void()>& setup)
btrbench::RegisterSingleBenchmarks	bench/bench-cases/regression_benchmark.cpp	/^void RegisterSingleBenchmarks() {$/;"	f	namespace:btrbench	signature:()
btrbench::SetupAllSchemes	bench/bench-cases/regression_benchmark.cpp	/^static void SetupAllSchemes() {$/;"	f	namespace:btrbench	signature:()
btrbench::SetupSchemes	bench/bench-cases/regression_benchmark.cpp	/^static void SetupSchemes(DoubleSchemeType scheme) {$/;"	f	namespace:btrbench	signature:(DoubleSchemeType scheme)
btrbench::SetupSchemes	bench/bench-cases/regression_benchmark.cpp	/^static void SetupSchemes(StringSchemeType scheme) {$/;"	f	namespace:btrbench	signature:(StringSchemeType scheme)
btrbench::SetupSchemes	bench/bench-cases/regression_benchmark.cpp	/^static void SetupSchemes(const vector<IntegerSchemeType>& schemes) {$/;"	f	namespace:btrbench	signature:(const vector<IntegerSchemeType>& schemes)
btrblocks	btrblocks/btrblocks.cpp	/^namespace btrblocks {$/;"	n	file:
btrblocks	btrblocks/btrblocks.hpp	/^namespace btrblocks {$/;"	n
btrblocks	btrblocks/cache/ThreadCache.hpp	/^namespace btrblocks {$/;"	n
btrblocks	btrblocks/common/Units.hpp	/^namespace btrblocks {$/;"	n
btrblocks	btrblocks/common/Utils.hpp	/^namespace btrblocks {$/;"	n
btrblocks	btrblocks/compression/BtrReader.cpp	/^namespace btrblocks {$/;"	n	file:
btrblocks	btrblocks/compression/BtrReader.hpp	/^namespace btrblocks {$/;"	n
btrblocks	btrblocks/compression/Compressor.hpp	/^namespace btrblocks {$/;"	n
btrblocks	btrblocks/compression/Datablock.cpp	/^namespace btrblocks {$/;"	n	file:
btrblocks	btrblocks/compression/Datablock.hpp	/^namespace btrblocks {$/;"	n
btrblocks	btrblocks/compression/SchemePicker.hpp	/^namespace btrblocks {$/;"	n
btrblocks	btrblocks/scheme/CompressionScheme.cpp	/^namespace btrblocks {$/;"	n	file:
btrblocks	btrblocks/scheme/CompressionScheme.hpp	/^namespace btrblocks {$/;"	n
btrblocks	btrblocks/scheme/SchemeConfig.hpp	/^namespace btrblocks {$/;"	n
btrblocks	btrblocks/scheme/SchemePool.cpp	/^namespace btrblocks {$/;"	n	file:
btrblocks	btrblocks/scheme/SchemePool.hpp	/^namespace btrblocks {$/;"	n
btrblocks	btrblocks/scheme/SchemeSet.hpp	/^namespace btrblocks {$/;"	n
btrblocks	btrblocks/scheme/SchemeType.hpp	/^namespace btrblocks {$/;"	n
btrblocks	btrblocks/scheme/templated/DynamicDictionary.hpp	/^namespace btrblocks {$/;"	n
btrblocks	btrblocks/scheme/templated/FixedDictionary.hpp	/^namespace btrblocks {$/;"	n
btrblocks	btrblocks/scheme/templated/Frequency.hpp	/^namespace btrblocks {$/;"	n
btrblocks	btrblocks/scheme/templated/RLE.hpp	/^namespace btrblocks {$/;"	n
btrblocks	btrblocks/stats/NumberStats.hpp	/^namespace btrblocks {$/;"	n
btrblocks	btrblocks/stats/StringStats.cpp	/^namespace btrblocks {$/;"	n	file:
btrblocks	btrblocks/stats/StringStats.hpp	/^namespace btrblocks {$/;"	n
btrblocks	btrblocks/storage/Chunk.cpp	/^namespace btrblocks {$/;"	n	file:
btrblocks	btrblocks/storage/Chunk.hpp	/^namespace btrblocks {$/;"	n
btrblocks	btrblocks/storage/Column.cpp	/^namespace btrblocks {$/;"	n	file:
btrblocks	btrblocks/storage/Column.hpp	/^namespace btrblocks {$/;"	n
btrblocks	btrblocks/storage/MMapVector.hpp	/^namespace btrblocks {$/;"	n
btrblocks	btrblocks/storage/Relation.cpp	/^namespace btrblocks {$/;"	n	file:
btrblocks	btrblocks/storage/Relation.hpp	/^namespace btrblocks {$/;"	n
btrblocks	btrblocks/storage/StringArrayViewer.hpp	/^namespace btrblocks {$/;"	n
btrblocks	btrblocks/storage/StringPointerArrayViewer.hpp	/^namespace btrblocks {$/;"	n
btrblocks::BtrBlocksConfig	btrblocks/btrblocks.hpp	/^struct BtrBlocksConfig {$/;"	s	namespace:btrblocks
btrblocks::BtrBlocksConfig::configure	btrblocks/btrblocks.cpp	/^void BtrBlocksConfig::configure(const std::function<void(BtrBlocksConfig&)>& f) {$/;"	f	class:btrblocks::BtrBlocksConfig	signature:(const std::function<void(BtrBlocksConfig&)>& f)
btrblocks::BtrBlocksConfig::configure	btrblocks/btrblocks.hpp	/^  static void configure(const std::function<void(BtrBlocksConfig&)>& f = [](BtrBlocksConfig&) {});$/;"	p	struct:btrblocks::BtrBlocksConfig	access:public	signature:(const std::function<void(BtrBlocksConfig&)>& f = [](BtrBlocksConfig&) {})
btrblocks::BtrBlocksConfig::doubles	btrblocks/btrblocks.hpp	/^  } doubles;$/;"	m	struct:btrblocks::BtrBlocksConfig	typeref:struct:btrblocks::BtrBlocksConfig::__anon6	access:public
btrblocks::BtrBlocksConfig::get	btrblocks/btrblocks.hpp	/^  static BtrBlocksConfig& get() {$/;"	f	struct:btrblocks::BtrBlocksConfig	access:public	signature:()
btrblocks::BtrBlocksConfig::integers	btrblocks/btrblocks.hpp	/^  } integers;$/;"	m	struct:btrblocks::BtrBlocksConfig	typeref:struct:btrblocks::BtrBlocksConfig::__anon5	access:public
btrblocks::BtrBlocksConfig::local	btrblocks/btrblocks.hpp	/^  static BtrBlocksConfig& local() {$/;"	f	struct:btrblocks::BtrBlocksConfig	access:public	signature:()
btrblocks::BtrBlocksConfig::strings	btrblocks/btrblocks.hpp	/^  } strings;$/;"	m	struct:btrblocks::BtrBlocksConfig	typeref:struct:btrblocks::BtrBlocksConfig::__anon7	access:public
btrblocks::BtrReader	btrblocks/compression/BtrReader.hpp	/^class BtrReader {$/;"	c	namespace:btrblocks
btrblocks::BtrReader::BtrReader	btrblocks/compression/BtrReader.cpp	/^BtrReader::BtrReader(void* data) : data(data) {$/;"	f	class:btrblocks::BtrReader	signature:(void* data)
btrblocks::BtrReader::BtrReader	btrblocks/compression/BtrReader.hpp	/^  explicit BtrReader(void* data);$/;"	p	class:btrblocks::BtrReader	access:public	signature:(void* data)
btrblocks::BtrReader::getBasicSchemeDescription	btrblocks/compression/BtrReader.cpp	/^string BtrReader::getBasicSchemeDescription(u32 index) {$/;"	f	class:btrblocks::BtrReader	signature:(u32 index)
btrblocks::BtrReader::getBasicSchemeDescription	btrblocks/compression/BtrReader.hpp	/^  [[nodiscard]] string getBasicSchemeDescription(u32 index);$/;"	p	class:btrblocks::BtrReader	access:public	signature:(u32 index)
btrblocks::BtrReader::getBitmap	btrblocks/compression/BtrReader.cpp	/^BitmapWrapper* BtrReader::getBitmap(u32 index) {$/;"	f	class:btrblocks::BtrReader	signature:(u32 index)
btrblocks::BtrReader::getBitmap	btrblocks/compression/BtrReader.hpp	/^  [[nodiscard]] BitmapWrapper* getBitmap(u32 index);$/;"	p	class:btrblocks::BtrReader	access:public	signature:(u32 index)
btrblocks::BtrReader::getChunkCount	btrblocks/compression/BtrReader.hpp	/^  [[nodiscard]] inline u32 getChunkCount() { return this->getPartMetadata()->num_chunks; }$/;"	f	class:btrblocks::BtrReader	access:public	signature:()
btrblocks::BtrReader::getChunkMetadata	btrblocks/compression/BtrReader.hpp	/^  [[nodiscard]] inline const ColumnChunkMeta* getChunkMetadata(u32 index) {$/;"	f	class:btrblocks::BtrReader	access:public	signature:(u32 index)
btrblocks::BtrReader::getColumnType	btrblocks/compression/BtrReader.hpp	/^  [[nodiscard]] inline ColumnType getColumnType() { return this->getChunkMetadata(0)->type; }$/;"	f	class:btrblocks::BtrReader	access:public	signature:()
btrblocks::BtrReader::getDecompressedDataSize	btrblocks/compression/BtrReader.cpp	/^u32 BtrReader::getDecompressedDataSize(u32 index) {$/;"	f	class:btrblocks::BtrReader	signature:(u32 index)
btrblocks::BtrReader::getDecompressedDataSize	btrblocks/compression/BtrReader.hpp	/^  [[nodiscard]] u32 getDecompressedDataSize(u32 index);$/;"	p	class:btrblocks::BtrReader	access:public	signature:(u32 index)
btrblocks::BtrReader::getDecompressedSize	btrblocks/compression/BtrReader.cpp	/^u32 BtrReader::getDecompressedSize(u32 index) {$/;"	f	class:btrblocks::BtrReader	signature:(u32 index)
btrblocks::BtrReader::getDecompressedSize	btrblocks/compression/BtrReader.hpp	/^  [[nodiscard]] u32 getDecompressedSize(u32 index);$/;"	p	class:btrblocks::BtrReader	access:public	signature:(u32 index)
btrblocks::BtrReader::getPartMetadata	btrblocks/compression/BtrReader.hpp	/^  [[nodiscard]] inline const ColumnPartMetadata* getPartMetadata() {$/;"	f	class:btrblocks::BtrReader	access:public	signature:()
btrblocks::BtrReader::getSchemeDescription	btrblocks/compression/BtrReader.cpp	/^string BtrReader::getSchemeDescription(u32 index) {$/;"	f	class:btrblocks::BtrReader	signature:(u32 index)
btrblocks::BtrReader::getSchemeDescription	btrblocks/compression/BtrReader.hpp	/^  [[nodiscard]] string getSchemeDescription(u32 index);$/;"	p	class:btrblocks::BtrReader	access:public	signature:(u32 index)
btrblocks::BtrReader::getTupleCount	btrblocks/compression/BtrReader.hpp	/^  [[nodiscard]] inline u32 getTupleCount(u32 index) {$/;"	f	class:btrblocks::BtrReader	access:public	signature:(u32 index)
btrblocks::BtrReader::m_bitmap_wrappers	btrblocks/compression/BtrReader.hpp	/^  std::vector<BitmapWrapper*> m_bitmap_wrappers;$/;"	m	class:btrblocks::BtrReader	access:private
btrblocks::BtrReader::m_bitsets	btrblocks/compression/BtrReader.hpp	/^  std::vector<boost::dynamic_bitset<>*> m_bitsets;$/;"	m	class:btrblocks::BtrReader	access:private
btrblocks::BtrReader::readColumn	btrblocks/compression/BtrReader.cpp	/^bool BtrReader::readColumn(std::vector<u8>& output_chunk_v, u32 index) {$/;"	f	class:btrblocks::BtrReader	signature:(std::vector<u8>& output_chunk_v, u32 index)
btrblocks::BtrReader::readColumn	btrblocks/compression/BtrReader.hpp	/^  bool readColumn(std::vector<u8>& output_chunk, u32 index);$/;"	p	class:btrblocks::BtrReader	access:public	signature:(std::vector<u8>& output_chunk, u32 index)
btrblocks::BtrReader::releaseBitmap	btrblocks/compression/BtrReader.cpp	/^void BtrReader::releaseBitmap(u32 index) {$/;"	f	class:btrblocks::BtrReader	signature:(u32 index)
btrblocks::BtrReader::releaseBitmap	btrblocks/compression/BtrReader.hpp	/^  void releaseBitmap(u32 index);$/;"	p	class:btrblocks::BtrReader	access:public	signature:(u32 index)
btrblocks::BtrReader::releaseBitmapOwnership	btrblocks/compression/BtrReader.cpp	/^BitmapWrapper* BtrReader::releaseBitmapOwnership(u32 index) {$/;"	f	class:btrblocks::BtrReader	signature:(u32 index)
btrblocks::BtrReader::releaseBitmapOwnership	btrblocks/compression/BtrReader.hpp	/^  BitmapWrapper* releaseBitmapOwnership(u32 index);$/;"	p	class:btrblocks::BtrReader	access:public	signature:(u32 index)
btrblocks::BtrReader::~BtrReader	btrblocks/compression/BtrReader.cpp	/^BtrReader::~BtrReader() {$/;"	f	class:btrblocks::BtrReader	signature:()
btrblocks::BtrReader::~BtrReader	btrblocks/compression/BtrReader.hpp	/^  virtual ~BtrReader();$/;"	p	class:btrblocks::BtrReader	access:public	signature:()
btrblocks::CSchemePicker	btrblocks/compression/SchemePicker.hpp	/^class CSchemePicker {$/;"	c	namespace:btrblocks
btrblocks::CSchemePicker::chooseScheme	btrblocks/compression/SchemePicker.hpp	/^  static SchemeType& chooseScheme(StatsType& stats, u8 allowed_cascading_level) {$/;"	f	class:btrblocks::CSchemePicker	access:public	signature:(StatsType& stats, u8 allowed_cascading_level)
btrblocks::CSchemePicker::compress	btrblocks/compression/SchemePicker.hpp	/^  static void compress(const Type* src,$/;"	f	class:btrblocks::CSchemePicker	access:public	signature:(const Type* src, const BITMAP* nullmap, u8* dest, u32 tuple_count, u8 allowed_cascading_level, u32& after_size, u8& scheme_code, u8 force_scheme = autoScheme(), const string& comment = Ó)
btrblocks::Chunk	btrblocks/storage/Chunk.hpp	/^class Chunk {$/;"	c	namespace:btrblocks
btrblocks::Chunk::Chunk	btrblocks/storage/Chunk.cpp	/^Chunk::Chunk(unique_ptr<unique_ptr<u8[]>[]>&& columns,$/;"	f	class:btrblocks::Chunk	signature:(unique_ptr<unique_ptr<u8[]>[]>&& columns, unique_ptr<unique_ptr<BITMAP[]>[]>&& bitmaps, u64 tuple_count, const Relation& relation, unique_ptr<SIZE[]>&& sizes)
btrblocks::Chunk::Chunk	btrblocks/storage/Chunk.cpp	/^Chunk::Chunk(unique_ptr<unique_ptr<u8[]>[]>&& columns,$/;"	f	class:btrblocks::Chunk	signature:(unique_ptr<unique_ptr<u8[]>[]>&& columns, unique_ptr<unique_ptr<BITMAP[]>[]>&& bitmaps, unique_ptr<bool[]>&& column_requires_copy, u64 tuple_count, const Relation& relation, unique_ptr<SIZE[]>&& sizes)
btrblocks::Chunk::Chunk	btrblocks/storage/Chunk.hpp	/^  Chunk(unique_ptr<unique_ptr<u8[]>[]>&& columns,$/;"	p	class:btrblocks::Chunk	access:public	signature:(unique_ptr<unique_ptr<u8[]>[]>&& columns, unique_ptr<unique_ptr<BITMAP[]>[]>&& bitmaps, u64 tuple_count, const Relation& relation, unique_ptr<SIZE[]>&& sizes)
btrblocks::Chunk::Chunk	btrblocks/storage/Chunk.hpp	/^  Chunk(unique_ptr<unique_ptr<u8[]>[]>&& columns,$/;"	p	class:btrblocks::Chunk	access:public	signature:(unique_ptr<unique_ptr<u8[]>[]>&& columns, unique_ptr<unique_ptr<BITMAP[]>[]>&& bitmaps, unique_ptr<bool[]>&& column_requires_copy, u64 tuple_count, const Relation& relation, unique_ptr<SIZE[]>&& sizes)
btrblocks::Chunk::array	btrblocks/storage/Chunk.hpp	/^  [[nodiscard]] [[nodiscard]] [[nodiscard]] [[nodiscard]] inline const T* array(u32 c) const {$/;"	f	class:btrblocks::Chunk	access:public	signature:(u32 c) const
btrblocks::Chunk::bitmaps	btrblocks/storage/Chunk.hpp	/^  unique_ptr<unique_ptr<BITMAP[]>[]> bitmaps;$/;"	m	class:btrblocks::Chunk	access:public
btrblocks::Chunk::column_requires_copy	btrblocks/storage/Chunk.hpp	/^  unique_ptr<bool[]> column_requires_copy;$/;"	m	class:btrblocks::Chunk	access:public
btrblocks::Chunk::columns	btrblocks/storage/Chunk.hpp	/^  unique_ptr<unique_ptr<u8[]>[]> columns;$/;"	m	class:btrblocks::Chunk	access:public
btrblocks::Chunk::get	btrblocks/storage/Chunk.hpp	/^  inline T& get(u32 c, u32 i) const {$/;"	f	class:btrblocks::Chunk	access:public	signature:(u32 c, u32 i) const
btrblocks::Chunk::has	btrblocks/storage/Chunk.hpp	/^  [[nodiscard]] inline BITMAP has(u32 c, u32 i) const { return bitmaps.get()[c].get()[i]; }$/;"	f	class:btrblocks::Chunk	access:public	signature:(u32 c, u32 i) const
btrblocks::Chunk::nullmap	btrblocks/storage/Chunk.hpp	/^  [[nodiscard]] inline const BITMAP* nullmap(u32 c) const { return bitmaps.get()[c].get(); }$/;"	f	class:btrblocks::Chunk	access:public	signature:(u32 c) const
btrblocks::Chunk::operator ()	btrblocks/storage/Chunk.hpp	/^  inline const str operator()(u32 c, u32 i) const {$/;"	f	class:btrblocks::Chunk	access:public	signature:(u32 c, u32 i) const
btrblocks::Chunk::operator ==	btrblocks/storage/Chunk.cpp	/^bool Chunk::operator==(const btrblocks::Chunk& other) const {$/;"	f	class:btrblocks::Chunk	signature:(const btrblocks::Chunk& other) const
btrblocks::Chunk::operator ==	btrblocks/storage/Chunk.hpp	/^  bool operator==(const Chunk& other) const;$/;"	p	class:btrblocks::Chunk	access:public	signature:(const Chunk& other) const
btrblocks::Chunk::relation	btrblocks/storage/Chunk.hpp	/^  const Relation& relation;$/;"	m	class:btrblocks::Chunk	access:public
btrblocks::Chunk::reset	btrblocks/storage/Chunk.cpp	/^void Chunk::reset() {$/;"	f	class:btrblocks::Chunk	signature:()
btrblocks::Chunk::reset	btrblocks/storage/Chunk.hpp	/^  void reset();$/;"	p	class:btrblocks::Chunk	access:public	signature:()
btrblocks::Chunk::size	btrblocks/storage/Chunk.hpp	/^  [[nodiscard]] inline SIZE size(u32 c) const { return sizes[c]; }$/;"	f	class:btrblocks::Chunk	access:public	signature:(u32 c) const
btrblocks::Chunk::size_bytes	btrblocks/storage/Chunk.hpp	/^  [[nodiscard]] inline SIZE size_bytes() const {$/;"	f	class:btrblocks::Chunk	access:public	signature:() const
btrblocks::Chunk::sizes	btrblocks/storage/Chunk.hpp	/^  unique_ptr<SIZE[]> sizes;$/;"	m	class:btrblocks::Chunk	access:public
btrblocks::Chunk::tuple_count	btrblocks/storage/Chunk.hpp	/^  const u64 tuple_count;$/;"	m	class:btrblocks::Chunk	access:public
btrblocks::Column	btrblocks/storage/Column.hpp	/^class Column {$/;"	c	namespace:btrblocks
btrblocks::Column::Column	btrblocks/storage/Column.cpp	/^Column::Column(const ColumnType type,$/;"	f	class:btrblocks::Column	signature:(const ColumnType type, string name, const string& data_path, const string& bitmap_path)
btrblocks::Column::Column	btrblocks/storage/Column.cpp	/^Column::Column(string name, Data&& data)$/;"	f	class:btrblocks::Column	signature:(string name, Data&& data)
btrblocks::Column::Column	btrblocks/storage/Column.cpp	/^Column::Column(string name, Data&& data, Vector<BITMAP>&& bitmap)$/;"	f	class:btrblocks::Column	signature:(string name, Data&& data, Vector<BITMAP>&& bitmap)
btrblocks::Column::Column	btrblocks/storage/Column.hpp	/^  Column(const ColumnType type, string name, const string& data_path, const string& bitmap_path);$/;"	p	class:btrblocks::Column	access:public	signature:(const ColumnType type, string name, const string& data_path, const string& bitmap_path)
btrblocks::Column::Column	btrblocks/storage/Column.hpp	/^  Column(string name, Data&& data);$/;"	p	class:btrblocks::Column	access:public	signature:(string name, Data&& data)
btrblocks::Column::Column	btrblocks/storage/Column.hpp	/^  Column(string name, Data&& data, Vector<BITMAP>&& bitmap);$/;"	p	class:btrblocks::Column	access:public	signature:(string name, Data&& data, Vector<BITMAP>&& bitmap)
btrblocks::Column::bitmap	btrblocks/storage/Column.hpp	/^  Vector<BITMAP> bitmap;$/;"	m	class:btrblocks::Column	access:public
btrblocks::Column::bitmaps	btrblocks/storage/Column.cpp	/^const Vector<BITMAP>& Column::bitmaps() const {$/;"	f	class:btrblocks::Column	signature:() const
btrblocks::Column::bitmaps	btrblocks/storage/Column.hpp	/^  [[nodiscard]] const Vector<BITMAP>& bitmaps() const;$/;"	p	class:btrblocks::Column	access:public	signature:() const
btrblocks::Column::data	btrblocks/storage/Column.hpp	/^  Data data;$/;"	m	class:btrblocks::Column	access:public
btrblocks::Column::doubles	btrblocks/storage/Column.cpp	/^const Vector<DOUBLE>& Column::doubles() const {$/;"	f	class:btrblocks::Column	signature:() const
btrblocks::Column::doubles	btrblocks/storage/Column.hpp	/^  [[nodiscard]] const Vector<DOUBLE>& doubles() const;$/;"	p	class:btrblocks::Column	access:public	signature:() const
btrblocks::Column::fullBitmap	btrblocks/storage/Column.cpp	/^Vector<BITMAP> Column::fullBitmap(SIZE count) {$/;"	f	class:btrblocks::Column	signature:(SIZE count)
btrblocks::Column::fullBitmap	btrblocks/storage/Column.hpp	/^  static Vector<BITMAP> fullBitmap(SIZE count);$/;"	p	class:btrblocks::Column	access:public	signature:(SIZE count)
btrblocks::Column::integers	btrblocks/storage/Column.cpp	/^const Vector<INTEGER>& Column::integers() const {$/;"	f	class:btrblocks::Column	signature:() const
btrblocks::Column::integers	btrblocks/storage/Column.hpp	/^  [[nodiscard]] const Vector<INTEGER>& integers() const;$/;"	p	class:btrblocks::Column	access:public	signature:() const
btrblocks::Column::name	btrblocks/storage/Column.hpp	/^  const string name;$/;"	m	class:btrblocks::Column	access:public
btrblocks::Column::size	btrblocks/storage/Column.cpp	/^SIZE Column::size() const {$/;"	f	class:btrblocks::Column	signature:() const
btrblocks::Column::size	btrblocks/storage/Column.hpp	/^  [[nodiscard]] SIZE size() const;$/;"	p	class:btrblocks::Column	access:public	signature:() const
btrblocks::Column::sizeInBytes	btrblocks/storage/Column.cpp	/^SIZE Column::sizeInBytes() const {$/;"	f	class:btrblocks::Column	signature:() const
btrblocks::Column::sizeInBytes	btrblocks/storage/Column.hpp	/^  [[nodiscard]] SIZE sizeInBytes() const;$/;"	p	class:btrblocks::Column	access:public	signature:() const
btrblocks::Column::strings	btrblocks/storage/Column.cpp	/^const Vector<str>& Column::strings() const {$/;"	f	class:btrblocks::Column	signature:() const
btrblocks::Column::strings	btrblocks/storage/Column.hpp	/^  [[nodiscard]] const Vector<str>& strings() const;$/;"	p	class:btrblocks::Column	access:public	signature:() const
btrblocks::Column::type	btrblocks/storage/Column.hpp	/^  const ColumnType type;$/;"	m	class:btrblocks::Column	access:public
btrblocks::ColumnChunkMeta	btrblocks/compression/Datablock.hpp	/^struct ColumnChunkMeta {$/;"	s	namespace:btrblocks
btrblocks::ColumnChunkMeta::compression_type	btrblocks/compression/Datablock.hpp	/^  u8 compression_type;$/;"	m	struct:btrblocks::ColumnChunkMeta	access:public
btrblocks::ColumnChunkMeta::data	btrblocks/compression/Datablock.hpp	/^  u8 data[];$/;"	m	struct:btrblocks::ColumnChunkMeta	access:public
btrblocks::ColumnChunkMeta::nullmap_offset	btrblocks/compression/Datablock.hpp	/^  u32 nullmap_offset = 0;$/;"	m	struct:btrblocks::ColumnChunkMeta	access:public
btrblocks::ColumnChunkMeta::nullmap_type	btrblocks/compression/Datablock.hpp	/^  BitmapType nullmap_type;$/;"	m	struct:btrblocks::ColumnChunkMeta	access:public
btrblocks::ColumnChunkMeta::tuple_count	btrblocks/compression/Datablock.hpp	/^  u32 tuple_count;$/;"	m	struct:btrblocks::ColumnChunkMeta	access:public
btrblocks::ColumnChunkMeta::type	btrblocks/compression/Datablock.hpp	/^  ColumnType type;$/;"	m	struct:btrblocks::ColumnChunkMeta	access:public
btrblocks::ColumnMeta	btrblocks/compression/Datablock.hpp	/^struct __attribute__((packed)) ColumnMeta {$/;"	s	namespace:btrblocks
btrblocks::ColumnMeta::bias	btrblocks/compression/Datablock.hpp	/^  s32 bias;$/;"	m	struct:btrblocks::ColumnMeta	access:public
btrblocks::ColumnMeta::bitmap_type	btrblocks/compression/Datablock.hpp	/^  BitmapType bitmap_type;$/;"	m	struct:btrblocks::ColumnMeta	access:public
btrblocks::ColumnMeta::column_type	btrblocks/compression/Datablock.hpp	/^  ColumnType column_type;$/;"	m	struct:btrblocks::ColumnMeta	access:public
btrblocks::ColumnMeta::compression_type	btrblocks/compression/Datablock.hpp	/^  u8 compression_type;$/;"	m	struct:btrblocks::ColumnMeta	access:public
btrblocks::ColumnMeta::nullmap_offset	btrblocks/compression/Datablock.hpp	/^  u32 nullmap_offset = 0;$/;"	m	struct:btrblocks::ColumnMeta	access:public
btrblocks::ColumnMeta::offset	btrblocks/compression/Datablock.hpp	/^  u32 offset;$/;"	m	struct:btrblocks::ColumnMeta	access:public
btrblocks::ColumnMeta::padding	btrblocks/compression/Datablock.hpp	/^  u8 padding;$/;"	m	struct:btrblocks::ColumnMeta	access:public
btrblocks::ColumnPart	btrblocks/storage/Chunk.hpp	/^class ColumnPart {$/;"	c	namespace:btrblocks
btrblocks::ColumnPart::addCompressedChunk	btrblocks/storage/Chunk.cpp	/^void ColumnPart::addCompressedChunk(vector<u8>&& chunk) {$/;"	f	class:btrblocks::ColumnPart	signature:(vector<u8>&& chunk)
btrblocks::ColumnPart::addCompressedChunk	btrblocks/storage/Chunk.hpp	/^  void addCompressedChunk(vector<u8>&& chunk);$/;"	p	class:btrblocks::ColumnPart	access:public	signature:(vector<u8>&& chunk)
btrblocks::ColumnPart::canAdd	btrblocks/storage/Chunk.cpp	/^bool ColumnPart::canAdd(SIZE chunk_size) {$/;"	f	class:btrblocks::ColumnPart	signature:(SIZE chunk_size)
btrblocks::ColumnPart::canAdd	btrblocks/storage/Chunk.hpp	/^  [[nodiscard]] bool canAdd(SIZE chunk_size);$/;"	p	class:btrblocks::ColumnPart	access:public	signature:(SIZE chunk_size)
btrblocks::ColumnPart::chunks	btrblocks/storage/Chunk.hpp	/^  vector<vector<u8>> chunks;$/;"	m	class:btrblocks::ColumnPart	access:public
btrblocks::ColumnPart::reset	btrblocks/storage/Chunk.cpp	/^void ColumnPart::reset() {$/;"	f	class:btrblocks::ColumnPart	signature:()
btrblocks::ColumnPart::reset	btrblocks/storage/Chunk.hpp	/^  void reset();$/;"	p	class:btrblocks::ColumnPart	access:public	signature:()
btrblocks::ColumnPart::total_size	btrblocks/storage/Chunk.hpp	/^  SIZE total_size = 0;$/;"	m	class:btrblocks::ColumnPart	access:public
btrblocks::ColumnPart::writeToDisk	btrblocks/storage/Chunk.cpp	/^u32 ColumnPart::writeToDisk(const std::string& outputfile) {$/;"	f	class:btrblocks::ColumnPart	signature:(const std::string& outputfile)
btrblocks::ColumnPart::writeToDisk	btrblocks/storage/Chunk.hpp	/^  u32 writeToDisk(const std::string& outputfile);$/;"	p	class:btrblocks::ColumnPart	access:public	signature:(const std::string& outputfile)
btrblocks::ColumnPartInfo	btrblocks/compression/Datablock.hpp	/^struct ColumnPartInfo {$/;"	s	namespace:btrblocks
btrblocks::ColumnPartInfo::num_parts	btrblocks/compression/Datablock.hpp	/^  u32 num_parts;$/;"	m	struct:btrblocks::ColumnPartInfo	access:public
btrblocks::ColumnPartInfo::type	btrblocks/compression/Datablock.hpp	/^  ColumnType type;$/;"	m	struct:btrblocks::ColumnPartInfo	access:public
btrblocks::ColumnPartMetadata	btrblocks/storage/Chunk.hpp	/^struct ColumnPartMetadata {$/;"	s	namespace:btrblocks
btrblocks::ColumnPartMetadata::num_chunks	btrblocks/storage/Chunk.hpp	/^  u32 num_chunks;$/;"	m	struct:btrblocks::ColumnPartMetadata	access:public
btrblocks::ColumnPartMetadata::offsets	btrblocks/storage/Chunk.hpp	/^  u32 offsets[];$/;"	m	struct:btrblocks::ColumnPartMetadata	access:public
btrblocks::ConvertSchemeTypeToString	btrblocks/scheme/CompressionScheme.cpp	/^string ConvertSchemeTypeToString(DoubleSchemeType type) {$/;"	f	namespace:btrblocks	signature:(DoubleSchemeType type)
btrblocks::ConvertSchemeTypeToString	btrblocks/scheme/CompressionScheme.cpp	/^string ConvertSchemeTypeToString(IntegerSchemeType type) {$/;"	f	namespace:btrblocks	signature:(IntegerSchemeType type)
btrblocks::ConvertSchemeTypeToString	btrblocks/scheme/CompressionScheme.cpp	/^string ConvertSchemeTypeToString(StringSchemeType type) {$/;"	f	namespace:btrblocks	signature:(StringSchemeType type)
btrblocks::ConvertSchemeTypeToString	btrblocks/scheme/CompressionScheme.hpp	/^string ConvertSchemeTypeToString(DoubleSchemeType type);$/;"	p	namespace:btrblocks	signature:(DoubleSchemeType type)
btrblocks::ConvertSchemeTypeToString	btrblocks/scheme/CompressionScheme.hpp	/^string ConvertSchemeTypeToString(IntegerSchemeType type);$/;"	p	namespace:btrblocks	signature:(IntegerSchemeType type)
btrblocks::ConvertSchemeTypeToString	btrblocks/scheme/CompressionScheme.hpp	/^string ConvertSchemeTypeToString(StringSchemeType type);$/;"	p	namespace:btrblocks	signature:(StringSchemeType type)
btrblocks::Datablock	btrblocks/compression/Datablock.hpp	/^class Datablock : public RelationCompressor {$/;"	c	namespace:btrblocks	inherits:RelationCompressor
btrblocks::Datablock::Datablock	btrblocks/compression/Datablock.cpp	/^Datablock::Datablock(const Relation& relation) : RelationCompressor(relation) {}$/;"	f	class:btrblocks::Datablock	signature:(const Relation& relation)
btrblocks::Datablock::Datablock	btrblocks/compression/Datablock.hpp	/^  explicit Datablock(const Relation& relation);$/;"	p	class:btrblocks::Datablock	access:public	signature:(const Relation& relation)
btrblocks::Datablock::compress	btrblocks/compression/Datablock.cpp	/^OutputBlockStats Datablock::compress(const Chunk& input_chunk, BytesArray& output_block) {$/;"	f	class:btrblocks::Datablock	signature:(const Chunk& input_chunk, BytesArray& output_block)
btrblocks::Datablock::compress	btrblocks/compression/Datablock.cpp	/^SIZE Datablock::compress(const InputChunk& input_chunk, u8* output) {$/;"	f	class:btrblocks::Datablock	signature:(const InputChunk& input_chunk, u8* output)
btrblocks::Datablock::compress	btrblocks/compression/Datablock.cpp	/^std::vector<u8> Datablock::compress(const InputChunk& input_chunk) {$/;"	f	class:btrblocks::Datablock	signature:(const InputChunk& input_chunk)
btrblocks::Datablock::compress	btrblocks/compression/Datablock.hpp	/^  static SIZE compress(const InputChunk& input_chunk, u8* output_buffer);$/;"	p	class:btrblocks::Datablock	access:public	signature:(const InputChunk& input_chunk, u8* output_buffer)
btrblocks::Datablock::compress	btrblocks/compression/Datablock.hpp	/^  static vector<u8> compress(const InputChunk& input_chunk);$/;"	p	class:btrblocks::Datablock	access:public	signature:(const InputChunk& input_chunk)
btrblocks::Datablock::decompress	btrblocks/compression/Datablock.cpp	/^bool Datablock::decompress(const u8* data_in, BitmapWrapper** bitmap_out, u8* data_out) {$/;"	f	class:btrblocks::Datablock	signature:(const u8* data_in, BitmapWrapper** bitmap_out, u8* data_out)
btrblocks::Datablock::decompress	btrblocks/compression/Datablock.cpp	/^btrblocks::Chunk Datablock::decompress(const BytesArray& input_db) {$/;"	f	class:btrblocks::Datablock	signature:(const BytesArray& input_db)
btrblocks::Datablock::decompress	btrblocks/compression/Datablock.hpp	/^  static bool decompress(const u8* data_in, BitmapWrapper** bitmap_out, u8* data_out);$/;"	p	class:btrblocks::Datablock	access:public	signature:(const u8* data_in, BitmapWrapper** bitmap_out, u8* data_out)
btrblocks::Datablock::getCompressedColumn	btrblocks/compression/Datablock.cpp	/^void Datablock::getCompressedColumn(const BytesArray& input_db, u32 col_i, u8*& ptr, u32& size) {$/;"	f	class:btrblocks::Datablock	signature:(const BytesArray& input_db, u32 col_i, u8*& ptr, u32& size)
btrblocks::Datablock::getCompressedColumn	btrblocks/compression/Datablock.hpp	/^  virtual void getCompressedColumn(const BytesArray& input_db, u32 col_i, u8*& ptr, u32& size);$/;"	p	class:btrblocks::Datablock	access:public	signature:(const BytesArray& input_db, u32 col_i, u8*& ptr, u32& size)
btrblocks::Datablock::override	btrblocks/compression/Datablock.hpp	/^  Chunk decompress(const BytesArray& input_block) override;$/;"	m	class:btrblocks::Datablock	access:public
btrblocks::Datablock::override	btrblocks/compression/Datablock.hpp	/^  OutputBlockStats compress(const Chunk& input_chunk, BytesArray& output_block) override;$/;"	m	class:btrblocks::Datablock	access:public
btrblocks::Datablock::writeMetadata	btrblocks/compression/Datablock.cpp	/^u32 Datablock::writeMetadata(const std::string& path,$/;"	f	class:btrblocks::Datablock	signature:(const std::string& path, std::vector<ColumnType> types, vector<u32> part_counters, u32 num_chunks)
btrblocks::Datablock::writeMetadata	btrblocks/compression/Datablock.hpp	/^  static u32 writeMetadata(const std::string& path,$/;"	p	class:btrblocks::Datablock	access:public	signature:(const std::string& path, std::vector<ColumnType> types, vector<u32> part_counters, u32 num_chunks)
btrblocks::DatablockMeta	btrblocks/compression/Datablock.hpp	/^struct DatablockMeta {$/;"	s	namespace:btrblocks
btrblocks::DatablockMeta::attributes_meta	btrblocks/compression/Datablock.hpp	/^  ColumnMeta attributes_meta[];$/;"	m	struct:btrblocks::DatablockMeta	access:public
btrblocks::DatablockMeta::column_count	btrblocks/compression/Datablock.hpp	/^  u32 column_count;$/;"	m	struct:btrblocks::DatablockMeta	access:public
btrblocks::DatablockMeta::count	btrblocks/compression/Datablock.hpp	/^  u32 count;$/;"	m	struct:btrblocks::DatablockMeta	access:public
btrblocks::DatablockMeta::padding	btrblocks/compression/Datablock.hpp	/^  u32 padding;$/;"	m	struct:btrblocks::DatablockMeta	access:public
btrblocks::DatablockMeta::size	btrblocks/compression/Datablock.hpp	/^  u32 size;$/;"	m	struct:btrblocks::DatablockMeta	access:public
btrblocks::DoubleScheme	btrblocks/scheme/CompressionScheme.hpp	/^class DoubleScheme {$/;"	c	namespace:btrblocks
btrblocks::DoubleScheme::compress	btrblocks/scheme/CompressionScheme.hpp	/^  virtual u32 compress(const DOUBLE* src,$/;"	p	class:btrblocks::DoubleScheme	access:public	signature:(const DOUBLE* src, const BITMAP* nullmap, u8* dest, DoubleStats& stats, u8 allowed_cascading_level)
btrblocks::DoubleScheme::decompress	btrblocks/scheme/CompressionScheme.hpp	/^  virtual void decompress(DOUBLE* dest,$/;"	p	class:btrblocks::DoubleScheme	access:public	signature:(DOUBLE* dest, BitmapWrapper* bitmap, const u8* src, u32 tuple_count, u32 level)
btrblocks::DoubleScheme::expectedCompressionRatio	btrblocks/scheme/CompressionScheme.cpp	/^double DoubleScheme::expectedCompressionRatio(DoubleStats& stats, u8 allowed_cascading_level) {$/;"	f	class:btrblocks::DoubleScheme	signature:(DoubleStats& stats, u8 allowed_cascading_level)
btrblocks::DoubleScheme::expectedCompressionRatio	btrblocks/scheme/CompressionScheme.hpp	/^  virtual double expectedCompressionRatio(DoubleStats& stats, [[maybe_unused]] u8 allowed_cascading_level);$/;"	p	class:btrblocks::DoubleScheme	access:public	signature:(DoubleStats& stats, [[maybe_unused]] u8 allowed_cascading_level)
btrblocks::DoubleScheme::fullDescription	btrblocks/scheme/CompressionScheme.hpp	/^  virtual string fullDescription(const u8*) {$/;"	f	class:btrblocks::DoubleScheme	access:public	signature:(const u8*)
btrblocks::DoubleScheme::isUsable	btrblocks/scheme/CompressionScheme.hpp	/^  virtual bool isUsable(DoubleStats&) { return true; }$/;"	f	class:btrblocks::DoubleScheme	access:public	signature:(DoubleStats&)
btrblocks::DoubleScheme::schemeType	btrblocks/scheme/CompressionScheme.hpp	/^  virtual DoubleSchemeType schemeType() = 0;$/;"	p	class:btrblocks::DoubleScheme	access:public	signature:()
btrblocks::DoubleScheme::selfDescription	btrblocks/scheme/CompressionScheme.hpp	/^  inline string selfDescription() { return ConvertSchemeTypeToString(this->schemeType()); }$/;"	f	class:btrblocks::DoubleScheme	access:public	signature:()
btrblocks::DynamicDictionaryStructure	btrblocks/scheme/templated/DynamicDictionary.hpp	/^struct __attribute__((packed)) DynamicDictionaryStructure {$/;"	s	namespace:btrblocks
btrblocks::DynamicDictionaryStructure::codes_offset	btrblocks/scheme/templated/DynamicDictionary.hpp	/^  u32 codes_offset;$/;"	m	struct:btrblocks::DynamicDictionaryStructure	access:public
btrblocks::DynamicDictionaryStructure::codes_scheme_code	btrblocks/scheme/templated/DynamicDictionary.hpp	/^  u8 codes_scheme_code;$/;"	m	struct:btrblocks::DynamicDictionaryStructure	access:public
btrblocks::DynamicDictionaryStructure::data	btrblocks/scheme/templated/DynamicDictionary.hpp	/^  u8 data[];$/;"	m	struct:btrblocks::DynamicDictionaryStructure	access:public
btrblocks::FDictCompressColumn	btrblocks/scheme/templated/FixedDictionary.hpp	/^inline u32 FDictCompressColumn(const NumberType* src, const BITMAP*, u8* dest, StatsType& stats) {$/;"	f	namespace:btrblocks	signature:(const NumberType* src, const BITMAP*, u8* dest, StatsType& stats)
btrblocks::FDictDecompressColumn	btrblocks/scheme/templated/FixedDictionary.hpp	/^inline void FDictDecompressColumn(NumberType* dest,$/;"	f	namespace:btrblocks	signature:(NumberType* dest, BitmapWrapper*, const u8* src, u32 tuple_count, u32 level)
btrblocks::FDictExpectedCompressionRatio	btrblocks/scheme/templated/FixedDictionary.hpp	/^inline double FDictExpectedCompressionRatio(StatsType& stats) {$/;"	f	namespace:btrblocks	signature:(StatsType& stats)
btrblocks::FileMetadata	btrblocks/compression/Datablock.hpp	/^struct FileMetadata {$/;"	s	namespace:btrblocks
btrblocks::FileMetadata::num_chunks	btrblocks/compression/Datablock.hpp	/^  u32 num_chunks;$/;"	m	struct:btrblocks::FileMetadata	access:public
btrblocks::FileMetadata::num_columns	btrblocks/compression/Datablock.hpp	/^  u32 num_columns;$/;"	m	struct:btrblocks::FileMetadata	access:public
btrblocks::FileMetadata::parts	btrblocks/compression/Datablock.hpp	/^  struct ColumnPartInfo parts[];$/;"	m	struct:btrblocks::FileMetadata	typeref:struct:btrblocks::FileMetadata::ColumnPartInfo	access:public
btrblocks::FixedDictionaryStructure	btrblocks/scheme/templated/FixedDictionary.hpp	/^struct FixedDictionaryStructure {$/;"	s	namespace:btrblocks
btrblocks::FixedDictionaryStructure::codes_offset	btrblocks/scheme/templated/FixedDictionary.hpp	/^  u32 codes_offset;$/;"	m	struct:btrblocks::FixedDictionaryStructure	access:public
btrblocks::FixedDictionaryStructure::dict_slots	btrblocks/scheme/templated/FixedDictionary.hpp	/^  NumberType dict_slots[];$/;"	m	struct:btrblocks::FixedDictionaryStructure	access:public
btrblocks::FrequencyStructure	btrblocks/scheme/templated/Frequency.hpp	/^struct FrequencyStructure {$/;"	s	namespace:btrblocks
btrblocks::FrequencyStructure::data	btrblocks/scheme/templated/Frequency.hpp	/^  u8 data[];$/;"	m	struct:btrblocks::FrequencyStructure	access:public
btrblocks::FrequencyStructure::exceptions_offset	btrblocks/scheme/templated/Frequency.hpp	/^  u32 exceptions_offset;$/;"	m	struct:btrblocks::FrequencyStructure	access:public
btrblocks::FrequencyStructure::next_scheme	btrblocks/scheme/templated/Frequency.hpp	/^  u8 next_scheme;$/;"	m	struct:btrblocks::FrequencyStructure	access:public
btrblocks::FrequencyStructure::top_value	btrblocks/scheme/templated/Frequency.hpp	/^  NumberType top_value;$/;"	m	struct:btrblocks::FrequencyStructure	access:public
btrblocks::InputChunk	btrblocks/storage/Chunk.hpp	/^class InputChunk {$/;"	c	namespace:btrblocks
btrblocks::InputChunk::InputChunk	btrblocks/storage/Chunk.cpp	/^InputChunk::InputChunk(unique_ptr<u8[]>&& data,$/;"	f	class:btrblocks::InputChunk	signature:(unique_ptr<u8[]>&& data, unique_ptr<BITMAP[]>&& bitmap, ColumnType type, u64 tuple_count, SIZE size)
btrblocks::InputChunk::InputChunk	btrblocks/storage/Chunk.hpp	/^  InputChunk(unique_ptr<u8[]>&& data,$/;"	p	class:btrblocks::InputChunk	access:public	signature:(unique_ptr<u8[]>&& data, unique_ptr<BITMAP[]>&& bitmap, ColumnType type, u64 tuple_count, SIZE size)
btrblocks::InputChunk::compareContents	btrblocks/storage/Chunk.cpp	/^bool InputChunk::compareContents(u8* their_data,$/;"	f	class:btrblocks::InputChunk	signature:(u8* their_data, const std::vector<BITMAP>& their_bitmap, u64 their_tuple_count, bool requires_copy) const
btrblocks::InputChunk::compareContents	btrblocks/storage/Chunk.hpp	/^  bool compareContents(u8* their_data,$/;"	p	class:btrblocks::InputChunk	access:public	signature:(u8* their_data, const std::vector<BITMAP>& their_bitmap, u64 their_tuple_count, bool requires_copy) const
btrblocks::InputChunk::data	btrblocks/storage/Chunk.hpp	/^  unique_ptr<u8[]> data;$/;"	m	class:btrblocks::InputChunk	access:public
btrblocks::InputChunk::nullmap	btrblocks/storage/Chunk.hpp	/^  unique_ptr<BITMAP[]> nullmap;$/;"	m	class:btrblocks::InputChunk	access:public
btrblocks::InputChunk::size	btrblocks/storage/Chunk.hpp	/^  SIZE size;$/;"	m	class:btrblocks::InputChunk	access:public
btrblocks::InputChunk::tuple_count	btrblocks/storage/Chunk.hpp	/^  const u64 tuple_count;$/;"	m	class:btrblocks::InputChunk	access:public
btrblocks::InputChunk::type	btrblocks/storage/Chunk.hpp	/^  ColumnType type;$/;"	m	class:btrblocks::InputChunk	access:public
btrblocks::IntegerScheme	btrblocks/scheme/CompressionScheme.hpp	/^class IntegerScheme {$/;"	c	namespace:btrblocks
btrblocks::IntegerScheme::compress	btrblocks/scheme/CompressionScheme.hpp	/^  virtual u32 compress(const INTEGER* src,$/;"	p	class:btrblocks::IntegerScheme	access:public	signature:(const INTEGER* src, const BITMAP* nullmap, u8* dest, SInteger32Stats& stats, u8 allowed_cascading_level)
btrblocks::IntegerScheme::decompress	btrblocks/scheme/CompressionScheme.hpp	/^  virtual void decompress(INTEGER* dest,$/;"	p	class:btrblocks::IntegerScheme	access:public	signature:(INTEGER* dest, BitmapWrapper* nullmap, const u8* src, u32 tuple_count, u32 level)
btrblocks::IntegerScheme::expectedCompressionRatio	btrblocks/scheme/CompressionScheme.cpp	/^double IntegerScheme::expectedCompressionRatio(SInteger32Stats& stats, u8 allowed_cascading_level) {$/;"	f	class:btrblocks::IntegerScheme	signature:(SInteger32Stats& stats, u8 allowed_cascading_level)
btrblocks::IntegerScheme::expectedCompressionRatio	btrblocks/scheme/CompressionScheme.hpp	/^  virtual double expectedCompressionRatio(SInteger32Stats& stats, [[maybe_unused]] u8 allowed_cascading_level);$/;"	p	class:btrblocks::IntegerScheme	access:public	signature:(SInteger32Stats& stats, [[maybe_unused]] u8 allowed_cascading_level)
btrblocks::IntegerScheme::fullDescription	btrblocks/scheme/CompressionScheme.hpp	/^  virtual string fullDescription(const u8*) {$/;"	f	class:btrblocks::IntegerScheme	access:public	signature:(const u8*)
btrblocks::IntegerScheme::isUsable	btrblocks/scheme/CompressionScheme.hpp	/^  virtual bool isUsable(SInteger32Stats&) { return true; }$/;"	f	class:btrblocks::IntegerScheme	access:public	signature:(SInteger32Stats&)
btrblocks::IntegerScheme::lookup	btrblocks/scheme/CompressionScheme.hpp	/^  virtual INTEGER lookup(u32 id) = 0;$/;"	p	class:btrblocks::IntegerScheme	access:public	signature:(u32 id)
btrblocks::IntegerScheme::scan	btrblocks/scheme/CompressionScheme.hpp	/^  virtual void scan(Predicate, BITMAP* result, const u8* src, u32 tuple_count) = 0;$/;"	p	class:btrblocks::IntegerScheme	access:public	signature:(Predicate, BITMAP* result, const u8* src, u32 tuple_count)
btrblocks::IntegerScheme::schemeType	btrblocks/scheme/CompressionScheme.hpp	/^  virtual IntegerSchemeType schemeType() = 0;$/;"	p	class:btrblocks::IntegerScheme	access:public	signature:()
btrblocks::IntegerScheme::selfDescription	btrblocks/scheme/CompressionScheme.hpp	/^  inline string selfDescription() { return ConvertSchemeTypeToString(this->schemeType()); }$/;"	f	class:btrblocks::IntegerScheme	access:public	signature:()
btrblocks::IntegerSchemeType	btrblocks/scheme/SchemeType.hpp	/^enum class IntegerSchemeType : uint8_t {$/;"	c	namespace:btrblocks	inherits:uint8_t
btrblocks::IntegerSchemeType::BP	btrblocks/scheme/SchemeType.hpp	/^  BP = 5,$/;"	m	class:btrblocks::IntegerSchemeType	access:private
btrblocks::IntegerSchemeType::DICT	btrblocks/scheme/SchemeType.hpp	/^  DICT = 2,$/;"	m	class:btrblocks::IntegerSchemeType	access:private
btrblocks::IntegerSchemeType::DICTIONARY_16	btrblocks/scheme/SchemeType.hpp	/^  DICTIONARY_16 = 31,$/;"	m	class:btrblocks::IntegerSchemeType	access:private
btrblocks::IntegerSchemeType::DICTIONARY_8	btrblocks/scheme/SchemeType.hpp	/^  DICTIONARY_8 = 30,$/;"	m	class:btrblocks::IntegerSchemeType	access:private
btrblocks::IntegerSchemeType::DoubleSchemeType	btrblocks/scheme/SchemeType.hpp	/^enum class DoubleSchemeType : uint8_t {$/;"	c	class:btrblocks::IntegerSchemeType	inherits:uint8_t	access:private
btrblocks::IntegerSchemeType::DoubleSchemeType::DICT	btrblocks/scheme/SchemeType.hpp	/^  DICT = 2,$/;"	m	class:btrblocks::IntegerSchemeType::DoubleSchemeType	access:private
btrblocks::IntegerSchemeType::DoubleSchemeType::DICTIONARY_16	btrblocks/scheme/SchemeType.hpp	/^  DICTIONARY_16 = 31,$/;"	m	class:btrblocks::IntegerSchemeType::DoubleSchemeType	access:private
btrblocks::IntegerSchemeType::DoubleSchemeType::DICTIONARY_8	btrblocks/scheme/SchemeType.hpp	/^  DICTIONARY_8 = 29,$/;"	m	class:btrblocks::IntegerSchemeType::DoubleSchemeType	access:private
btrblocks::IntegerSchemeType::DoubleSchemeType::DOUBLE_BP	btrblocks/scheme/SchemeType.hpp	/^  DOUBLE_BP = 28,$/;"	m	class:btrblocks::IntegerSchemeType::DoubleSchemeType	access:private
btrblocks::IntegerSchemeType::DoubleSchemeType::FREQUENCY	btrblocks/scheme/SchemeType.hpp	/^  FREQUENCY = 4,$/;"	m	class:btrblocks::IntegerSchemeType::DoubleSchemeType	access:private
btrblocks::IntegerSchemeType::DoubleSchemeType::ONE_VALUE	btrblocks/scheme/SchemeType.hpp	/^  ONE_VALUE = 1,$/;"	m	class:btrblocks::IntegerSchemeType::DoubleSchemeType	access:private
btrblocks::IntegerSchemeType::DoubleSchemeType::PSEUDODECIMAL	btrblocks/scheme/SchemeType.hpp	/^  PSEUDODECIMAL = 5,$/;"	m	class:btrblocks::IntegerSchemeType::DoubleSchemeType	access:private
btrblocks::IntegerSchemeType::DoubleSchemeType::RLE	btrblocks/scheme/SchemeType.hpp	/^  RLE = 3,$/;"	m	class:btrblocks::IntegerSchemeType::DoubleSchemeType	access:private
btrblocks::IntegerSchemeType::DoubleSchemeType::SCHEME_MAX	btrblocks/scheme/SchemeType.hpp	/^  SCHEME_MAX = 32$/;"	m	class:btrblocks::IntegerSchemeType::DoubleSchemeType	access:private
btrblocks::IntegerSchemeType::DoubleSchemeType::StringSchemeType	btrblocks/scheme/SchemeType.hpp	/^enum class StringSchemeType : uint8_t {$/;"	c	class:btrblocks::IntegerSchemeType::DoubleSchemeType	inherits:uint8_t	access:private
btrblocks::IntegerSchemeType::DoubleSchemeType::StringSchemeType::DICT	btrblocks/scheme/SchemeType.hpp	/^  DICT = 2,$/;"	m	class:btrblocks::IntegerSchemeType::DoubleSchemeType::StringSchemeType	access:private
btrblocks::IntegerSchemeType::DoubleSchemeType::StringSchemeType::DICTIONARY_16	btrblocks/scheme/SchemeType.hpp	/^  DICTIONARY_16 = 31,$/;"	m	class:btrblocks::IntegerSchemeType::DoubleSchemeType::StringSchemeType	access:private
btrblocks::IntegerSchemeType::DoubleSchemeType::StringSchemeType::DICTIONARY_8	btrblocks/scheme/SchemeType.hpp	/^  DICTIONARY_8 = 30,$/;"	m	class:btrblocks::IntegerSchemeType::DoubleSchemeType::StringSchemeType	access:private
btrblocks::IntegerSchemeType::DoubleSchemeType::StringSchemeType::FSST	btrblocks/scheme/SchemeType.hpp	/^  FSST = 3,$/;"	m	class:btrblocks::IntegerSchemeType::DoubleSchemeType::StringSchemeType	access:private
btrblocks::IntegerSchemeType::DoubleSchemeType::StringSchemeType::ONE_VALUE	btrblocks/scheme/SchemeType.hpp	/^  ONE_VALUE = 1,$/;"	m	class:btrblocks::IntegerSchemeType::DoubleSchemeType::StringSchemeType	access:private
btrblocks::IntegerSchemeType::DoubleSchemeType::StringSchemeType::SCHEME_MAX	btrblocks/scheme/SchemeType.hpp	/^  SCHEME_MAX = 32$/;"	m	class:btrblocks::IntegerSchemeType::DoubleSchemeType::StringSchemeType	access:private
btrblocks::IntegerSchemeType::DoubleSchemeType::StringSchemeType::UNCOMPRESSED	btrblocks/scheme/SchemeType.hpp	/^  UNCOMPRESSED = 0,$/;"	m	class:btrblocks::IntegerSchemeType::DoubleSchemeType::StringSchemeType	access:private
btrblocks::IntegerSchemeType::DoubleSchemeType::StringSchemeType::autoScheme	btrblocks/scheme/SchemeType.hpp	/^constexpr auto autoScheme() {$/;"	f	class:btrblocks::IntegerSchemeType::DoubleSchemeType::StringSchemeType	access:private	signature:()
btrblocks::IntegerSchemeType::DoubleSchemeType::StringSchemeType::defaultStringSchemes	btrblocks/scheme/SchemeType.hpp	/^constexpr StringSchemeSet defaultStringSchemes() {$/;"	f	class:btrblocks::IntegerSchemeType::DoubleSchemeType::StringSchemeType	access:private	signature:()
btrblocks::IntegerSchemeType::DoubleSchemeType::UNCOMPRESSED	btrblocks/scheme/SchemeType.hpp	/^  UNCOMPRESSED = 0,$/;"	m	class:btrblocks::IntegerSchemeType::DoubleSchemeType	access:private
btrblocks::IntegerSchemeType::DoubleSchemeType::defaultDoubleSchemes	btrblocks/scheme/SchemeType.hpp	/^constexpr DoubleSchemeSet defaultDoubleSchemes() {$/;"	f	class:btrblocks::IntegerSchemeType::DoubleSchemeType	access:private	signature:()
btrblocks::IntegerSchemeType::FOR	btrblocks/scheme/SchemeType.hpp	/^  FOR = 26,$/;"	m	class:btrblocks::IntegerSchemeType	access:private
btrblocks::IntegerSchemeType::FREQUENCY	btrblocks/scheme/SchemeType.hpp	/^  FREQUENCY = 25,$/;"	m	class:btrblocks::IntegerSchemeType	access:private
btrblocks::IntegerSchemeType::ONE_VALUE	btrblocks/scheme/SchemeType.hpp	/^  ONE_VALUE = 1,$/;"	m	class:btrblocks::IntegerSchemeType	access:private
btrblocks::IntegerSchemeType::PFOR	btrblocks/scheme/SchemeType.hpp	/^  PFOR = 4,$/;"	m	class:btrblocks::IntegerSchemeType	access:private
btrblocks::IntegerSchemeType::PFOR_DELTA	btrblocks/scheme/SchemeType.hpp	/^  PFOR_DELTA = 27,$/;"	m	class:btrblocks::IntegerSchemeType	access:private
btrblocks::IntegerSchemeType::RLE	btrblocks/scheme/SchemeType.hpp	/^  RLE = 3,$/;"	m	class:btrblocks::IntegerSchemeType	access:private
btrblocks::IntegerSchemeType::SCHEME_MAX	btrblocks/scheme/SchemeType.hpp	/^  SCHEME_MAX = 32$/;"	m	class:btrblocks::IntegerSchemeType	access:private
btrblocks::IntegerSchemeType::TRUNCATION_16	btrblocks/scheme/SchemeType.hpp	/^  TRUNCATION_16 = 29,$/;"	m	class:btrblocks::IntegerSchemeType	access:private
btrblocks::IntegerSchemeType::TRUNCATION_8	btrblocks/scheme/SchemeType.hpp	/^  TRUNCATION_8 = 28,$/;"	m	class:btrblocks::IntegerSchemeType	access:private
btrblocks::IntegerSchemeType::UNCOMPRESSED	btrblocks/scheme/SchemeType.hpp	/^  UNCOMPRESSED = 0,$/;"	m	class:btrblocks::IntegerSchemeType	access:private
btrblocks::IntegerSchemeType::defaultIntegerSchemes	btrblocks/scheme/SchemeType.hpp	/^constexpr IntegerSchemeSet defaultIntegerSchemes() {$/;"	f	class:btrblocks::IntegerSchemeType	access:private	signature:()
btrblocks::NumberStats	btrblocks/stats/NumberStats.hpp	/^struct NumberStats {$/;"	s	namespace:btrblocks
btrblocks::NumberStats::NumberStats	btrblocks/stats/NumberStats.hpp	/^  NumberStats() = delete;$/;"	p	struct:btrblocks::NumberStats	access:public	signature:()
btrblocks::NumberStats::NumberStats	btrblocks/stats/NumberStats.hpp	/^  NumberStats(const T* src, const BITMAP* bitmap, u32 tuple_count)$/;"	f	struct:btrblocks::NumberStats	access:public	signature:(const T* src, const BITMAP* bitmap, u32 tuple_count)
btrblocks::NumberStats::average_run_length	btrblocks/stats/NumberStats.hpp	/^  u32 average_run_length;$/;"	m	struct:btrblocks::NumberStats	access:public
btrblocks::NumberStats::bitmap	btrblocks/stats/NumberStats.hpp	/^  const BITMAP* bitmap;$/;"	m	struct:btrblocks::NumberStats	access:public
btrblocks::NumberStats::distinct_values	btrblocks/stats/NumberStats.hpp	/^  std::map<T, u32> distinct_values;$/;"	m	struct:btrblocks::NumberStats	access:public
btrblocks::NumberStats::generateStats	btrblocks/stats/NumberStats.hpp	/^  static NumberStats generateStats(const T* src, const BITMAP* nullmap, u32 tuple_count) {$/;"	f	struct:btrblocks::NumberStats	access:public	signature:(const T* src, const BITMAP* nullmap, u32 tuple_count)
btrblocks::NumberStats::is_sorted	btrblocks/stats/NumberStats.hpp	/^  bool is_sorted;$/;"	m	struct:btrblocks::NumberStats	access:public
btrblocks::NumberStats::max	btrblocks/stats/NumberStats.hpp	/^  T max;$/;"	m	struct:btrblocks::NumberStats	access:public
btrblocks::NumberStats::min	btrblocks/stats/NumberStats.hpp	/^  T min;$/;"	m	struct:btrblocks::NumberStats	access:public
btrblocks::NumberStats::null_count	btrblocks/stats/NumberStats.hpp	/^  u32 null_count;$/;"	m	struct:btrblocks::NumberStats	access:public
btrblocks::NumberStats::samples	btrblocks/stats/NumberStats.hpp	/^  tuple<vector<T>, vector<BITMAP>> samples(u32 n, u32 length) {$/;"	f	struct:btrblocks::NumberStats	access:public	signature:(u32 n, u32 length)
btrblocks::NumberStats::set_count	btrblocks/stats/NumberStats.hpp	/^  u32 set_count;$/;"	m	struct:btrblocks::NumberStats	access:public
btrblocks::NumberStats::src	btrblocks/stats/NumberStats.hpp	/^  const T* src;$/;"	m	struct:btrblocks::NumberStats	access:public
btrblocks::NumberStats::total_size	btrblocks/stats/NumberStats.hpp	/^  u32 total_size;$/;"	m	struct:btrblocks::NumberStats	access:public
btrblocks::NumberStats::tuple_count	btrblocks/stats/NumberStats.hpp	/^  u32 tuple_count;$/;"	m	struct:btrblocks::NumberStats	access:public
btrblocks::NumberStats::unique_count	btrblocks/stats/NumberStats.hpp	/^  u32 unique_count;$/;"	m	struct:btrblocks::NumberStats	access:public
btrblocks::OutputBlockStats	btrblocks/compression/Compressor.hpp	/^struct OutputBlockStats {$/;"	s	namespace:btrblocks
btrblocks::OutputBlockStats::compression_ratio	btrblocks/compression/Compressor.hpp	/^  double compression_ratio;  \/\/ before \/old data size$/;"	m	struct:btrblocks::OutputBlockStats	access:public
btrblocks::OutputBlockStats::data_sizes	btrblocks/compression/Compressor.hpp	/^  vector<SIZE> data_sizes;$/;"	m	struct:btrblocks::OutputBlockStats	access:public
btrblocks::OutputBlockStats::nullmap_sizes	btrblocks/compression/Compressor.hpp	/^  vector<SIZE> nullmap_sizes;$/;"	m	struct:btrblocks::OutputBlockStats	access:public
btrblocks::OutputBlockStats::total_data_size	btrblocks/compression/Compressor.hpp	/^  SIZE total_data_size;$/;"	m	struct:btrblocks::OutputBlockStats	access:public
btrblocks::OutputBlockStats::total_db_size	btrblocks/compression/Compressor.hpp	/^  SIZE total_db_size;$/;"	m	struct:btrblocks::OutputBlockStats	access:public
btrblocks::OutputBlockStats::total_nullmap_size	btrblocks/compression/Compressor.hpp	/^  SIZE total_nullmap_size;$/;"	m	struct:btrblocks::OutputBlockStats	access:public
btrblocks::OutputBlockStats::used_compression_schemes	btrblocks/compression/Compressor.hpp	/^  vector<u8> used_compression_schemes;$/;"	m	struct:btrblocks::OutputBlockStats	access:public
btrblocks::Predicate	btrblocks/scheme/CompressionScheme.hpp	/^struct Predicate {};$/;"	s	namespace:btrblocks
btrblocks::RLEStructure	btrblocks/scheme/templated/RLE.hpp	/^struct RLEStructure {$/;"	s	namespace:btrblocks
btrblocks::RLEStructure::counts_scheme_code	btrblocks/scheme/templated/RLE.hpp	/^  u8 counts_scheme_code;$/;"	m	struct:btrblocks::RLEStructure	access:public
btrblocks::RLEStructure::data	btrblocks/scheme/templated/RLE.hpp	/^  u8 data[];$/;"	m	struct:btrblocks::RLEStructure	access:public
btrblocks::RLEStructure::runs_count	btrblocks/scheme/templated/RLE.hpp	/^  u32 runs_count;$/;"	m	struct:btrblocks::RLEStructure	access:public
btrblocks::RLEStructure::runs_count_offset	btrblocks/scheme/templated/RLE.hpp	/^  u32 runs_count_offset;$/;"	m	struct:btrblocks::RLEStructure	access:public
btrblocks::RLEStructure::values_scheme_code	btrblocks/scheme/templated/RLE.hpp	/^  u8 values_scheme_code;$/;"	m	struct:btrblocks::RLEStructure	access:public
btrblocks::Relation	btrblocks/storage/Relation.hpp	/^class Relation {$/;"	c	namespace:btrblocks
btrblocks::Relation::Relation	btrblocks/storage/Relation.cpp	/^Relation::Relation() {$/;"	f	class:btrblocks::Relation	signature:()
btrblocks::Relation::Relation	btrblocks/storage/Relation.hpp	/^  Relation();$/;"	p	class:btrblocks::Relation	access:public	signature:()
btrblocks::Relation::addColumn	btrblocks/storage/Relation.cpp	/^void Relation::addColumn(Column&& column) {$/;"	f	class:btrblocks::Relation	signature:(Column&& column)
btrblocks::Relation::addColumn	btrblocks/storage/Relation.cpp	/^void Relation::addColumn(const string& column_file_path) {$/;"	f	class:btrblocks::Relation	signature:(const string& column_file_path)
btrblocks::Relation::addColumn	btrblocks/storage/Relation.hpp	/^  void addColumn(Column&& column);$/;"	p	class:btrblocks::Relation	access:public	signature:(Column&& column)
btrblocks::Relation::addColumn	btrblocks/storage/Relation.hpp	/^  void addColumn(const string& column_file_path);$/;"	p	class:btrblocks::Relation	access:public	signature:(const string& column_file_path)
btrblocks::Relation::columns	btrblocks/storage/Relation.hpp	/^  vector<Column> columns;$/;"	m	class:btrblocks::Relation	access:public
btrblocks::Relation::fixTupleCount	btrblocks/storage/Relation.cpp	/^void Relation::fixTupleCount() {$/;"	f	class:btrblocks::Relation	signature:()
btrblocks::Relation::fixTupleCount	btrblocks/storage/Relation.hpp	/^  void fixTupleCount();$/;"	p	class:btrblocks::Relation	access:private	signature:()
btrblocks::Relation::getChunk	btrblocks/storage/Relation.cpp	/^Chunk Relation::getChunk(const vector<btrblocks::Range>& ranges, SIZE chunk_i) const {$/;"	f	class:btrblocks::Relation	signature:(const vector<btrblocks::Range>& ranges, SIZE chunk_i) const
btrblocks::Relation::getChunk	btrblocks/storage/Relation.hpp	/^  [[nodiscard]] Chunk getChunk(const vector<Range>& ranges, SIZE chunk_i) const;$/;"	p	class:btrblocks::Relation	access:public	signature:(const vector<Range>& ranges, SIZE chunk_i) const
btrblocks::Relation::getInputChunk	btrblocks/storage/Relation.cpp	/^InputChunk Relation::getInputChunk(const Range& range,$/;"	f	class:btrblocks::Relation	signature:(const Range& range, [[maybe_unused]] SIZE chunk_i, u32 column) const
btrblocks::Relation::getInputChunk	btrblocks/storage/Relation.hpp	/^  [[nodiscard]] InputChunk getInputChunk(const Range& range,$/;"	p	class:btrblocks::Relation	access:public	signature:(const Range& range, [[maybe_unused]] SIZE chunk_i, u32 column) const
btrblocks::Relation::getRanges	btrblocks/storage/Relation.cpp	/^vector<tuple<u64, u64>> Relation::getRanges(btrblocks::SplitStrategy strategy,$/;"	f	class:btrblocks::Relation	signature:(btrblocks::SplitStrategy strategy, u32 max_chunk_count) const
btrblocks::Relation::getRanges	btrblocks/storage/Relation.hpp	/^  [[nodiscard]] vector<Range> getRanges(btrblocks::SplitStrategy strategy,$/;"	p	class:btrblocks::Relation	access:public	signature:(btrblocks::SplitStrategy strategy, u32 max_chunk_count) const
btrblocks::Relation::name	btrblocks/storage/Relation.hpp	/^  string name;$/;"	m	class:btrblocks::Relation	access:public
btrblocks::Relation::tuple_count	btrblocks/storage/Relation.hpp	/^  u64 tuple_count;$/;"	m	class:btrblocks::Relation	access:public
btrblocks::RelationCompressor	btrblocks/compression/Compressor.hpp	/^class RelationCompressor {$/;"	c	namespace:btrblocks
btrblocks::RelationCompressor::RelationCompressor	btrblocks/compression/Compressor.hpp	/^  explicit RelationCompressor(const Relation& relation) : relation(relation) {}$/;"	f	class:btrblocks::RelationCompressor	access:public	signature:(const Relation& relation)
btrblocks::RelationCompressor::compress	btrblocks/compression/Compressor.hpp	/^  virtual OutputBlockStats compress(const Chunk& input_chunk, BytesArray& output_block) = 0;$/;"	p	class:btrblocks::RelationCompressor	access:public	signature:(const Chunk& input_chunk, BytesArray& output_block)
btrblocks::RelationCompressor::decompress	btrblocks/compression/Compressor.hpp	/^  virtual Chunk decompress(const BytesArray& input_block) = 0;$/;"	p	class:btrblocks::RelationCompressor	access:public	signature:(const BytesArray& input_block)
btrblocks::RelationCompressor::relation	btrblocks/compression/Compressor.hpp	/^  const Relation& relation;$/;"	m	class:btrblocks::RelationCompressor	access:protected
btrblocks::SchemeConfig	btrblocks/scheme/SchemeConfig.hpp	/^struct SchemeConfig {$/;"	s	namespace:btrblocks
btrblocks::SchemeConfig::FSST_THRESHOLD	btrblocks/scheme/SchemeConfig.hpp	/^  static constexpr size_t FSST_THRESHOLD = 16ul * 1024;$/;"	m	struct:btrblocks::SchemeConfig	access:public
btrblocks::SchemeConfig::doubles	btrblocks/scheme/SchemeConfig.hpp	/^  } doubles;$/;"	m	struct:btrblocks::SchemeConfig	typeref:struct:btrblocks::SchemeConfig::__anon3	access:public
btrblocks::SchemeConfig::get	btrblocks/scheme/SchemeConfig.hpp	/^  static SchemeConfig& get() {$/;"	f	struct:btrblocks::SchemeConfig	access:public	signature:()
btrblocks::SchemeConfig::integers	btrblocks/scheme/SchemeConfig.hpp	/^  } integers;$/;"	m	struct:btrblocks::SchemeConfig	typeref:struct:btrblocks::SchemeConfig::__anon2	access:public
btrblocks::SchemeConfig::strings	btrblocks/scheme/SchemeConfig.hpp	/^  } strings;$/;"	m	struct:btrblocks::SchemeConfig	typeref:struct:btrblocks::SchemeConfig::__anon4	access:public
btrblocks::SchemePool	btrblocks/scheme/SchemePool.hpp	/^class SchemePool {$/;"	c	namespace:btrblocks
btrblocks::SchemePool::available_schemes	btrblocks/scheme/SchemePool.hpp	/^  static unique_ptr<SchemesCollection> available_schemes;$/;"	m	class:btrblocks::SchemePool	access:public
btrblocks::SchemePool::refresh	btrblocks/scheme/SchemePool.cpp	/^void SchemePool::refresh() {$/;"	f	class:btrblocks::SchemePool	signature:()
btrblocks::SchemePool::refresh	btrblocks/scheme/SchemePool.hpp	/^  static void refresh();$/;"	p	class:btrblocks::SchemePool	access:public	signature:()
btrblocks::SchemeSelection	btrblocks/btrblocks.hpp	/^enum class SchemeSelection : uint8_t { SAMPLE, TRY_ALL };$/;"	c	namespace:btrblocks	inherits:uint8_t
btrblocks::SchemeSelection::SAMPLE	btrblocks/btrblocks.hpp	/^enum class SchemeSelection : uint8_t { SAMPLE, TRY_ALL };$/;"	m	class:btrblocks::SchemeSelection	access:private
btrblocks::SchemeSet	btrblocks/scheme/SchemeSet.hpp	/^struct SchemeSet {$/;"	s	namespace:btrblocks
btrblocks::SchemeSet::SchemeSet	btrblocks/scheme/SchemeSet.hpp	/^  constexpr SchemeSet(std::initializer_list<T> schemes) { enable(schemes); }$/;"	f	struct:btrblocks::SchemeSet	access:public	signature:(std::initializer_list<T> schemes)
btrblocks::SchemeSet::all	btrblocks/scheme/SchemeSet.hpp	/^  constexpr static SchemeSet all() {$/;"	f	struct:btrblocks::SchemeSet	access:public	signature:()
btrblocks::SchemeSet::disable	btrblocks/scheme/SchemeSet.hpp	/^  constexpr SchemeSet& disable(T s) {$/;"	f	struct:btrblocks::SchemeSet	access:public	signature:(T s)
btrblocks::SchemeSet::disable	btrblocks/scheme/SchemeSet.hpp	/^  constexpr SchemeSet& disable(std::initializer_list<T>&& schemes) {$/;"	f	struct:btrblocks::SchemeSet	access:public	signature:(std::initializer_list<T>&& schemes)
btrblocks::SchemeSet::enable	btrblocks/scheme/SchemeSet.hpp	/^  constexpr SchemeSet& enable(T s) {$/;"	f	struct:btrblocks::SchemeSet	access:public	signature:(T s)
btrblocks::SchemeSet::enable	btrblocks/scheme/SchemeSet.hpp	/^  constexpr SchemeSet& enable(std::initializer_list<T> schemes) {$/;"	f	struct:btrblocks::SchemeSet	access:public	signature:(std::initializer_list<T> schemes)
btrblocks::SchemeSet::enableAll	btrblocks/scheme/SchemeSet.hpp	/^  constexpr void enableAll() { set.set(); }$/;"	f	struct:btrblocks::SchemeSet	access:public	signature:()
btrblocks::SchemeSet::isEnabled	btrblocks/scheme/SchemeSet.hpp	/^  [[nodiscard]] constexpr bool isEnabled(T s) const {$/;"	f	struct:btrblocks::SchemeSet	access:public	signature:(T s) const
btrblocks::SchemeSet::set	btrblocks/scheme/SchemeSet.hpp	/^  std::bitset<N> set;$/;"	m	struct:btrblocks::SchemeSet	access:private
btrblocks::SchemesCollection	btrblocks/scheme/SchemePool.hpp	/^struct SchemesCollection {$/;"	s	namespace:btrblocks
btrblocks::SchemesCollection::SchemesCollection	btrblocks/scheme/SchemePool.cpp	/^SchemesCollection::SchemesCollection() {$/;"	f	class:btrblocks::SchemesCollection	signature:()
btrblocks::SchemesCollection::SchemesCollection	btrblocks/scheme/SchemePool.hpp	/^  SchemesCollection();$/;"	p	struct:btrblocks::SchemesCollection	access:public	signature:()
btrblocks::SchemesCollection::double_schemes	btrblocks/scheme/SchemePool.hpp	/^  std::unordered_map<DoubleSchemeType, unique_ptr<DoubleScheme>> double_schemes;$/;"	m	struct:btrblocks::SchemesCollection	access:public
btrblocks::SchemesCollection::integer_schemes	btrblocks/scheme/SchemePool.hpp	/^  std::unordered_map<IntegerSchemeType, unique_ptr<IntegerScheme>> integer_schemes;$/;"	m	struct:btrblocks::SchemesCollection	access:public
btrblocks::SchemesCollection::string_schemes	btrblocks/scheme/SchemePool.hpp	/^  std::unordered_map<StringSchemeType, unique_ptr<StringScheme>> string_schemes;$/;"	m	struct:btrblocks::SchemesCollection	access:public
btrblocks::SplitStrategy	btrblocks/storage/Relation.hpp	/^enum class SplitStrategy : u8 { SEQUENTIAL, RANDOM };$/;"	c	namespace:btrblocks	inherits:u8
btrblocks::SplitStrategy::SEQUENTIAL	btrblocks/storage/Relation.hpp	/^enum class SplitStrategy : u8 { SEQUENTIAL, RANDOM };$/;"	m	class:btrblocks::SplitStrategy	access:private
btrblocks::StringArrayViewer	btrblocks/storage/StringArrayViewer.hpp	/^struct StringArrayViewer {$/;"	s	namespace:btrblocks
btrblocks::StringArrayViewer::Slot	btrblocks/storage/StringArrayViewer.hpp	/^  struct Slot {$/;"	s	struct:btrblocks::StringArrayViewer	access:public
btrblocks::StringArrayViewer::Slot::offset	btrblocks/storage/StringArrayViewer.hpp	/^    INTEGER offset;$/;"	m	struct:btrblocks::StringArrayViewer::Slot	access:public
btrblocks::StringArrayViewer::StringArrayViewer	btrblocks/storage/StringArrayViewer.hpp	/^  explicit StringArrayViewer(const u8* slots_ptr) : slots_ptr(slots_ptr) {}$/;"	f	struct:btrblocks::StringArrayViewer	access:public	signature:(const u8* slots_ptr)
btrblocks::StringArrayViewer::get	btrblocks/storage/StringArrayViewer.hpp	/^  inline static const str get(const u8* slots_ptr, u32 i) {$/;"	f	struct:btrblocks::StringArrayViewer	access:public	signature:(const u8* slots_ptr, u32 i)
btrblocks::StringArrayViewer::get_pointer	btrblocks/storage/StringArrayViewer.hpp	/^  [[nodiscard]] inline const char* get_pointer(u32 i) const {$/;"	f	struct:btrblocks::StringArrayViewer	access:public	signature:(u32 i) const
btrblocks::StringArrayViewer::operator ()	btrblocks/storage/StringArrayViewer.hpp	/^  inline const str operator()(u32 i) const {$/;"	f	struct:btrblocks::StringArrayViewer	access:public	signature:(u32 i) const
btrblocks::StringArrayViewer::size	btrblocks/storage/StringArrayViewer.hpp	/^  [[nodiscard]] inline u32 size(u32 i) const {$/;"	f	struct:btrblocks::StringArrayViewer	access:public	signature:(u32 i) const
btrblocks::StringArrayViewer::slots_ptr	btrblocks/storage/StringArrayViewer.hpp	/^  const u8* slots_ptr;$/;"	m	struct:btrblocks::StringArrayViewer	access:public
btrblocks::StringPointerArrayViewer	btrblocks/storage/StringPointerArrayViewer.hpp	/^struct StringPointerArrayViewer {$/;"	s	namespace:btrblocks
btrblocks::StringPointerArrayViewer::StringPointerArrayViewer	btrblocks/storage/StringPointerArrayViewer.hpp	/^  explicit StringPointerArrayViewer(const u8* data) {$/;"	f	struct:btrblocks::StringPointerArrayViewer	access:public	signature:(const u8* data)
btrblocks::StringPointerArrayViewer::View	btrblocks/storage/StringPointerArrayViewer.hpp	/^  struct View {$/;"	s	struct:btrblocks::StringPointerArrayViewer	access:public
btrblocks::StringPointerArrayViewer::View::length	btrblocks/storage/StringPointerArrayViewer.hpp	/^    u32 length;$/;"	m	struct:btrblocks::StringPointerArrayViewer::View	access:public
btrblocks::StringPointerArrayViewer::View::offset	btrblocks/storage/StringPointerArrayViewer.hpp	/^    u32 offset;$/;"	m	struct:btrblocks::StringPointerArrayViewer::View	access:public
btrblocks::StringPointerArrayViewer::operator ()	btrblocks/storage/StringPointerArrayViewer.hpp	/^  inline str operator()(u32 i) const {$/;"	f	struct:btrblocks::StringPointerArrayViewer	access:public	signature:(u32 i) const
btrblocks::StringPointerArrayViewer::sizeof	btrblocks/storage/StringPointerArrayViewer.hpp	/^  static_assert(sizeof(View) == 8);$/;"	p	struct:btrblocks::StringPointerArrayViewer	access:public	signature:(View)
btrblocks::StringPointerArrayViewer::views	btrblocks/storage/StringPointerArrayViewer.hpp	/^  const View* views;$/;"	m	struct:btrblocks::StringPointerArrayViewer	access:public
btrblocks::StringScheme	btrblocks/scheme/CompressionScheme.hpp	/^class StringScheme {$/;"	c	namespace:btrblocks
btrblocks::StringScheme::compress	btrblocks/scheme/CompressionScheme.hpp	/^  virtual u32 compress(StringArrayViewer src,$/;"	p	class:btrblocks::StringScheme	access:public	signature:(StringArrayViewer src, const BITMAP* nullmap, u8* dest, StringStats& stats)
btrblocks::StringScheme::decompress	btrblocks/scheme/CompressionScheme.hpp	/^  virtual void decompress(u8* dest,$/;"	p	class:btrblocks::StringScheme	access:public	signature:(u8* dest, BitmapWrapper* nullmap, const u8* src, u32 tuple_count, u32 level)
btrblocks::StringScheme::decompressNoCopy	btrblocks/scheme/CompressionScheme.hpp	/^  virtual bool decompressNoCopy(u8* dest,$/;"	f	class:btrblocks::StringScheme	access:public	signature:(u8* dest, BitmapWrapper* nullmap, const u8* src, u32 tuple_count, u32 level)
btrblocks::StringScheme::expectedCompressionRatio	btrblocks/scheme/CompressionScheme.hpp	/^  virtual double expectedCompressionRatio(StringStats& stats, [[maybe_unused]] u8 allowed_cascading_level) = 0;$/;"	p	class:btrblocks::StringScheme	access:public	signature:(StringStats& stats, [[maybe_unused]] u8 allowed_cascading_level)
btrblocks::StringScheme::fullDescription	btrblocks/scheme/CompressionScheme.hpp	/^  virtual string fullDescription(const u8*) {$/;"	f	class:btrblocks::StringScheme	access:public	signature:(const u8*)
btrblocks::StringScheme::getDecompressedSize	btrblocks/scheme/CompressionScheme.hpp	/^  virtual u32 getDecompressedSize(const u8* src, u32 tuple_count, BitmapWrapper* nullmap) = 0;$/;"	p	class:btrblocks::StringScheme	access:public	signature:(const u8* src, u32 tuple_count, BitmapWrapper* nullmap)
btrblocks::StringScheme::getDecompressedSizeNoCopy	btrblocks/scheme/CompressionScheme.hpp	/^  virtual u32 getDecompressedSizeNoCopy(const u8* src, u32 tuple_count, BitmapWrapper* nullmap) {$/;"	f	class:btrblocks::StringScheme	access:public	signature:(const u8* src, u32 tuple_count, BitmapWrapper* nullmap)
btrblocks::StringScheme::getTotalLength	btrblocks/scheme/CompressionScheme.hpp	/^  virtual u32 getTotalLength(const u8* src, u32 tuple_count, BitmapWrapper* nullmap) = 0;$/;"	p	class:btrblocks::StringScheme	access:public	signature:(const u8* src, u32 tuple_count, BitmapWrapper* nullmap)
btrblocks::StringScheme::isUsable	btrblocks/scheme/CompressionScheme.hpp	/^  virtual bool isUsable(StringStats&) { return true; }$/;"	f	class:btrblocks::StringScheme	access:public	signature:(StringStats&)
btrblocks::StringScheme::schemeType	btrblocks/scheme/CompressionScheme.hpp	/^  virtual StringSchemeType schemeType() = 0;$/;"	p	class:btrblocks::StringScheme	access:public	signature:()
btrblocks::StringScheme::selfDescription	btrblocks/scheme/CompressionScheme.hpp	/^  inline string selfDescription(const u8* src = nullptr) {$/;"	f	class:btrblocks::StringScheme	access:public	signature:(const u8* src = nullptr)
btrblocks::StringScheme::usesFsst	btrblocks/scheme/CompressionScheme.hpp	/^  virtual bool usesFsst(const u8* src) {$/;"	f	class:btrblocks::StringScheme	access:public	signature:(const u8* src)
btrblocks::StringStats	btrblocks/stats/StringStats.hpp	/^struct StringStats {$/;"	s	namespace:btrblocks
btrblocks::StringStats::distinct_values	btrblocks/stats/StringStats.hpp	/^  std::set<str> distinct_values;$/;"	m	struct:btrblocks::StringStats	access:public
btrblocks::StringStats::generateStats	btrblocks/stats/StringStats.cpp	/^StringStats StringStats::generateStats(const btrblocks::StringArrayViewer src,$/;"	f	class:btrblocks::StringStats	signature:(const btrblocks::StringArrayViewer src, const BITMAP* nullmap, u32 tuple_count, SIZE column_data_size)
btrblocks::StringStats::generateStats	btrblocks/stats/StringStats.hpp	/^  static StringStats generateStats(const StringArrayViewer src,$/;"	p	struct:btrblocks::StringStats	access:public	signature:(const StringArrayViewer src, const BITMAP* nullmap, u32 tuple_count, SIZE column_data_size)
btrblocks::StringStats::null_count	btrblocks/stats/StringStats.hpp	/^  u32 null_count;$/;"	m	struct:btrblocks::StringStats	access:public
btrblocks::StringStats::set_count	btrblocks/stats/StringStats.hpp	/^  u32 set_count;$/;"	m	struct:btrblocks::StringStats	access:public
btrblocks::StringStats::total_length	btrblocks/stats/StringStats.hpp	/^  u32 total_length;         \/\/ only string starting from slots end$/;"	m	struct:btrblocks::StringStats	access:public
btrblocks::StringStats::total_size	btrblocks/stats/StringStats.hpp	/^  u32 total_size;           \/\/ everything in the column including slots$/;"	m	struct:btrblocks::StringStats	access:public
btrblocks::StringStats::total_unique_length	btrblocks/stats/StringStats.hpp	/^  u32 total_unique_length;  \/\/ only the unique (dict) strings$/;"	m	struct:btrblocks::StringStats	access:public
btrblocks::StringStats::tuple_count	btrblocks/stats/StringStats.hpp	/^  u32 tuple_count;$/;"	m	struct:btrblocks::StringStats	access:public
btrblocks::StringStats::unique_count	btrblocks/stats/StringStats.hpp	/^  u32 unique_count;$/;"	m	struct:btrblocks::StringStats	access:public
btrblocks::TDynamicDictionary	btrblocks/scheme/templated/DynamicDictionary.hpp	/^class TDynamicDictionary {$/;"	c	namespace:btrblocks
btrblocks::TDynamicDictionary::compressColumn	btrblocks/scheme/templated/DynamicDictionary.hpp	/^  static inline u32 compressColumn(const NumberType* src,$/;"	f	class:btrblocks::TDynamicDictionary	access:public	signature:(const NumberType* src, const BITMAP*, u8* dest, StatsType& stats, u8 allowed_cascading_level)
btrblocks::TDynamicDictionary::decompressColumn	btrblocks/scheme/templated/DynamicDictionary.hpp	/^    decompressColumn(DOUBLE* dest, BitmapWrapper*, const u8* src, u32 tuple_count, u32 level) {$/;"	f	class:btrblocks::TDynamicDictionary	signature:(DOUBLE* dest, BitmapWrapper*, const u8* src, u32 tuple_count, u32 level)
btrblocks::TDynamicDictionary::decompressColumn	btrblocks/scheme/templated/DynamicDictionary.hpp	/^    decompressColumn(INTEGER* dest, BitmapWrapper*, const u8* src, u32 tuple_count, u32 level) {$/;"	f	class:btrblocks::TDynamicDictionary	signature:(INTEGER* dest, BitmapWrapper*, const u8* src, u32 tuple_count, u32 level)
btrblocks::TDynamicDictionary::decompressColumn	btrblocks/scheme/templated/DynamicDictionary.hpp	/^  static inline void decompressColumn(NumberType* dest,$/;"	f	class:btrblocks::TDynamicDictionary	access:public	signature:(NumberType* dest, BitmapWrapper*, const u8* src, u32 tuple_count, u32 level)
btrblocks::TDynamicDictionary::expectedCompressionRatio	btrblocks/scheme/templated/DynamicDictionary.hpp	/^  static inline double expectedCompressionRatio(StatsType& stats, u8 allowed_cascading_level) {$/;"	f	class:btrblocks::TDynamicDictionary	access:public	signature:(StatsType& stats, u8 allowed_cascading_level)
btrblocks::TDynamicDictionary::fullDescription	btrblocks/scheme/templated/DynamicDictionary.hpp	/^  static inline string fullDescription(const u8* src, const string& selfDescription) {$/;"	f	class:btrblocks::TDynamicDictionary	access:public	signature:(const u8* src, const string& selfDescription)
btrblocks::TFrequency	btrblocks/scheme/templated/Frequency.hpp	/^class TFrequency {$/;"	c	namespace:btrblocks
btrblocks::TFrequency::compressColumn	btrblocks/scheme/templated/Frequency.hpp	/^  static inline u32 compressColumn(const NumberType* src,$/;"	f	class:btrblocks::TFrequency	access:public	signature:(const NumberType* src, const BITMAP* nullmap, u8* dest, StatsType& stats, u8 allowed_cascading_level)
btrblocks::TFrequency::decompressColumn	btrblocks/scheme/templated/Frequency.hpp	/^  static inline void decompressColumn(NumberType* dest,$/;"	f	class:btrblocks::TFrequency	access:public	signature:(NumberType* dest, BitmapWrapper*, const u8* src, u32 tuple_count, u32 level)
btrblocks::TFrequency::expectedCompressionRatio	btrblocks/scheme/templated/Frequency.hpp	/^  static inline double expectedCompressionRatio(StatsType& stats) {$/;"	f	class:btrblocks::TFrequency	access:public	signature:(StatsType& stats)
btrblocks::TFrequency::fullDescription	btrblocks/scheme/templated/Frequency.hpp	/^  static inline string fullDescription(const u8* src, const string& selfDescription) {$/;"	f	class:btrblocks::TFrequency	access:public	signature:(const u8* src, const string& selfDescription)
btrblocks::TRLE	btrblocks/scheme/templated/RLE.hpp	/^class TRLE {$/;"	c	namespace:btrblocks
btrblocks::TRLE::compressColumn	btrblocks/scheme/templated/RLE.hpp	/^  static inline u32 compressColumn(const NumberType* src,$/;"	f	class:btrblocks::TRLE	access:public	signature:(const NumberType* src, const BITMAP* nullmap, u8* dest, StatsType& stats, u8 allowed_cascading_level, u8 force_values = autoScheme(), u8 force_counts = autoScheme())
btrblocks::TRLE::decompressColumn	btrblocks/scheme/templated/RLE.hpp	/^  static inline void decompressColumn(NumberType* dest,$/;"	f	class:btrblocks::TRLE	access:public	signature:(NumberType* dest, BitmapWrapper*, const u8* src, u32 tuple_count, u32 level)
btrblocks::TRLE::decompressColumn	btrblocks/scheme/templated/RLE.hpp	/^inline void TRLE<DOUBLE, DoubleScheme, DoubleStats, DoubleSchemeType>::decompressColumn($/;"	f	class:btrblocks::TRLE	signature:( DOUBLE* dest, BitmapWrapper*, const u8* src, u32 tuple_count, u32 level)
btrblocks::TRLE::decompressColumn	btrblocks/scheme/templated/RLE.hpp	/^inline void TRLE<INTEGER, IntegerScheme, SInteger32Stats, IntegerSchemeType>::decompressColumn($/;"	f	class:btrblocks::TRLE	signature:( INTEGER* dest, BitmapWrapper*, const u8* src, u32 tuple_count, u32 level)
btrblocks::TRLE::decompressRuns	btrblocks/scheme/templated/RLE.hpp	/^  static inline u32 decompressRuns(NumberType* values,$/;"	f	class:btrblocks::TRLE	access:public	signature:(NumberType* values, INTEGER* counts, BitmapWrapper*, const u8* src, u32 tuple_count, u32 level)
btrblocks::TRLE::fullDescription	btrblocks/scheme/templated/RLE.hpp	/^  static inline string fullDescription(const u8* src, const string& selfDescription) {$/;"	f	class:btrblocks::TRLE	access:public	signature:(const u8* src, const string& selfDescription)
btrblocks::ThreadCache	btrblocks/cache/ThreadCache.hpp	/^class ThreadCache {$/;"	c	namespace:btrblocks
btrblocks::ThreadCache::dumpFsst	btrblocks/cache/ThreadCache.hpp	/^  static void dumpFsst([[maybe_unused]] u32 before_total,$/;"	f	class:btrblocks::ThreadCache	access:public	signature:([[maybe_unused]] u32 before_total, [[maybe_unused]] u32 before_pool, [[maybe_unused]] u32 after_pool, [[maybe_unused]] u32 after_total)
btrblocks::ThreadCache::dumpPush	btrblocks/cache/ThreadCache.hpp	/^  static void dumpPush([[maybe_unused]] const string& scheme_name,$/;"	f	class:btrblocks::ThreadCache	access:public	signature:([[maybe_unused]] const string& scheme_name, [[maybe_unused]] double cf, [[maybe_unused]] u32 before, [[maybe_unused]] u32 after, [[maybe_unused]] u32 unique_count, [[maybe_unused]] const string& comment = Ó)
btrblocks::ThreadCache::dumpSet	btrblocks/cache/ThreadCache.hpp	/^  static void dumpSet([[maybe_unused]] string rel_name,$/;"	f	class:btrblocks::ThreadCache	access:public	signature:([[maybe_unused]] string rel_name, [[maybe_unused]] string col_name, [[maybe_unused]] string col_type)
btrblocks::ThreadCache::get	btrblocks/cache/ThreadCache.hpp	/^  static ThreadCacheContainer& get() {$/;"	f	class:btrblocks::ThreadCache	access:public	signature:()
btrblocks::ThreadCache::hasUsedFsst	btrblocks/cache/ThreadCache.hpp	/^  static bool hasUsedFsst() {$/;"	f	class:btrblocks::ThreadCache	access:public	signature:()
btrblocks::ThreadCache::setFsst	btrblocks/cache/ThreadCache.hpp	/^  static void setFsst() {$/;"	f	class:btrblocks::ThreadCache	access:public	signature:()
btrblocks::ThreadCacheContainer	btrblocks/cache/ThreadCache.hpp	/^struct ThreadCacheContainer {$/;"	s	namespace:btrblocks
btrblocks::ThreadCacheContainer::DumpMeta	btrblocks/cache/ThreadCache.hpp	/^  struct DumpMeta {$/;"	s	struct:btrblocks::ThreadCacheContainer	access:public
btrblocks::ThreadCacheContainer::DumpMeta::chunk_i	btrblocks/cache/ThreadCache.hpp	/^    u32 chunk_i;$/;"	m	struct:btrblocks::ThreadCacheContainer::DumpMeta	access:public
btrblocks::ThreadCacheContainer::DumpMeta::col_name	btrblocks/cache/ThreadCache.hpp	/^    string col_name;$/;"	m	struct:btrblocks::ThreadCacheContainer::DumpMeta	access:public
btrblocks::ThreadCacheContainer::DumpMeta::col_type	btrblocks/cache/ThreadCache.hpp	/^    string col_type;$/;"	m	struct:btrblocks::ThreadCacheContainer::DumpMeta	access:public
btrblocks::ThreadCacheContainer::DumpMeta::rel_name	btrblocks/cache/ThreadCache.hpp	/^    string rel_name;$/;"	m	struct:btrblocks::ThreadCacheContainer::DumpMeta	access:public
btrblocks::ThreadCacheContainer::ThreadCacheContainer	btrblocks/cache/ThreadCache.hpp	/^  ThreadCacheContainer() { log << '\\n'; }$/;"	f	struct:btrblocks::ThreadCacheContainer	access:public	signature:()
btrblocks::ThreadCacheContainer::compression_level	btrblocks/cache/ThreadCache.hpp	/^  u16 compression_level = 0;$/;"	m	struct:btrblocks::ThreadCacheContainer	access:public
btrblocks::ThreadCacheContainer::dump_meta	btrblocks/cache/ThreadCache.hpp	/^  DumpMeta dump_meta;$/;"	m	struct:btrblocks::ThreadCacheContainer	access:public
btrblocks::ThreadCacheContainer::estimation_deviation_csv	btrblocks/cache/ThreadCache.hpp	/^  std::stringstream estimation_deviation_csv;  \/\/ decision_tree$/;"	m	struct:btrblocks::ThreadCacheContainer	access:public
btrblocks::ThreadCacheContainer::estimation_level	btrblocks/cache/ThreadCache.hpp	/^  u16 estimation_level = 0;$/;"	m	struct:btrblocks::ThreadCacheContainer	access:public
btrblocks::ThreadCacheContainer::fsst	btrblocks/cache/ThreadCache.hpp	/^  bool fsst = false;$/;"	m	struct:btrblocks::ThreadCacheContainer	access:public
btrblocks::ThreadCacheContainer::fsst_csv	btrblocks/cache/ThreadCache.hpp	/^  std::stringstream fsst_csv;                  \/\/ fsst$/;"	m	struct:btrblocks::ThreadCacheContainer	access:public
btrblocks::ThreadCacheContainer::isOnHotPath	btrblocks/cache/ThreadCache.hpp	/^  bool isOnHotPath() { return estimation_level == 0; }$/;"	f	struct:btrblocks::ThreadCacheContainer	access:public	signature:()
btrblocks::ThreadCacheContainer::log	btrblocks/cache/ThreadCache.hpp	/^  std::stringstream log;  \/\/ decision_tree$/;"	m	struct:btrblocks::ThreadCacheContainer	access:public
btrblocks::ThreadCacheContainer::operator <<	btrblocks/cache/ThreadCache.hpp	/^  std::ostream& operator<<([[maybe_unused]] const string& str) {$/;"	f	struct:btrblocks::ThreadCacheContainer	access:public	signature:([[maybe_unused]] const string& str)
btrblocks::ThreadCacheContainer::~ThreadCacheContainer	btrblocks/cache/ThreadCache.hpp	/^  ~ThreadCacheContainer() {$/;"	f	struct:btrblocks::ThreadCacheContainer	access:public	signature:()
btrblocks::TypeWrapper	btrblocks/compression/SchemePicker.hpp	/^class TypeWrapper {};$/;"	c	namespace:btrblocks
btrblocks::TypeWrapper	btrblocks/compression/SchemePicker.hpp	/^class TypeWrapper<DoubleScheme, DoubleSchemeType> {$/;"	c	namespace:btrblocks
btrblocks::TypeWrapper	btrblocks/compression/SchemePicker.hpp	/^class TypeWrapper<IntegerScheme, IntegerSchemeType> {$/;"	c	namespace:btrblocks
btrblocks::TypeWrapper	btrblocks/compression/SchemePicker.hpp	/^class TypeWrapper<StringScheme, StringSchemeType> {$/;"	c	namespace:btrblocks
btrblocks::TypeWrapper::getFORScheme	btrblocks/compression/SchemePicker.hpp	/^  static DoubleScheme& getFORScheme() {$/;"	f	class:btrblocks::TypeWrapper	access:public	signature:()
btrblocks::TypeWrapper::getFORScheme	btrblocks/compression/SchemePicker.hpp	/^  static IntegerScheme& getFORScheme() { return getScheme(IntegerSchemeType::FOR); }$/;"	f	class:btrblocks::TypeWrapper	access:public	signature:()
btrblocks::TypeWrapper::getFORScheme	btrblocks/compression/SchemePicker.hpp	/^  static StringScheme& getFORScheme() {$/;"	f	class:btrblocks::TypeWrapper	access:public	signature:()
btrblocks::TypeWrapper::getOverrideScheme	btrblocks/compression/SchemePicker.hpp	/^  static u8& getOverrideScheme() {$/;"	f	class:btrblocks::TypeWrapper	access:public	signature:()
btrblocks::TypeWrapper::getScheme	btrblocks/compression/SchemePicker.hpp	/^  static DoubleScheme& getScheme(DoubleSchemeType code) { return *getSchemes()[code]; }$/;"	f	class:btrblocks::TypeWrapper	access:public	signature:(DoubleSchemeType code)
btrblocks::TypeWrapper::getScheme	btrblocks/compression/SchemePicker.hpp	/^  static DoubleScheme& getScheme(u8 code) {$/;"	f	class:btrblocks::TypeWrapper	access:public	signature:(u8 code)
btrblocks::TypeWrapper::getScheme	btrblocks/compression/SchemePicker.hpp	/^  static IntegerScheme& getScheme(IntegerSchemeType code) { return *getSchemes()[code]; }$/;"	f	class:btrblocks::TypeWrapper	access:public	signature:(IntegerSchemeType code)
btrblocks::TypeWrapper::getScheme	btrblocks/compression/SchemePicker.hpp	/^  static IntegerScheme& getScheme(u8 code) {$/;"	f	class:btrblocks::TypeWrapper	access:public	signature:(u8 code)
btrblocks::TypeWrapper::getScheme	btrblocks/compression/SchemePicker.hpp	/^  static StringScheme& getScheme(StringSchemeType code) { return *getSchemes()[code]; }$/;"	f	class:btrblocks::TypeWrapper	access:public	signature:(StringSchemeType code)
btrblocks::TypeWrapper::getScheme	btrblocks/compression/SchemePicker.hpp	/^  static StringScheme& getScheme(u8 code) {$/;"	f	class:btrblocks::TypeWrapper	access:public	signature:(u8 code)
btrblocks::TypeWrapper::getSchemes	btrblocks/compression/SchemePicker.hpp	/^  static std::unordered_map<DoubleSchemeType, unique_ptr<DoubleScheme>>& getSchemes() {$/;"	f	class:btrblocks::TypeWrapper	access:public	signature:()
btrblocks::TypeWrapper::getSchemes	btrblocks/compression/SchemePicker.hpp	/^  static std::unordered_map<IntegerSchemeType, unique_ptr<IntegerScheme>>& getSchemes() {$/;"	f	class:btrblocks::TypeWrapper	access:public	signature:()
btrblocks::TypeWrapper::getSchemes	btrblocks/compression/SchemePicker.hpp	/^  static std::unordered_map<StringSchemeType, unique_ptr<StringScheme>>& getSchemes() {$/;"	f	class:btrblocks::TypeWrapper	access:public	signature:()
btrblocks::TypeWrapper::getTypeName	btrblocks/compression/SchemePicker.hpp	/^  static inline string getTypeName() { return "DOUBLE"; }$/;"	f	class:btrblocks::TypeWrapper	access:public	signature:()
btrblocks::TypeWrapper::getTypeName	btrblocks/compression/SchemePicker.hpp	/^  static inline string getTypeName() { return "INTEGER"; }$/;"	f	class:btrblocks::TypeWrapper	access:public	signature:()
btrblocks::TypeWrapper::getTypeName	btrblocks/compression/SchemePicker.hpp	/^  static inline string getTypeName() { return "STRING"; }$/;"	f	class:btrblocks::TypeWrapper	access:public	signature:()
btrblocks::TypeWrapper::maxCascadingLevel	btrblocks/compression/SchemePicker.hpp	/^  static u8 maxCascadingLevel() { return BtrBlocksConfig::get().doubles.max_cascade_depth; }$/;"	f	class:btrblocks::TypeWrapper	access:public	signature:()
btrblocks::TypeWrapper::maxCascadingLevel	btrblocks/compression/SchemePicker.hpp	/^  static u8 maxCascadingLevel() { return BtrBlocksConfig::get().integers.max_cascade_depth; }$/;"	f	class:btrblocks::TypeWrapper	access:public	signature:()
btrblocks::TypeWrapper::maxCascadingLevel	btrblocks/compression/SchemePicker.hpp	/^  static u8 maxCascadingLevel() { return BtrBlocksConfig::get().strings.max_cascade_depth; }$/;"	f	class:btrblocks::TypeWrapper	access:public	signature:()
btrblocks::TypeWrapper::shouldUseFOR	btrblocks/compression/SchemePicker.hpp	/^  constexpr static bool shouldUseFOR(DOUBLE) { return false; }$/;"	f	class:btrblocks::TypeWrapper	access:public	signature:(DOUBLE)
btrblocks::TypeWrapper::shouldUseFOR	btrblocks/compression/SchemePicker.hpp	/^  constexpr static bool shouldUseFOR(INTEGER min) {$/;"	f	class:btrblocks::TypeWrapper	access:public	signature:(INTEGER min)
btrblocks::TypeWrapper::shouldUseFOR	btrblocks/compression/SchemePicker.hpp	/^  constexpr static bool shouldUseFOR(str) { return false; }$/;"	f	class:btrblocks::TypeWrapper	access:public	signature:(str)
btrblocks::Utils	btrblocks/common/Utils.hpp	/^class Utils {$/;"	c	namespace:btrblocks
btrblocks::Utils::alignBy	btrblocks/common/Utils.hpp	/^  static constexpr u64 alignBy(u64 num, u64 alignment, u64& diff) {$/;"	f	class:btrblocks::Utils	access:public	signature:(u64 num, u64 alignment, u64& diff)
btrblocks::Utils::getBitsNeeded	btrblocks/common/Utils.hpp	/^  static constexpr u32 getBitsNeeded(s32 input) {$/;"	f	class:btrblocks::Utils	access:public	signature:(s32 input)
btrblocks::Utils::getBitsNeeded	btrblocks/common/Utils.hpp	/^  static constexpr u32 getBitsNeeded(u32 input) {$/;"	f	class:btrblocks::Utils	access:public	signature:(u32 input)
btrblocks::Utils::getBitsNeeded	btrblocks/common/Utils.hpp	/^  static constexpr u32 getBitsNeeded(u64 input) {$/;"	f	class:btrblocks::Utils	access:public	signature:(u64 input)
btrblocks::Utils::multiplyString	btrblocks/common/Utils.hpp	/^  static void multiplyString(char* dest, const char* src, u32 len, u32 n, u32 src_n) {$/;"	f	class:btrblocks::Utils	access:public	signature:(char* dest, const char* src, u32 len, u32 n, u32 src_n)
btrblocks::Utils::multiplyU32	btrblocks/common/Utils.hpp	/^  static void multiplyU32(u32* dest, const u32* src, u32 n) {$/;"	f	class:btrblocks::Utils	access:public	signature:(u32* dest, const u32* src, u32 n)
btrblocks::Utils::readFileToMemory	btrblocks/common/Utils.hpp	/^  static void readFileToMemory(const std::string& path, std::vector<char>& target) {$/;"	f	class:btrblocks::Utils	access:public	signature:(const std::string& path, std::vector<char>& target)
btrblocks::Utils::writeOffsetsU32	btrblocks/common/Utils.hpp	/^  static u32* writeOffsetsU32(u32* dest, u32 start, u32 len, u32 n) {$/;"	f	class:btrblocks::Utils	access:public	signature:(u32* dest, u32 start, u32 len, u32 n)
btrblocks::addIfEnabled	btrblocks/scheme/SchemePool.cpp	/^int addIfEnabled(SchemeMap& schemeMap, const SchemeSet& schemeSet) {$/;"	f	namespace:btrblocks	signature:(SchemeMap& schemeMap, const SchemeSet& schemeSet)
btrblocks::bitmap	btrblocks/extern/RoaringBitmap.cpp	/^namespace btrblocks::bitmap {$/;"	n	class:btrblocks	file:
btrblocks::bitmap	btrblocks/extern/RoaringBitmap.hpp	/^namespace btrblocks::bitmap {$/;"	n	class:btrblocks
btrblocks::bitmap::BitmapWrapper	btrblocks/extern/RoaringBitmap.hpp	/^class BitmapWrapper {$/;"	c	namespace:btrblocks::bitmap
btrblocks::bitmap::BitmapWrapper::BitmapWrapper	btrblocks/extern/RoaringBitmap.cpp	/^BitmapWrapper::BitmapWrapper(const u8* src,$/;"	f	class:btrblocks::bitmap::BitmapWrapper	signature:(const u8* src, BitmapType type, u32 tuple_count, boost::dynamic_bitset<>* bitset)
btrblocks::bitmap::BitmapWrapper::BitmapWrapper	btrblocks/extern/RoaringBitmap.hpp	/^  BitmapWrapper(const u8* src,$/;"	p	class:btrblocks::bitmap::BitmapWrapper	access:public	signature:(const u8* src, BitmapType type, u32 tuple_count, boost::dynamic_bitset<>* bitset = nullptr)
btrblocks::bitmap::BitmapWrapper::cardinality	btrblocks/extern/RoaringBitmap.hpp	/^  [[nodiscard]] inline u32 cardinality() const { return this->m_cardinality; };$/;"	f	class:btrblocks::bitmap::BitmapWrapper	access:public	signature:() const
btrblocks::bitmap::BitmapWrapper::get_bitset	btrblocks/extern/RoaringBitmap.cpp	/^boost::dynamic_bitset<>* BitmapWrapper::get_bitset() {$/;"	f	class:btrblocks::bitmap::BitmapWrapper	signature:()
btrblocks::bitmap::BitmapWrapper::get_bitset	btrblocks/extern/RoaringBitmap.hpp	/^  boost::dynamic_bitset<>* get_bitset();$/;"	p	class:btrblocks::bitmap::BitmapWrapper	access:public	signature:()
btrblocks::bitmap::BitmapWrapper::m_bitset	btrblocks/extern/RoaringBitmap.hpp	/^  boost::dynamic_bitset<>* m_bitset = nullptr;$/;"	m	class:btrblocks::bitmap::BitmapWrapper	access:private
btrblocks::bitmap::BitmapWrapper::m_bitset_initialized	btrblocks/extern/RoaringBitmap.hpp	/^  bool m_bitset_initialized = false;$/;"	m	class:btrblocks::bitmap::BitmapWrapper	access:private
btrblocks::bitmap::BitmapWrapper::m_cardinality	btrblocks/extern/RoaringBitmap.hpp	/^  u32 m_cardinality;$/;"	m	class:btrblocks::bitmap::BitmapWrapper	access:private
btrblocks::bitmap::BitmapWrapper::m_roaring	btrblocks/extern/RoaringBitmap.hpp	/^  Roaring m_roaring;$/;"	m	class:btrblocks::bitmap::BitmapWrapper	access:private
btrblocks::bitmap::BitmapWrapper::m_tuple_count	btrblocks/extern/RoaringBitmap.hpp	/^  u32 m_tuple_count;$/;"	m	class:btrblocks::bitmap::BitmapWrapper	access:private
btrblocks::bitmap::BitmapWrapper::m_type	btrblocks/extern/RoaringBitmap.hpp	/^  BitmapType m_type;$/;"	m	class:btrblocks::bitmap::BitmapWrapper	access:private
btrblocks::bitmap::BitmapWrapper::releaseBitset	btrblocks/extern/RoaringBitmap.cpp	/^void BitmapWrapper::releaseBitset() {$/;"	f	class:btrblocks::bitmap::BitmapWrapper	signature:()
btrblocks::bitmap::BitmapWrapper::releaseBitset	btrblocks/extern/RoaringBitmap.hpp	/^  void releaseBitset();$/;"	p	class:btrblocks::bitmap::BitmapWrapper	access:public	signature:()
btrblocks::bitmap::BitmapWrapper::roaring	btrblocks/extern/RoaringBitmap.hpp	/^  [[nodiscard]] inline Roaring& roaring() { return this->m_roaring; };$/;"	f	class:btrblocks::bitmap::BitmapWrapper	access:public	signature:()
btrblocks::bitmap::BitmapWrapper::test	btrblocks/extern/RoaringBitmap.hpp	/^  [[nodiscard]] inline bool test(u32 idx) { return this->get_bitset()->test(idx); }$/;"	f	class:btrblocks::bitmap::BitmapWrapper	access:public	signature:(u32 idx)
btrblocks::bitmap::BitmapWrapper::type	btrblocks/extern/RoaringBitmap.hpp	/^  [[nodiscard]] inline BitmapType type() const { return this->m_type; };$/;"	f	class:btrblocks::bitmap::BitmapWrapper	access:public	signature:() const
btrblocks::bitmap::BitmapWrapper::writeBITMAP	btrblocks/extern/RoaringBitmap.cpp	/^std::vector<BITMAP> BitmapWrapper::writeBITMAP() {$/;"	f	class:btrblocks::bitmap::BitmapWrapper	signature:()
btrblocks::bitmap::BitmapWrapper::writeBITMAP	btrblocks/extern/RoaringBitmap.cpp	/^void BitmapWrapper::writeBITMAP(BITMAP* dest) {$/;"	f	class:btrblocks::bitmap::BitmapWrapper	signature:(BITMAP* dest)
btrblocks::bitmap::BitmapWrapper::writeBITMAP	btrblocks/extern/RoaringBitmap.hpp	/^  std::vector<BITMAP> writeBITMAP();$/;"	p	class:btrblocks::bitmap::BitmapWrapper	access:public	signature:()
btrblocks::bitmap::BitmapWrapper::writeBITMAP	btrblocks/extern/RoaringBitmap.hpp	/^  void writeBITMAP(BITMAP* dest);$/;"	p	class:btrblocks::bitmap::BitmapWrapper	access:public	signature:(BITMAP* dest)
btrblocks::bitmap::BitmapWrapper::~BitmapWrapper	btrblocks/extern/RoaringBitmap.cpp	/^BitmapWrapper::~BitmapWrapper() {$/;"	f	class:btrblocks::bitmap::BitmapWrapper	signature:()
btrblocks::bitmap::BitmapWrapper::~BitmapWrapper	btrblocks/extern/RoaringBitmap.hpp	/^  virtual ~BitmapWrapper();$/;"	p	class:btrblocks::bitmap::BitmapWrapper	access:public	signature:()
btrblocks::bitmap::RoaringBitmap	btrblocks/extern/RoaringBitmap.hpp	/^class RoaringBitmap {$/;"	c	namespace:btrblocks::bitmap
btrblocks::bitmap::RoaringBitmap::compress	btrblocks/extern/RoaringBitmap.cpp	/^std::pair<u32, BitmapType> RoaringBitmap::compress(const BITMAP* bitmap,$/;"	f	class:btrblocks::bitmap::RoaringBitmap	signature:(const BITMAP* bitmap, u8* dest, u32 tuple_count)
btrblocks::bitmap::RoaringBitmap::compress	btrblocks/extern/RoaringBitmap.hpp	/^  static std::pair<u32, BitmapType> compress(const BITMAP* bitmap, u8* dest, u32 tuple_count);$/;"	p	class:btrblocks::bitmap::RoaringBitmap	access:public	signature:(const BITMAP* bitmap, u8* dest, u32 tuple_count)
btrblocks::doubles	btrblocks/scheme/double/DoubleBP.cpp	/^namespace btrblocks::doubles {$/;"	n	class:btrblocks	file:
btrblocks::doubles	btrblocks/scheme/double/DoubleBP.hpp	/^namespace btrblocks::doubles {$/;"	n	class:btrblocks
btrblocks::doubles	btrblocks/scheme/double/DynamicDictionary.cpp	/^namespace btrblocks::doubles {$/;"	n	class:btrblocks	file:
btrblocks::doubles	btrblocks/scheme/double/DynamicDictionary.hpp	/^namespace btrblocks::doubles {$/;"	n	class:btrblocks
btrblocks::doubles	btrblocks/scheme/double/Pseudodecimal.cpp	/^namespace btrblocks::doubles {$/;"	n	class:btrblocks	file:
btrblocks::doubles	btrblocks/scheme/double/Pseudodecimal.hpp	/^namespace btrblocks::doubles {$/;"	n	class:btrblocks
btrblocks::doubles	btrblocks/scheme/double/RLE.cpp	/^namespace btrblocks::doubles {$/;"	n	class:btrblocks	file:
btrblocks::doubles	btrblocks/scheme/double/RLE.hpp	/^namespace btrblocks::doubles {$/;"	n	class:btrblocks
btrblocks::doubles::Decimal	btrblocks/scheme/double/Pseudodecimal.hpp	/^class Decimal : public DoubleScheme {$/;"	c	namespace:btrblocks::doubles	inherits:DoubleScheme
btrblocks::doubles::Decimal::compress	btrblocks/scheme/double/Pseudodecimal.cpp	/^u32 Decimal::compress(const DOUBLE* src,$/;"	f	class:btrblocks::doubles::Decimal	signature:(const DOUBLE* src, const BITMAP*, u8* dest, DoubleStats& stats, u8 allowed_cascading_level)
btrblocks::doubles::Decimal::decompress	btrblocks/scheme/double/Pseudodecimal.cpp	/^void Decimal::decompress(DOUBLE* dest, BitmapWrapper*, const u8* src, u32 tuple_count, u32 level) {$/;"	f	class:btrblocks::doubles::Decimal	signature:(DOUBLE* dest, BitmapWrapper*, const u8* src, u32 tuple_count, u32 level)
btrblocks::doubles::Decimal::fullDescription	btrblocks/scheme/double/Pseudodecimal.cpp	/^string Decimal::fullDescription(const u8* src) {$/;"	f	class:btrblocks::doubles::Decimal	signature:(const u8* src)
btrblocks::doubles::Decimal::isUsable	btrblocks/scheme/double/Pseudodecimal.cpp	/^bool Decimal::isUsable(DoubleStats& stats) {$/;"	f	class:btrblocks::doubles::Decimal	signature:(DoubleStats& stats)
btrblocks::doubles::Decimal::override	btrblocks/scheme/double/Pseudodecimal.hpp	/^                  u32 level) override;$/;"	m	class:btrblocks::doubles::Decimal	access:public
btrblocks::doubles::Decimal::override	btrblocks/scheme/double/Pseudodecimal.hpp	/^               u8 allowed_cascading_level) override;$/;"	m	class:btrblocks::doubles::Decimal	access:public
btrblocks::doubles::Decimal::override	btrblocks/scheme/double/Pseudodecimal.hpp	/^  bool isUsable(DoubleStats& stats) override;$/;"	m	class:btrblocks::doubles::Decimal	access:public
btrblocks::doubles::Decimal::override	btrblocks/scheme/double/Pseudodecimal.hpp	/^  std::string fullDescription(const u8* src) override;$/;"	m	class:btrblocks::doubles::Decimal	access:public
btrblocks::doubles::Decimal::staticSchemeType	btrblocks/scheme/double/Pseudodecimal.hpp	/^  inline static DoubleSchemeType staticSchemeType() { return DoubleSchemeType::PSEUDODECIMAL; }$/;"	f	class:btrblocks::doubles::Decimal	access:public	signature:()
btrblocks::doubles::DecimalIterateParam	btrblocks/scheme/double/Pseudodecimal.cpp	/^struct DecimalIterateParam {$/;"	s	namespace:btrblocks::doubles	file:
btrblocks::doubles::DecimalIterateParam::exponents_ptr	btrblocks/scheme/double/Pseudodecimal.cpp	/^  INTEGER* exponents_ptr;$/;"	m	struct:btrblocks::doubles::DecimalIterateParam	file:	access:public
btrblocks::doubles::DecimalIterateParam::next_block_i	btrblocks/scheme/double/Pseudodecimal.cpp	/^  u32 next_block_i;$/;"	m	struct:btrblocks::doubles::DecimalIterateParam	file:	access:public
btrblocks::doubles::DecimalIterateParam::numbers_ptr	btrblocks/scheme/double/Pseudodecimal.cpp	/^  INTEGER* numbers_ptr;$/;"	m	struct:btrblocks::doubles::DecimalIterateParam	file:	access:public
btrblocks::doubles::DecimalIterateParam::patches_ptr	btrblocks/scheme/double/Pseudodecimal.cpp	/^  DOUBLE* patches_ptr;$/;"	m	struct:btrblocks::doubles::DecimalIterateParam	file:	access:public
btrblocks::doubles::DecimalIterateParam::tuple_count	btrblocks/scheme/double/Pseudodecimal.cpp	/^  u32 tuple_count;$/;"	m	struct:btrblocks::doubles::DecimalIterateParam	file:	access:public
btrblocks::doubles::DecimalIterateParam::write_ptr	btrblocks/scheme/double/Pseudodecimal.cpp	/^  DOUBLE* write_ptr;$/;"	m	struct:btrblocks::doubles::DecimalIterateParam	file:	access:public
btrblocks::doubles::DecimalStructure	btrblocks/scheme/double/Pseudodecimal.hpp	/^struct DecimalStructure {$/;"	s	namespace:btrblocks::doubles
btrblocks::doubles::DecimalStructure::Slot	btrblocks/scheme/double/Pseudodecimal.hpp	/^  struct __attribute__((packed)) Slot {$/;"	s	struct:btrblocks::doubles::DecimalStructure	access:public
btrblocks::doubles::DecimalStructure::Slot::d1	btrblocks/scheme/double/Pseudodecimal.hpp	/^    u8 d1 : 4;$/;"	m	struct:btrblocks::doubles::DecimalStructure::Slot	access:public
btrblocks::doubles::DecimalStructure::Slot::d2	btrblocks/scheme/double/Pseudodecimal.hpp	/^    u8 d2 : 4;$/;"	m	struct:btrblocks::doubles::DecimalStructure::Slot	access:public
btrblocks::doubles::DecimalStructure::converted_count	btrblocks/scheme/double/Pseudodecimal.hpp	/^  u32 converted_count;$/;"	m	struct:btrblocks::doubles::DecimalStructure	access:public
btrblocks::doubles::DecimalStructure::data	btrblocks/scheme/double/Pseudodecimal.hpp	/^  u8 data[];$/;"	m	struct:btrblocks::doubles::DecimalStructure	access:public
btrblocks::doubles::DecimalStructure::exceptions_map_offset	btrblocks/scheme/double/Pseudodecimal.hpp	/^  u32 exceptions_map_offset;$/;"	m	struct:btrblocks::doubles::DecimalStructure	access:public
btrblocks::doubles::DecimalStructure::exponents_offset	btrblocks/scheme/double/Pseudodecimal.hpp	/^  u32 exponents_offset;$/;"	m	struct:btrblocks::doubles::DecimalStructure	access:public
btrblocks::doubles::DecimalStructure::exponents_scheme	btrblocks/scheme/double/Pseudodecimal.hpp	/^  u8 exponents_scheme;$/;"	m	struct:btrblocks::doubles::DecimalStructure	access:public
btrblocks::doubles::DecimalStructure::numbers_scheme	btrblocks/scheme/double/Pseudodecimal.hpp	/^  u8 numbers_scheme;$/;"	m	struct:btrblocks::doubles::DecimalStructure	access:public
btrblocks::doubles::DecimalStructure::patches_offset	btrblocks/scheme/double/Pseudodecimal.hpp	/^  u32 patches_offset;$/;"	m	struct:btrblocks::doubles::DecimalStructure	access:public
btrblocks::doubles::DecimalStructure::patches_scheme	btrblocks/scheme/double/Pseudodecimal.hpp	/^  u8 patches_scheme;$/;"	m	struct:btrblocks::doubles::DecimalStructure	access:public
btrblocks::doubles::DecimalStructure::sizeof	btrblocks/scheme/double/Pseudodecimal.hpp	/^  static_assert(sizeof(Slot) == 1);$/;"	p	struct:btrblocks::doubles::DecimalStructure	access:public	signature:(Slot)
btrblocks::doubles::DecimalStructure::variant_selector	btrblocks/scheme/double/Pseudodecimal.hpp	/^  u8 variant_selector;$/;"	m	struct:btrblocks::doubles::DecimalStructure	access:public
btrblocks::doubles::DoubleBP	btrblocks/scheme/double/DoubleBP.hpp	/^class DoubleBP : public DoubleScheme {$/;"	c	namespace:btrblocks::doubles	inherits:DoubleScheme
btrblocks::doubles::DoubleBP::compress	btrblocks/scheme/double/DoubleBP.cpp	/^u32 DoubleBP::compress(const DOUBLE* src,$/;"	f	class:btrblocks::doubles::DoubleBP	signature:(const DOUBLE* src, const BITMAP*, u8* dest, DoubleStats& stats, [[maybe_unused]] u8 allowed_cascading_level)
btrblocks::doubles::DoubleBP::decompress	btrblocks/scheme/double/DoubleBP.cpp	/^void DoubleBP::decompress(DOUBLE* dest,$/;"	f	class:btrblocks::doubles::DoubleBP	signature:(DOUBLE* dest, [[maybe_unused]] BitmapWrapper*, const u8* src, u32 tuple_count, [[maybe_unused]] u32 level)
btrblocks::doubles::DoubleBP::lookup	btrblocks/scheme/double/DoubleBP.cpp	/^DOUBLE DoubleBP::lookup(u32) {$/;"	f	class:btrblocks::doubles::DoubleBP	signature:(u32)
btrblocks::doubles::DoubleBP::lookup	btrblocks/scheme/double/DoubleBP.hpp	/^  DOUBLE lookup(u32);$/;"	p	class:btrblocks::doubles::DoubleBP	access:public	signature:(u32)
btrblocks::doubles::DoubleBP::override	btrblocks/scheme/double/DoubleBP.hpp	/^                  u32 level) override;$/;"	m	class:btrblocks::doubles::DoubleBP	access:public
btrblocks::doubles::DoubleBP::override	btrblocks/scheme/double/DoubleBP.hpp	/^               u8 allowed_cascading_level) override;$/;"	m	class:btrblocks::doubles::DoubleBP	access:public
btrblocks::doubles::DoubleBP::scan	btrblocks/scheme/double/DoubleBP.cpp	/^void DoubleBP::scan(Predicate, BITMAP*, const u8*, u32) {$/;"	f	class:btrblocks::doubles::DoubleBP	signature:(Predicate, BITMAP*, const u8*, u32)
btrblocks::doubles::DoubleBP::scan	btrblocks/scheme/double/DoubleBP.hpp	/^  void scan(Predicate, BITMAP*, const u8*, u32);$/;"	p	class:btrblocks::doubles::DoubleBP	access:public	signature:(Predicate, BITMAP*, const u8*, u32)
btrblocks::doubles::DoubleBP::staticSchemeType	btrblocks/scheme/double/DoubleBP.hpp	/^  inline static DoubleSchemeType staticSchemeType() { return DoubleSchemeType::DOUBLE_BP; }$/;"	f	class:btrblocks::doubles::DoubleBP	access:public	signature:()
btrblocks::doubles::DoubleBPStructure	btrblocks/scheme/double/DoubleBP.hpp	/^struct DoubleBPStructure {$/;"	s	namespace:btrblocks::doubles
btrblocks::doubles::DoubleBPStructure::data	btrblocks/scheme/double/DoubleBP.hpp	/^  u8 data[];$/;"	m	struct:btrblocks::doubles::DoubleBPStructure	access:public
btrblocks::doubles::DoubleBPStructure::padding	btrblocks/scheme/double/DoubleBP.hpp	/^  u8 padding;$/;"	m	struct:btrblocks::doubles::DoubleBPStructure	access:public
btrblocks::doubles::DoubleBPStructure::u32_count	btrblocks/scheme/double/DoubleBP.hpp	/^  u32 u32_count;  \/\/ number of 4 bytes written by FastBP$/;"	m	struct:btrblocks::doubles::DoubleBPStructure	access:public
btrblocks::doubles::DynamicDictionary	btrblocks/scheme/double/DynamicDictionary.hpp	/^class DynamicDictionary : public DoubleScheme {$/;"	c	namespace:btrblocks::doubles	inherits:DoubleScheme
btrblocks::doubles::DynamicDictionary::compress	btrblocks/scheme/double/DynamicDictionary.cpp	/^u32 DynamicDictionary::compress(const DOUBLE* src,$/;"	f	class:btrblocks::doubles::DynamicDictionary	signature:(const DOUBLE* src, const BITMAP* nullmap, u8* dest, DoubleStats& stats, u8 allowed_cascading_level)
btrblocks::doubles::DynamicDictionary::decompress	btrblocks/scheme/double/DynamicDictionary.cpp	/^void DynamicDictionary::decompress(DOUBLE* dest,$/;"	f	class:btrblocks::doubles::DynamicDictionary	signature:(DOUBLE* dest, BitmapWrapper* nullmap, const u8* src, u32 tuple_count, u32 level)
btrblocks::doubles::DynamicDictionary::expectedCompressionRatio	btrblocks/scheme/double/DynamicDictionary.cpp	/^double DynamicDictionary::expectedCompressionRatio(btrblocks::DoubleStats& stats,$/;"	f	class:btrblocks::doubles::DynamicDictionary	signature:(btrblocks::DoubleStats& stats, u8 allowed_cascading_level)
btrblocks::doubles::DynamicDictionary::fullDescription	btrblocks/scheme/double/DynamicDictionary.cpp	/^string DynamicDictionary::fullDescription(const u8* src) {$/;"	f	class:btrblocks::doubles::DynamicDictionary	signature:(const u8* src)
btrblocks::doubles::DynamicDictionary::override	btrblocks/scheme/double/DynamicDictionary.hpp	/^                  u32 level) override;$/;"	m	class:btrblocks::doubles::DynamicDictionary	access:public
btrblocks::doubles::DynamicDictionary::override	btrblocks/scheme/double/DynamicDictionary.hpp	/^               u8 allowed_cascading_level) override;$/;"	m	class:btrblocks::doubles::DynamicDictionary	access:public
btrblocks::doubles::DynamicDictionary::override	btrblocks/scheme/double/DynamicDictionary.hpp	/^  double expectedCompressionRatio(DoubleStats& stats, u8 allowed_cascading_level) override;$/;"	m	class:btrblocks::doubles::DynamicDictionary	access:public
btrblocks::doubles::DynamicDictionary::override	btrblocks/scheme/double/DynamicDictionary.hpp	/^  std::string fullDescription(const u8* src) override;$/;"	m	class:btrblocks::doubles::DynamicDictionary	access:public
btrblocks::doubles::DynamicDictionary::staticSchemeType	btrblocks/scheme/double/DynamicDictionary.hpp	/^  inline static DoubleSchemeType staticSchemeType() { return DoubleSchemeType::DICT; }$/;"	f	class:btrblocks::doubles::DynamicDictionary	access:public	signature:()
btrblocks::doubles::RLE	btrblocks/scheme/double/RLE.hpp	/^class RLE : public DoubleScheme {$/;"	c	namespace:btrblocks::doubles	inherits:DoubleScheme
btrblocks::doubles::RLE::compress	btrblocks/scheme/double/RLE.cpp	/^u32 RLE::compress(const DOUBLE* src,$/;"	f	class:btrblocks::doubles::RLE	signature:(const DOUBLE* src, const BITMAP* nullmap, u8* dest, DoubleStats& stats, u8 allowed_cascading_level)
btrblocks::doubles::RLE::decompress	btrblocks/scheme/double/RLE.cpp	/^void RLE::decompress(DOUBLE* dest,$/;"	f	class:btrblocks::doubles::RLE	signature:(DOUBLE* dest, BitmapWrapper* nullmap, const u8* src, u32 tuple_count, u32 level)
btrblocks::doubles::RLE::expectedCompressionRatio	btrblocks/scheme/double/RLE.cpp	/^double RLE::expectedCompressionRatio(DoubleStats& stats, u8 allowed_cascading_level) {$/;"	f	class:btrblocks::doubles::RLE	signature:(DoubleStats& stats, u8 allowed_cascading_level)
btrblocks::doubles::RLE::fullDescription	btrblocks/scheme/double/RLE.cpp	/^string RLE::fullDescription(const u8* src) {$/;"	f	class:btrblocks::doubles::RLE	signature:(const u8* src)
btrblocks::doubles::RLE::override	btrblocks/scheme/double/RLE.hpp	/^                  u32 level) override;$/;"	m	class:btrblocks::doubles::RLE	access:public
btrblocks::doubles::RLE::override	btrblocks/scheme/double/RLE.hpp	/^               u8 allowed_cascading_level) override;$/;"	m	class:btrblocks::doubles::RLE	access:public
btrblocks::doubles::RLE::override	btrblocks/scheme/double/RLE.hpp	/^  double expectedCompressionRatio(DoubleStats& stats, u8 allowed_cascading_level) override;$/;"	m	class:btrblocks::doubles::RLE	access:public
btrblocks::doubles::RLE::override	btrblocks/scheme/double/RLE.hpp	/^  std::string fullDescription(const u8* src) override;$/;"	m	class:btrblocks::doubles::RLE	access:public
btrblocks::doubles::RLE::staticSchemeType	btrblocks/scheme/double/RLE.hpp	/^  inline static DoubleSchemeType staticSchemeType() { return DoubleSchemeType::RLE; }$/;"	f	class:btrblocks::doubles::RLE	access:public	signature:()
btrblocks::doubles::block_size	btrblocks/scheme/double/Pseudodecimal.hpp	/^const u32 block_size = 4;  \/\/ Block size adjusted for AVX2$/;"	m	namespace:btrblocks::doubles
btrblocks::doubles::decimal_index_mask	btrblocks/scheme/double/Pseudodecimal.cpp	/^const u8 decimal_index_mask = 0x1F;$/;"	m	namespace:btrblocks::doubles	file:
btrblocks::doubles::decompressAVXBlock	btrblocks/scheme/double/Pseudodecimal.cpp	/^static inline void decompressAVXBlock(DecimalIterateParam* param, uint32_t limit) {$/;"	f	namespace:btrblocks::doubles	signature:(DecimalIterateParam* param, uint32_t limit)
btrblocks::doubles::decompressAVXBlock1	btrblocks/scheme/double/Pseudodecimal.cpp	/^static inline void decompressAVXBlock1(DecimalIterateParam* param) {$/;"	f	namespace:btrblocks::doubles	signature:(DecimalIterateParam* param)
btrblocks::doubles::decompressAVXBlock2	btrblocks/scheme/double/Pseudodecimal.cpp	/^static inline void decompressAVXBlock2(DecimalIterateParam* param) {$/;"	f	namespace:btrblocks::doubles	signature:(DecimalIterateParam* param)
btrblocks::doubles::decompressAVXBlock4	btrblocks/scheme/double/Pseudodecimal.cpp	/^static inline void decompressAVXBlock4(DecimalIterateParam* param) {$/;"	f	namespace:btrblocks::doubles	signature:(DecimalIterateParam* param)
btrblocks::doubles::decompressAVXBlockUnroll	btrblocks/scheme/double/Pseudodecimal.cpp	/^static inline void decompressAVXBlockUnroll(DecimalIterateParam* param, uint32_t limit) {$/;"	f	namespace:btrblocks::doubles	signature:(DecimalIterateParam* param, uint32_t limit)
btrblocks::doubles::decompressExceptionBlock	btrblocks/scheme/double/Pseudodecimal.cpp	/^static inline void decompressExceptionBlock(DecimalIterateParam* param) {$/;"	f	namespace:btrblocks::doubles	signature:(DecimalIterateParam* param)
btrblocks::doubles::do_iteration	btrblocks/scheme/double/Pseudodecimal.hpp	/^const u8 do_iteration = (1 << 0);$/;"	m	namespace:btrblocks::doubles
btrblocks::doubles::do_unroll	btrblocks/scheme/double/Pseudodecimal.hpp	/^const u8 do_unroll = (1 << 1);$/;"	m	namespace:btrblocks::doubles
btrblocks::doubles::exact_fractions_of_ten	btrblocks/scheme/double/Pseudodecimal.cpp	/^static const double exact_fractions_of_ten[] = {$/;"	m	namespace:btrblocks::doubles	file:
btrblocks::doubles::exponent_exception_code	btrblocks/scheme/double/Pseudodecimal.cpp	/^const u8 exponent_exception_code = 23;$/;"	m	namespace:btrblocks::doubles	file:
btrblocks::doubles::max_exponent	btrblocks/scheme/double/Pseudodecimal.cpp	/^const u32 max_exponent = 22;$/;"	m	namespace:btrblocks::doubles	file:
btrblocks::doubles::sizeof	btrblocks/scheme/double/Pseudodecimal.cpp	/^static_assert(sizeof(exact_fractions_of_ten) == sizeof(double) * 23);$/;"	m	namespace:btrblocks::doubles	file:
btrblocks::files	btrfiles/Parser.cpp	/^namespace btrblocks::files {$/;"	n	class:btrblocks	file:
btrblocks::files	btrfiles/Relation.cpp	/^namespace btrblocks::files {$/;"	n	class:btrblocks	file:
btrblocks::files	btrfiles/btrfiles.hpp	/^namespace btrblocks::files {$/;"	n	class:btrblocks
btrblocks::files::ColumnDescriptor	btrfiles/Parser.cpp	/^struct ColumnDescriptor {$/;"	s	namespace:btrblocks::files	file:
btrblocks::files::ColumnDescriptor::column_type	btrfiles/Parser.cpp	/^  ColumnType column_type;$/;"	m	struct:btrblocks::files::ColumnDescriptor	file:	access:public
btrblocks::files::ColumnDescriptor::empty_count	btrfiles/Parser.cpp	/^  u32 empty_count = 0;  \/\/ 0 by double and integers, '' by strings$/;"	m	struct:btrblocks::files::ColumnDescriptor	file:	access:public
btrblocks::files::ColumnDescriptor::name	btrfiles/Parser.cpp	/^  string name;$/;"	m	struct:btrblocks::files::ColumnDescriptor	file:	access:public
btrblocks::files::ColumnDescriptor::null_count	btrfiles/Parser.cpp	/^  u32 null_count = 0;   \/\/ when 'null' comes in the input$/;"	m	struct:btrblocks::files::ColumnDescriptor	file:	access:public
btrblocks::files::ColumnDescriptor::set_bitmap	btrfiles/Parser.cpp	/^  vector<BITMAP> set_bitmap;$/;"	m	struct:btrblocks::files::ColumnDescriptor	file:	access:public
btrblocks::files::ColumnDescriptor::vector_offset	btrfiles/Parser.cpp	/^  u32 vector_offset;$/;"	m	struct:btrblocks::files::ColumnDescriptor	file:	access:public
btrblocks::files::convertCSV	btrfiles/Parser.cpp	/^void convertCSV(const string csv_path, const YAML::Node &schema, const string &out_dir, const string &csv_separator)$/;"	f	namespace:btrblocks::files	signature:(const string csv_path, const YAML::Node &schema, const string &out_dir, const string &csv_separator)
btrblocks::files::convertCSV	btrfiles/btrfiles.hpp	/^void convertCSV(const string csv_path, const YAML::Node &schema, const string &out_dir, const string &csv_separator = "|");$/;"	p	namespace:btrblocks::files	signature:(const string csv_path, const YAML::Node &schema, const string &out_dir, const string &csv_separator = Ó)
btrblocks::files::readDirectory	btrfiles/Relation.cpp	/^Relation readDirectory(const YAML::Node& schema, const string& columns_dir, const string& only_type) {$/;"	f	namespace:btrblocks::files	signature:(const YAML::Node& schema, const string& columns_dir, const string& only_type)
btrblocks::files::readDirectory	btrfiles/btrfiles.hpp	/^Relation readDirectory(const YAML::Node& schema, const string& columns_dir, const string& only_type = "");$/;"	p	namespace:btrblocks::files	signature:(const YAML::Node& schema, const string& columns_dir, const string& only_type = Ó)
btrblocks::integers	btrblocks/scheme/integer/DynamicDictionary.cpp	/^namespace btrblocks::integers {$/;"	n	class:btrblocks	file:
btrblocks::integers	btrblocks/scheme/integer/DynamicDictionary.hpp	/^namespace btrblocks::integers {$/;"	n	class:btrblocks
btrblocks::integers	btrblocks/scheme/integer/Frequency.cpp	/^namespace btrblocks::integers {$/;"	n	class:btrblocks	file:
btrblocks::integers	btrblocks/scheme/integer/Frequency.hpp	/^namespace btrblocks::integers {$/;"	n	class:btrblocks
btrblocks::integers	btrblocks/scheme/integer/PBP.cpp	/^namespace btrblocks::integers {$/;"	n	class:btrblocks	file:
btrblocks::integers	btrblocks/scheme/integer/PBP.hpp	/^namespace btrblocks::integers {$/;"	n	class:btrblocks
btrblocks::integers	btrblocks/scheme/integer/RLE.cpp	/^namespace btrblocks::integers {$/;"	n	class:btrblocks	file:
btrblocks::integers	btrblocks/scheme/integer/RLE.hpp	/^namespace btrblocks::integers {$/;"	n	class:btrblocks
btrblocks::integers::DynamicDictionary	btrblocks/scheme/integer/DynamicDictionary.hpp	/^class DynamicDictionary : public IntegerScheme {$/;"	c	namespace:btrblocks::integers	inherits:IntegerScheme
btrblocks::integers::DynamicDictionary::compress	btrblocks/scheme/integer/DynamicDictionary.cpp	/^u32 DynamicDictionary::compress(const INTEGER* src,$/;"	f	class:btrblocks::integers::DynamicDictionary	signature:(const INTEGER* src, const BITMAP* nullmap, u8* dest, SInteger32Stats& stats, u8 allowed_cascading_level)
btrblocks::integers::DynamicDictionary::decompress	btrblocks/scheme/integer/DynamicDictionary.cpp	/^void DynamicDictionary::decompress(INTEGER* dest,$/;"	f	class:btrblocks::integers::DynamicDictionary	signature:(INTEGER* dest, BitmapWrapper* nullmap, const u8* src, u32 tuple_count, u32 level)
btrblocks::integers::DynamicDictionary::expectedCompressionRatio	btrblocks/scheme/integer/DynamicDictionary.cpp	/^double DynamicDictionary::expectedCompressionRatio(SInteger32Stats& stats,$/;"	f	class:btrblocks::integers::DynamicDictionary	signature:(SInteger32Stats& stats, u8 allowed_cascading_level)
btrblocks::integers::DynamicDictionary::fullDescription	btrblocks/scheme/integer/DynamicDictionary.cpp	/^string DynamicDictionary::fullDescription(const u8* src) {$/;"	f	class:btrblocks::integers::DynamicDictionary	signature:(const u8* src)
btrblocks::integers::DynamicDictionary::lookup	btrblocks/scheme/integer/DynamicDictionary.cpp	/^INTEGER DynamicDictionary::lookup(u32) {$/;"	f	class:btrblocks::integers::DynamicDictionary	signature:(u32)
btrblocks::integers::DynamicDictionary::override	btrblocks/scheme/integer/DynamicDictionary.hpp	/^                  u32 level) override;$/;"	m	class:btrblocks::integers::DynamicDictionary	access:public
btrblocks::integers::DynamicDictionary::override	btrblocks/scheme/integer/DynamicDictionary.hpp	/^               u8 allowed_cascading_level) override;$/;"	m	class:btrblocks::integers::DynamicDictionary	access:public
btrblocks::integers::DynamicDictionary::override	btrblocks/scheme/integer/DynamicDictionary.hpp	/^  INTEGER lookup(u32) override;$/;"	m	class:btrblocks::integers::DynamicDictionary	access:public
btrblocks::integers::DynamicDictionary::override	btrblocks/scheme/integer/DynamicDictionary.hpp	/^  double expectedCompressionRatio(SInteger32Stats& stats, u8 allowed_cascading_level) override;$/;"	m	class:btrblocks::integers::DynamicDictionary	access:public
btrblocks::integers::DynamicDictionary::override	btrblocks/scheme/integer/DynamicDictionary.hpp	/^  std::string fullDescription(const u8* src) override;$/;"	m	class:btrblocks::integers::DynamicDictionary	access:public
btrblocks::integers::DynamicDictionary::override	btrblocks/scheme/integer/DynamicDictionary.hpp	/^  void scan(Predicate, BITMAP*, const u8*, u32) override;$/;"	m	class:btrblocks::integers::DynamicDictionary	access:public
btrblocks::integers::DynamicDictionary::scan	btrblocks/scheme/integer/DynamicDictionary.cpp	/^void DynamicDictionary::scan(Predicate, BITMAP*, const u8*, u32) {$/;"	f	class:btrblocks::integers::DynamicDictionary	signature:(Predicate, BITMAP*, const u8*, u32)
btrblocks::integers::DynamicDictionary::staticSchemeType	btrblocks/scheme/integer/DynamicDictionary.hpp	/^  inline static IntegerSchemeType staticSchemeType() { return IntegerSchemeType::DICT; }$/;"	f	class:btrblocks::integers::DynamicDictionary	access:public	signature:()
btrblocks::integers::DynamicDictionaryStructure	btrblocks/scheme/integer/DynamicDictionary.hpp	/^struct DynamicDictionaryStructure {$/;"	s	namespace:btrblocks::integers
btrblocks::integers::DynamicDictionaryStructure::codes_offset	btrblocks/scheme/integer/DynamicDictionary.hpp	/^  u32 codes_offset;$/;"	m	struct:btrblocks::integers::DynamicDictionaryStructure	access:public
btrblocks::integers::DynamicDictionaryStructure::codes_scheme_code	btrblocks/scheme/integer/DynamicDictionary.hpp	/^  u8 codes_scheme_code;$/;"	m	struct:btrblocks::integers::DynamicDictionaryStructure	access:public
btrblocks::integers::DynamicDictionaryStructure::data	btrblocks/scheme/integer/DynamicDictionary.hpp	/^  u8 data[];$/;"	m	struct:btrblocks::integers::DynamicDictionaryStructure	access:public
btrblocks::integers::EXP_FBP	btrblocks/scheme/integer/PBP.hpp	/^class EXP_FBP : public IntegerScheme {$/;"	c	namespace:btrblocks::integers	inherits:IntegerScheme
btrblocks::integers::EXP_FBP::compress	btrblocks/scheme/integer/PBP.cpp	/^u32 EXP_FBP::compress(const INTEGER* src, const BITMAP*, u8* dest, SInteger32Stats& stats, u8) {$/;"	f	class:btrblocks::integers::EXP_FBP	signature:(const INTEGER* src, const BITMAP*, u8* dest, SInteger32Stats& stats, u8)
btrblocks::integers::EXP_FBP::decompress	btrblocks/scheme/integer/PBP.cpp	/^void EXP_FBP::decompress(INTEGER* dest, BitmapWrapper*, const u8* src, u32 tuple_count, u32 level) {$/;"	f	class:btrblocks::integers::EXP_FBP	signature:(INTEGER* dest, BitmapWrapper*, const u8* src, u32 tuple_count, u32 level)
btrblocks::integers::EXP_FBP::expectedCompressionRatio	btrblocks/scheme/integer/PBP.cpp	/^double EXP_FBP::expectedCompressionRatio(SInteger32Stats& stats, u8 allowed_cascading_level) {$/;"	f	class:btrblocks::integers::EXP_FBP	signature:(SInteger32Stats& stats, u8 allowed_cascading_level)
btrblocks::integers::EXP_FBP::lookup	btrblocks/scheme/integer/PBP.cpp	/^INTEGER EXP_FBP::lookup(u32) {$/;"	f	class:btrblocks::integers::EXP_FBP	signature:(u32)
btrblocks::integers::EXP_FBP::override	btrblocks/scheme/integer/PBP.hpp	/^                  u32 level) override;$/;"	m	class:btrblocks::integers::EXP_FBP	access:public
btrblocks::integers::EXP_FBP::override	btrblocks/scheme/integer/PBP.hpp	/^               u8 allowed_cascading_level) override;$/;"	m	class:btrblocks::integers::EXP_FBP	access:public
btrblocks::integers::EXP_FBP::override	btrblocks/scheme/integer/PBP.hpp	/^  INTEGER lookup(u32) override;$/;"	m	class:btrblocks::integers::EXP_FBP	access:public
btrblocks::integers::EXP_FBP::override	btrblocks/scheme/integer/PBP.hpp	/^  double expectedCompressionRatio(SInteger32Stats& stats, u8 allowed_cascading_level) override;$/;"	m	class:btrblocks::integers::EXP_FBP	access:public
btrblocks::integers::EXP_FBP::override	btrblocks/scheme/integer/PBP.hpp	/^  void scan(Predicate, BITMAP*, const u8*, u32) override;$/;"	m	class:btrblocks::integers::EXP_FBP	access:public
btrblocks::integers::EXP_FBP::scan	btrblocks/scheme/integer/PBP.cpp	/^void EXP_FBP::scan(Predicate, BITMAP*, const u8*, u32) {$/;"	f	class:btrblocks::integers::EXP_FBP	signature:(Predicate, BITMAP*, const u8*, u32)
btrblocks::integers::EXP_FBP::staticSchemeType	btrblocks/scheme/integer/PBP.hpp	/^  inline static IntegerSchemeType staticSchemeType() { return IntegerSchemeType::BP; }$/;"	f	class:btrblocks::integers::EXP_FBP	access:public	signature:()
btrblocks::integers::FBP	btrblocks/scheme/integer/PBP.hpp	/^class FBP : public IntegerScheme {$/;"	c	namespace:btrblocks::integers	inherits:IntegerScheme
btrblocks::integers::FBP64	btrblocks/scheme/integer/PBP.hpp	/^class FBP64 {$/;"	c	namespace:btrblocks::integers
btrblocks::integers::FBP64::compress	btrblocks/scheme/integer/PBP.cpp	/^u32 FBP64::compress(u64* src, u8* dest, u32 tuple_count) {$/;"	f	class:btrblocks::integers::FBP64	signature:(u64* src, u8* dest, u32 tuple_count)
btrblocks::integers::FBP64::compress	btrblocks/scheme/integer/PBP.hpp	/^  static u32 compress(u64* src, u8* dest, u32 tuple_count);$/;"	p	class:btrblocks::integers::FBP64	access:public	signature:(u64* src, u8* dest, u32 tuple_count)
btrblocks::integers::FBP64::decompress	btrblocks/scheme/integer/PBP.cpp	/^void FBP64::decompress(u8* dest, const u8* src, u32 tuple_count, u32 level) {$/;"	f	class:btrblocks::integers::FBP64	signature:(u8* dest, const u8* src, u32 tuple_count, u32 level)
btrblocks::integers::FBP64::decompress	btrblocks/scheme/integer/PBP.hpp	/^  static void decompress(u8* dest, const u8* src, u32 tuple_count, u32 level);$/;"	p	class:btrblocks::integers::FBP64	access:public	signature:(u8* dest, const u8* src, u32 tuple_count, u32 level)
btrblocks::integers::FBP::compress	btrblocks/scheme/integer/PBP.cpp	/^u32 FBP::compress(const INTEGER* src, const BITMAP*, u8* dest, SInteger32Stats& stats, u8) {$/;"	f	class:btrblocks::integers::FBP	signature:(const INTEGER* src, const BITMAP*, u8* dest, SInteger32Stats& stats, u8)
btrblocks::integers::FBP::decompress	btrblocks/scheme/integer/PBP.cpp	/^void FBP::decompress(INTEGER* dest, BitmapWrapper*, const u8* src, u32 tuple_count, u32 level) {$/;"	f	class:btrblocks::integers::FBP	signature:(INTEGER* dest, BitmapWrapper*, const u8* src, u32 tuple_count, u32 level)
btrblocks::integers::FBP::expectedCompressionRatio	btrblocks/scheme/integer/PBP.cpp	/^double FBP::expectedCompressionRatio(SInteger32Stats& stats, u8 allowed_cascading_level) {$/;"	f	class:btrblocks::integers::FBP	signature:(SInteger32Stats& stats, u8 allowed_cascading_level)
btrblocks::integers::FBP::lookup	btrblocks/scheme/integer/PBP.cpp	/^INTEGER FBP::lookup(u32) {$/;"	f	class:btrblocks::integers::FBP	signature:(u32)
btrblocks::integers::FBP::override	btrblocks/scheme/integer/PBP.hpp	/^                  u32 level) override;$/;"	m	class:btrblocks::integers::FBP	access:public
btrblocks::integers::FBP::override	btrblocks/scheme/integer/PBP.hpp	/^               u8 allowed_cascading_level) override;$/;"	m	class:btrblocks::integers::FBP	access:public
btrblocks::integers::FBP::override	btrblocks/scheme/integer/PBP.hpp	/^  INTEGER lookup(u32) override;$/;"	m	class:btrblocks::integers::FBP	access:public
btrblocks::integers::FBP::override	btrblocks/scheme/integer/PBP.hpp	/^  double expectedCompressionRatio(SInteger32Stats& stats, u8 allowed_cascading_level) override;$/;"	m	class:btrblocks::integers::FBP	access:public
btrblocks::integers::FBP::override	btrblocks/scheme/integer/PBP.hpp	/^  void scan(Predicate, BITMAP*, const u8*, u32) override;$/;"	m	class:btrblocks::integers::FBP	access:public
btrblocks::integers::FBP::scan	btrblocks/scheme/integer/PBP.cpp	/^void FBP::scan(Predicate, BITMAP*, const u8*, u32) {$/;"	f	class:btrblocks::integers::FBP	signature:(Predicate, BITMAP*, const u8*, u32)
btrblocks::integers::FBP::staticSchemeType	btrblocks/scheme/integer/PBP.hpp	/^  inline static IntegerSchemeType staticSchemeType() { return IntegerSchemeType::BP; }$/;"	f	class:btrblocks::integers::FBP	access:public	signature:()
btrblocks::integers::Frequency	btrblocks/scheme/integer/Frequency.hpp	/^class Frequency : public IntegerScheme {$/;"	c	namespace:btrblocks::integers	inherits:IntegerScheme
btrblocks::integers::Frequency::compress	btrblocks/scheme/integer/Frequency.cpp	/^u32 Frequency::compress(const INTEGER* src,$/;"	f	class:btrblocks::integers::Frequency	signature:(const INTEGER* src, const BITMAP* nullmap, u8* dest, SInteger32Stats& stats, u8 allowed_cascading_level)
btrblocks::integers::Frequency::decompress	btrblocks/scheme/integer/Frequency.cpp	/^void Frequency::decompress(INTEGER* dest,$/;"	f	class:btrblocks::integers::Frequency	signature:(INTEGER* dest, BitmapWrapper* nullmap, const u8* src, u32 tuple_count, u32 level)
btrblocks::integers::Frequency::expectedCompressionRatio	btrblocks/scheme/integer/Frequency.cpp	/^double Frequency::expectedCompressionRatio(SInteger32Stats& stats, u8 allowed_cascading_level) {$/;"	f	class:btrblocks::integers::Frequency	signature:(SInteger32Stats& stats, u8 allowed_cascading_level)
btrblocks::integers::Frequency::fullDescription	btrblocks/scheme/integer/Frequency.cpp	/^std::string Frequency::fullDescription(const u8* src) {$/;"	f	class:btrblocks::integers::Frequency	signature:(const u8* src)
btrblocks::integers::Frequency::lookup	btrblocks/scheme/integer/Frequency.cpp	/^INTEGER Frequency::lookup(u32) {$/;"	f	class:btrblocks::integers::Frequency	signature:(u32)
btrblocks::integers::Frequency::override	btrblocks/scheme/integer/Frequency.hpp	/^                  u32 level) override;$/;"	m	class:btrblocks::integers::Frequency	access:public
btrblocks::integers::Frequency::override	btrblocks/scheme/integer/Frequency.hpp	/^               u8 allowed_cascading_level) override;$/;"	m	class:btrblocks::integers::Frequency	access:public
btrblocks::integers::Frequency::override	btrblocks/scheme/integer/Frequency.hpp	/^  INTEGER lookup(u32) override;$/;"	m	class:btrblocks::integers::Frequency	access:public
btrblocks::integers::Frequency::override	btrblocks/scheme/integer/Frequency.hpp	/^  double expectedCompressionRatio(SInteger32Stats& stats, u8 allowed_cascading_level) override;$/;"	m	class:btrblocks::integers::Frequency	access:public
btrblocks::integers::Frequency::override	btrblocks/scheme/integer/Frequency.hpp	/^  std::string fullDescription(const u8* src) override;$/;"	m	class:btrblocks::integers::Frequency	access:public
btrblocks::integers::Frequency::override	btrblocks/scheme/integer/Frequency.hpp	/^  void scan(Predicate, BITMAP*, const u8*, u32) override;$/;"	m	class:btrblocks::integers::Frequency	access:public
btrblocks::integers::Frequency::scan	btrblocks/scheme/integer/Frequency.cpp	/^void Frequency::scan(Predicate, BITMAP*, const u8*, u32) {$/;"	f	class:btrblocks::integers::Frequency	signature:(Predicate, BITMAP*, const u8*, u32)
btrblocks::integers::Frequency::staticSchemeType	btrblocks/scheme/integer/Frequency.hpp	/^  inline static IntegerSchemeType staticSchemeType() { return IntegerSchemeType::FREQUENCY; }$/;"	f	class:btrblocks::integers::Frequency	access:public	signature:()
btrblocks::integers::FrequencyStructure	btrblocks/scheme/integer/Frequency.hpp	/^struct FrequencyStructure {$/;"	s	namespace:btrblocks::integers
btrblocks::integers::FrequencyStructure::data	btrblocks/scheme/integer/Frequency.hpp	/^  u8 data[];$/;"	m	struct:btrblocks::integers::FrequencyStructure	access:public
btrblocks::integers::FrequencyStructure::exceptions_offset	btrblocks/scheme/integer/Frequency.hpp	/^  u32 exceptions_offset;$/;"	m	struct:btrblocks::integers::FrequencyStructure	access:public
btrblocks::integers::FrequencyStructure::next_scheme	btrblocks/scheme/integer/Frequency.hpp	/^  u8 next_scheme;$/;"	m	struct:btrblocks::integers::FrequencyStructure	access:public
btrblocks::integers::FrequencyStructure::top_value	btrblocks/scheme/integer/Frequency.hpp	/^  UINTEGER top_value;$/;"	m	struct:btrblocks::integers::FrequencyStructure	access:public
btrblocks::integers::PBP	btrblocks/scheme/integer/PBP.hpp	/^class PBP : public IntegerScheme {$/;"	c	namespace:btrblocks::integers	inherits:IntegerScheme
btrblocks::integers::PBP::compress	btrblocks/scheme/integer/PBP.cpp	/^u32 PBP::compress(const INTEGER* src, const BITMAP*, u8* dest, SInteger32Stats& stats, u8) {$/;"	f	class:btrblocks::integers::PBP	signature:(const INTEGER* src, const BITMAP*, u8* dest, SInteger32Stats& stats, u8)
btrblocks::integers::PBP::decompress	btrblocks/scheme/integer/PBP.cpp	/^void PBP::decompress(INTEGER* dest, BitmapWrapper*, const u8* src, u32 tuple_count, u32 level) {$/;"	f	class:btrblocks::integers::PBP	signature:(INTEGER* dest, BitmapWrapper*, const u8* src, u32 tuple_count, u32 level)
btrblocks::integers::PBP::lookup	btrblocks/scheme/integer/PBP.cpp	/^INTEGER PBP::lookup(u32) {$/;"	f	class:btrblocks::integers::PBP	signature:(u32)
btrblocks::integers::PBP::override	btrblocks/scheme/integer/PBP.hpp	/^                  u32 level) override;$/;"	m	class:btrblocks::integers::PBP	access:public
btrblocks::integers::PBP::override	btrblocks/scheme/integer/PBP.hpp	/^               u8 allowed_cascading_level) override;$/;"	m	class:btrblocks::integers::PBP	access:public
btrblocks::integers::PBP::override	btrblocks/scheme/integer/PBP.hpp	/^  INTEGER lookup(u32) override;$/;"	m	class:btrblocks::integers::PBP	access:public
btrblocks::integers::PBP::override	btrblocks/scheme/integer/PBP.hpp	/^  void scan(Predicate, BITMAP*, const u8*, u32) override;$/;"	m	class:btrblocks::integers::PBP	access:public
btrblocks::integers::PBP::scan	btrblocks/scheme/integer/PBP.cpp	/^void PBP::scan(Predicate, BITMAP*, const u8*, u32) {$/;"	f	class:btrblocks::integers::PBP	signature:(Predicate, BITMAP*, const u8*, u32)
btrblocks::integers::PBP::staticSchemeType	btrblocks/scheme/integer/PBP.hpp	/^  inline static IntegerSchemeType staticSchemeType() { return IntegerSchemeType::PFOR; }$/;"	f	class:btrblocks::integers::PBP	access:public	signature:()
btrblocks::integers::PBP_DELTA	btrblocks/scheme/integer/PBP.hpp	/^class PBP_DELTA : public IntegerScheme {$/;"	c	namespace:btrblocks::integers	inherits:IntegerScheme
btrblocks::integers::PBP_DELTA::compress	btrblocks/scheme/integer/PBP.cpp	/^u32 PBP_DELTA::compress(const INTEGER* src, const BITMAP*, u8* dest, SInteger32Stats& stats, u8) {$/;"	f	class:btrblocks::integers::PBP_DELTA	signature:(const INTEGER* src, const BITMAP*, u8* dest, SInteger32Stats& stats, u8)
btrblocks::integers::PBP_DELTA::decompress	btrblocks/scheme/integer/PBP.cpp	/^void PBP_DELTA::decompress(INTEGER* dest,$/;"	f	class:btrblocks::integers::PBP_DELTA	signature:(INTEGER* dest, BitmapWrapper*, const u8* src, u32 tuple_count, u32 level)
btrblocks::integers::PBP_DELTA::expectedCompressionRatio	btrblocks/scheme/integer/PBP.cpp	/^double PBP_DELTA::expectedCompressionRatio(SInteger32Stats& stats, u8 allowed_cascading_level) {$/;"	f	class:btrblocks::integers::PBP_DELTA	signature:(SInteger32Stats& stats, u8 allowed_cascading_level)
btrblocks::integers::PBP_DELTA::lookup	btrblocks/scheme/integer/PBP.cpp	/^INTEGER PBP_DELTA::lookup(u32) {$/;"	f	class:btrblocks::integers::PBP_DELTA	signature:(u32)
btrblocks::integers::PBP_DELTA::override	btrblocks/scheme/integer/PBP.hpp	/^                  u32 level) override;$/;"	m	class:btrblocks::integers::PBP_DELTA	access:public
btrblocks::integers::PBP_DELTA::override	btrblocks/scheme/integer/PBP.hpp	/^               u8 allowed_cascading_level) override;$/;"	m	class:btrblocks::integers::PBP_DELTA	access:public
btrblocks::integers::PBP_DELTA::override	btrblocks/scheme/integer/PBP.hpp	/^  INTEGER lookup(u32) override;$/;"	m	class:btrblocks::integers::PBP_DELTA	access:public
btrblocks::integers::PBP_DELTA::override	btrblocks/scheme/integer/PBP.hpp	/^  double expectedCompressionRatio(SInteger32Stats& stats, u8 allowed_cascading_level) override;$/;"	m	class:btrblocks::integers::PBP_DELTA	access:public
btrblocks::integers::PBP_DELTA::override	btrblocks/scheme/integer/PBP.hpp	/^  void scan(Predicate, BITMAP*, const u8*, u32) override;$/;"	m	class:btrblocks::integers::PBP_DELTA	access:public
btrblocks::integers::PBP_DELTA::scan	btrblocks/scheme/integer/PBP.cpp	/^void PBP_DELTA::scan(Predicate, BITMAP*, const u8*, u32) {$/;"	f	class:btrblocks::integers::PBP_DELTA	signature:(Predicate, BITMAP*, const u8*, u32)
btrblocks::integers::PBP_DELTA::staticSchemeType	btrblocks/scheme/integer/PBP.hpp	/^  inline static IntegerSchemeType staticSchemeType() { return IntegerSchemeType::PFOR_DELTA; }$/;"	f	class:btrblocks::integers::PBP_DELTA	access:public	signature:()
btrblocks::integers::RLE	btrblocks/scheme/integer/RLE.hpp	/^class RLE : public IntegerScheme {$/;"	c	namespace:btrblocks::integers	inherits:IntegerScheme
btrblocks::integers::RLE::compress	btrblocks/scheme/integer/RLE.cpp	/^u32 RLE::compress(const INTEGER* src,$/;"	f	class:btrblocks::integers::RLE	signature:(const INTEGER* src, const BITMAP* nullmap, u8* dest, SInteger32Stats& stats, u8 allowed_cascading_level)
btrblocks::integers::RLE::decompress	btrblocks/scheme/integer/RLE.cpp	/^void RLE::decompress(INTEGER* dest,$/;"	f	class:btrblocks::integers::RLE	signature:(INTEGER* dest, BitmapWrapper* nullmap, const u8* src, u32 tuple_count, u32 level)
btrblocks::integers::RLE::decompressRuns	btrblocks/scheme/integer/RLE.cpp	/^u32 RLE::decompressRuns(INTEGER* values,$/;"	f	class:btrblocks::integers::RLE	signature:(INTEGER* values, INTEGER* counts, BitmapWrapper* nullmap, const u8* src, u32 tuple_count, u32 level)
btrblocks::integers::RLE::decompressRuns	btrblocks/scheme/integer/RLE.hpp	/^  u32 decompressRuns(INTEGER* values,$/;"	p	class:btrblocks::integers::RLE	access:public	signature:(INTEGER* values, INTEGER* counts, BitmapWrapper* nullmap, const u8* src, u32 tuple_count, u32 level)
btrblocks::integers::RLE::expectedCompressionRatio	btrblocks/scheme/integer/RLE.cpp	/^double RLE::expectedCompressionRatio(SInteger32Stats& stats, u8 allowed_cascading_level) {$/;"	f	class:btrblocks::integers::RLE	signature:(SInteger32Stats& stats, u8 allowed_cascading_level)
btrblocks::integers::RLE::fullDescription	btrblocks/scheme/integer/RLE.cpp	/^std::string RLE::fullDescription(const u8* src) {$/;"	f	class:btrblocks::integers::RLE	signature:(const u8* src)
btrblocks::integers::RLE::lookup	btrblocks/scheme/integer/RLE.cpp	/^INTEGER RLE::lookup(u32) {$/;"	f	class:btrblocks::integers::RLE	signature:(u32)
btrblocks::integers::RLE::override	btrblocks/scheme/integer/RLE.hpp	/^                  u32 level) override;$/;"	m	class:btrblocks::integers::RLE	access:public
btrblocks::integers::RLE::override	btrblocks/scheme/integer/RLE.hpp	/^               u8 allowed_cascading_level) override;$/;"	m	class:btrblocks::integers::RLE	access:public
btrblocks::integers::RLE::override	btrblocks/scheme/integer/RLE.hpp	/^  INTEGER lookup(u32) override;$/;"	m	class:btrblocks::integers::RLE	access:public
btrblocks::integers::RLE::override	btrblocks/scheme/integer/RLE.hpp	/^  double expectedCompressionRatio(SInteger32Stats& stats, u8 allowed_cascading_level) override;$/;"	m	class:btrblocks::integers::RLE	access:public
btrblocks::integers::RLE::override	btrblocks/scheme/integer/RLE.hpp	/^  std::string fullDescription(const u8* src) override;$/;"	m	class:btrblocks::integers::RLE	access:public
btrblocks::integers::RLE::override	btrblocks/scheme/integer/RLE.hpp	/^  void scan(Predicate, BITMAP*, const u8*, u32) override;$/;"	m	class:btrblocks::integers::RLE	access:public
btrblocks::integers::RLE::scan	btrblocks/scheme/integer/RLE.cpp	/^void RLE::scan(Predicate, BITMAP*, const u8*, u32) {$/;"	f	class:btrblocks::integers::RLE	signature:(Predicate, BITMAP*, const u8*, u32)
btrblocks::integers::RLE::staticSchemeType	btrblocks/scheme/integer/RLE.hpp	/^  inline static IntegerSchemeType staticSchemeType() { return IntegerSchemeType::RLE; }$/;"	f	class:btrblocks::integers::RLE	access:public	signature:()
btrblocks::integers::RLEStructure	btrblocks/scheme/integer/RLE.hpp	/^struct RLEStructure {$/;"	s	namespace:btrblocks::integers
btrblocks::integers::RLEStructure::counts_scheme_code	btrblocks/scheme/integer/RLE.hpp	/^  u8 counts_scheme_code;$/;"	m	struct:btrblocks::integers::RLEStructure	access:public
btrblocks::integers::RLEStructure::data	btrblocks/scheme/integer/RLE.hpp	/^  u8 data[];$/;"	m	struct:btrblocks::integers::RLEStructure	access:public
btrblocks::integers::RLEStructure::runs_count	btrblocks/scheme/integer/RLE.hpp	/^  u32 runs_count;$/;"	m	struct:btrblocks::integers::RLEStructure	access:public
btrblocks::integers::RLEStructure::runs_count_offset	btrblocks/scheme/integer/RLE.hpp	/^  u32 runs_count_offset;$/;"	m	struct:btrblocks::integers::RLEStructure	access:public
btrblocks::integers::RLEStructure::values_scheme_code	btrblocks/scheme/integer/RLE.hpp	/^  u8 values_scheme_code;$/;"	m	struct:btrblocks::integers::RLEStructure	access:public
btrblocks::integers::XPBPStructure	btrblocks/scheme/integer/PBP.hpp	/^struct XPBPStructure {  \/\/ need to be aligned by 4 because of$/;"	s	namespace:btrblocks::integers
btrblocks::integers::XPBPStructure::data	btrblocks/scheme/integer/PBP.hpp	/^  u8 data[];$/;"	m	struct:btrblocks::integers::XPBPStructure	access:public
btrblocks::integers::XPBPStructure::padding	btrblocks/scheme/integer/PBP.hpp	/^  u8 padding;$/;"	m	struct:btrblocks::integers::XPBPStructure	access:public
btrblocks::integers::XPBPStructure::u32_count	btrblocks/scheme/integer/PBP.hpp	/^  u32 u32_count;        \/\/ number of 4 bytes written by FastPFor$/;"	m	struct:btrblocks::integers::XPBPStructure	access:public
btrblocks::legacy	btrblocks/scheme/templated/VarDictionary.hpp	/^namespace btrblocks::legacy {$/;"	n	class:btrblocks
btrblocks::legacy::VDictCompressColumn	btrblocks/scheme/templated/VarDictionary.hpp	/^inline u32 VDictCompressColumn(const StringArrayViewer src,$/;"	f	namespace:btrblocks::legacy	signature:(const StringArrayViewer src, const BITMAP*, u8* dest, StringStats& stats)
btrblocks::legacy::VDictDecompressColumn	btrblocks/scheme/templated/VarDictionary.hpp	/^inline void VDictDecompressColumn(u8* dest,$/;"	f	namespace:btrblocks::legacy	signature:(u8* dest, BitmapWrapper*, const u8* src, u32 tuple_count, u32 level)
btrblocks::legacy::VDictExpectedCompressionRatio	btrblocks/scheme/templated/VarDictionary.hpp	/^inline double VDictExpectedCompressionRatio(StringStats& stats) {$/;"	f	namespace:btrblocks::legacy	signature:(StringStats& stats)
btrblocks::legacy::VDictGetDecompressedSize	btrblocks/scheme/templated/VarDictionary.hpp	/^inline u32 VDictGetDecompressedSize(const u8* src, u32) {$/;"	f	namespace:btrblocks::legacy	signature:(const u8* src, u32)
btrblocks::legacy::VarDictionaryStructure	btrblocks/scheme/templated/VarDictionary.hpp	/^struct VarDictionaryStructure {$/;"	s	namespace:btrblocks::legacy
btrblocks::legacy::VarDictionaryStructure::codes_offset	btrblocks/scheme/templated/VarDictionary.hpp	/^  u32 codes_offset;$/;"	m	struct:btrblocks::legacy::VarDictionaryStructure	access:public
btrblocks::legacy::VarDictionaryStructure::data	btrblocks/scheme/templated/VarDictionary.hpp	/^  u8 data[];$/;"	m	struct:btrblocks::legacy::VarDictionaryStructure	access:public
btrblocks::legacy::VarDictionaryStructure::total_size	btrblocks/scheme/templated/VarDictionary.hpp	/^  u32 total_size;$/;"	m	struct:btrblocks::legacy::VarDictionaryStructure	access:public
btrblocks::legacy::doubles	btrblocks/scheme/double/FixedDictionary.hpp	/^namespace btrblocks::legacy::doubles {$/;"	n	class:btrblocks::legacy
btrblocks::legacy::doubles	btrblocks/scheme/double/Frequency.cpp	/^namespace btrblocks::legacy::doubles {$/;"	n	class:btrblocks::legacy	file:
btrblocks::legacy::doubles	btrblocks/scheme/double/Frequency.hpp	/^namespace btrblocks::legacy::doubles {$/;"	n	class:btrblocks::legacy
btrblocks::legacy::doubles	btrblocks/scheme/double/MaxExponent.cpp	/^namespace btrblocks::legacy::doubles {$/;"	n	class:btrblocks::legacy	file:
btrblocks::legacy::doubles	btrblocks/scheme/double/MaxExponent.hpp	/^namespace btrblocks::legacy::doubles {$/;"	n	class:btrblocks::legacy
btrblocks::legacy::doubles	btrblocks/scheme/double/OneValue.cpp	/^namespace btrblocks::legacy::doubles {$/;"	n	class:btrblocks::legacy	file:
btrblocks::legacy::doubles	btrblocks/scheme/double/OneValue.hpp	/^namespace btrblocks::legacy::doubles {$/;"	n	class:btrblocks::legacy
btrblocks::legacy::doubles	btrblocks/scheme/double/Uncompressed.cpp	/^namespace btrblocks::legacy::doubles {$/;"	n	class:btrblocks::legacy	file:
btrblocks::legacy::doubles	btrblocks/scheme/double/Uncompressed.hpp	/^namespace btrblocks::legacy::doubles {$/;"	n	class:btrblocks::legacy
btrblocks::legacy::doubles::Dictionary16	btrblocks/scheme/double/FixedDictionary.hpp	/^class Dictionary16 : public DoubleScheme {$/;"	c	namespace:btrblocks::legacy::doubles	inherits:DoubleScheme
btrblocks::legacy::doubles::Dictionary16::staticSchemeType	btrblocks/scheme/double/FixedDictionary.hpp	/^  inline static DoubleSchemeType staticSchemeType() { return DoubleSchemeType::DICTIONARY_16; }$/;"	f	class:btrblocks::legacy::doubles::Dictionary16	access:public	signature:()
btrblocks::legacy::doubles::Dictionary8	btrblocks/scheme/double/FixedDictionary.hpp	/^class Dictionary8 : public DoubleScheme {$/;"	c	namespace:btrblocks::legacy::doubles	inherits:DoubleScheme
btrblocks::legacy::doubles::Dictionary8::staticSchemeType	btrblocks/scheme/double/FixedDictionary.hpp	/^  inline static DoubleSchemeType staticSchemeType() { return DoubleSchemeType::DICTIONARY_8; }$/;"	f	class:btrblocks::legacy::doubles::Dictionary8	access:public	signature:()
btrblocks::legacy::doubles::Frequency	btrblocks/scheme/double/Frequency.hpp	/^class Frequency : public DoubleScheme {$/;"	c	namespace:btrblocks::legacy::doubles	inherits:DoubleScheme
btrblocks::legacy::doubles::Frequency::compress	btrblocks/scheme/double/Frequency.cpp	/^u32 Frequency::compress(const DOUBLE* src,$/;"	f	class:btrblocks::legacy::doubles::Frequency	signature:(const DOUBLE* src, const BITMAP* nullmap, u8* dest, DoubleStats& stats, u8 allowed_cascading_level)
btrblocks::legacy::doubles::Frequency::decompress	btrblocks/scheme/double/Frequency.cpp	/^void Frequency::decompress(DOUBLE* dest,$/;"	f	class:btrblocks::legacy::doubles::Frequency	signature:(DOUBLE* dest, BitmapWrapper* nullmap, const u8* src, u32 tuple_count, u32 level)
btrblocks::legacy::doubles::Frequency::expectedCompressionRatio	btrblocks/scheme/double/Frequency.cpp	/^double Frequency::expectedCompressionRatio(DoubleStats& stats, u8 allowed_cascading_level) {$/;"	f	class:btrblocks::legacy::doubles::Frequency	signature:(DoubleStats& stats, u8 allowed_cascading_level)
btrblocks::legacy::doubles::Frequency::fullDescription	btrblocks/scheme/double/Frequency.cpp	/^string Frequency::fullDescription(const u8* src) {$/;"	f	class:btrblocks::legacy::doubles::Frequency	signature:(const u8* src)
btrblocks::legacy::doubles::Frequency::override	btrblocks/scheme/double/Frequency.hpp	/^                  u32 level) override;$/;"	m	class:btrblocks::legacy::doubles::Frequency	access:public
btrblocks::legacy::doubles::Frequency::override	btrblocks/scheme/double/Frequency.hpp	/^               u8 allowed_cascading_level) override;$/;"	m	class:btrblocks::legacy::doubles::Frequency	access:public
btrblocks::legacy::doubles::Frequency::override	btrblocks/scheme/double/Frequency.hpp	/^  double expectedCompressionRatio(DoubleStats& stats, u8 allowed_cascading_level) override;$/;"	m	class:btrblocks::legacy::doubles::Frequency	access:public
btrblocks::legacy::doubles::Frequency::override	btrblocks/scheme/double/Frequency.hpp	/^  std::string fullDescription(const u8* src) override;$/;"	m	class:btrblocks::legacy::doubles::Frequency	access:public
btrblocks::legacy::doubles::Frequency::staticSchemeType	btrblocks/scheme/double/Frequency.hpp	/^  inline static DoubleSchemeType staticSchemeType() { return DoubleSchemeType::FREQUENCY; }$/;"	f	class:btrblocks::legacy::doubles::Frequency	access:public	signature:()
btrblocks::legacy::doubles::MaxExponent	btrblocks/scheme/double/MaxExponent.hpp	/^class MaxExponent : public DoubleScheme {$/;"	c	namespace:btrblocks::legacy::doubles	inherits:DoubleScheme
btrblocks::legacy::doubles::MaxExponent::compress	btrblocks/scheme/double/MaxExponent.cpp	/^u32 MaxExponent::compress(const DOUBLE* src,$/;"	f	class:btrblocks::legacy::doubles::MaxExponent	signature:(const DOUBLE* src, const BITMAP* nullmap, u8* dest, DoubleStats& stats, u8 allowed_cascading_level)
btrblocks::legacy::doubles::MaxExponent::decompress	btrblocks/scheme/double/MaxExponent.cpp	/^void MaxExponent::decompress(DOUBLE* dest,$/;"	f	class:btrblocks::legacy::doubles::MaxExponent	signature:(DOUBLE* dest, BitmapWrapper*, const u8* src, u32 tuple_count, u32 level)
btrblocks::legacy::doubles::MaxExponent::override	btrblocks/scheme/double/MaxExponent.hpp	/^                  u32 level) override;$/;"	m	class:btrblocks::legacy::doubles::MaxExponent	access:public
btrblocks::legacy::doubles::MaxExponent::override	btrblocks/scheme/double/MaxExponent.hpp	/^               u8 allowed_cascading_level) override;$/;"	m	class:btrblocks::legacy::doubles::MaxExponent	access:public
btrblocks::legacy::doubles::MaxExponent::staticSchemeType	btrblocks/scheme/double/MaxExponent.hpp	/^  inline static DoubleSchemeType staticSchemeType() { return DoubleSchemeType::PSEUDODECIMAL; }$/;"	f	class:btrblocks::legacy::doubles::MaxExponent	access:public	signature:()
btrblocks::legacy::doubles::MaxExponentStructure	btrblocks/scheme/double/MaxExponent.hpp	/^struct MaxExponentStructure {$/;"	s	namespace:btrblocks::legacy::doubles
btrblocks::legacy::doubles::MaxExponentStructure::converted_count	btrblocks/scheme/double/MaxExponent.hpp	/^  u32 converted_count;$/;"	m	struct:btrblocks::legacy::doubles::MaxExponentStructure	access:public
btrblocks::legacy::doubles::MaxExponentStructure::data	btrblocks/scheme/double/MaxExponent.hpp	/^  u8 data[];$/;"	m	struct:btrblocks::legacy::doubles::MaxExponentStructure	access:public
btrblocks::legacy::doubles::MaxExponentStructure::exceptions_offset	btrblocks/scheme/double/MaxExponent.hpp	/^  u32 exceptions_offset;$/;"	m	struct:btrblocks::legacy::doubles::MaxExponentStructure	access:public
btrblocks::legacy::doubles::MaxExponentStructure::max_exponent	btrblocks/scheme/double/MaxExponent.hpp	/^  u8 max_exponent;$/;"	m	struct:btrblocks::legacy::doubles::MaxExponentStructure	access:public
btrblocks::legacy::doubles::MaxExponentStructure::negatives_bitmap_offset	btrblocks/scheme/double/MaxExponent.hpp	/^  u32 negatives_bitmap_offset;$/;"	m	struct:btrblocks::legacy::doubles::MaxExponentStructure	access:public
btrblocks::legacy::doubles::MaxExponentStructure::p_offset	btrblocks/scheme/double/MaxExponent.hpp	/^  u32 p_offset;$/;"	m	struct:btrblocks::legacy::doubles::MaxExponentStructure	access:public
btrblocks::legacy::doubles::MaxExponentStructure::p_scheme	btrblocks/scheme/double/MaxExponent.hpp	/^  u8 p_scheme;$/;"	m	struct:btrblocks::legacy::doubles::MaxExponentStructure	access:public
btrblocks::legacy::doubles::MaxExponentStructure::sd_offset	btrblocks/scheme/double/MaxExponent.hpp	/^  u32 sd_offset;$/;"	m	struct:btrblocks::legacy::doubles::MaxExponentStructure	access:public
btrblocks::legacy::doubles::MaxExponentStructure::sd_scheme	btrblocks/scheme/double/MaxExponent.hpp	/^  u8 sd_scheme;$/;"	m	struct:btrblocks::legacy::doubles::MaxExponentStructure	access:public
btrblocks::legacy::doubles::OneValue	btrblocks/scheme/double/OneValue.hpp	/^class OneValue : public DoubleScheme {$/;"	c	namespace:btrblocks::legacy::doubles	inherits:DoubleScheme
btrblocks::legacy::doubles::OneValue::compress	btrblocks/scheme/double/OneValue.cpp	/^u32 OneValue::compress(const DOUBLE* src,$/;"	f	class:btrblocks::legacy::doubles::OneValue	signature:(const DOUBLE* src, const BITMAP* nullmap, u8* dest, DoubleStats& stats, u8 allowed_cascading_level)
btrblocks::legacy::doubles::OneValue::decompress	btrblocks/scheme/double/OneValue.cpp	/^void OneValue::decompress(DOUBLE* dest, BitmapWrapper*, const u8* src, u32 tuple_count, u32 level) {$/;"	f	class:btrblocks::legacy::doubles::OneValue	signature:(DOUBLE* dest, BitmapWrapper*, const u8* src, u32 tuple_count, u32 level)
btrblocks::legacy::doubles::OneValue::expectedCompressionRatio	btrblocks/scheme/double/OneValue.cpp	/^double OneValue::expectedCompressionRatio(DoubleStats& stats, u8 allowed_cascading_level) {$/;"	f	class:btrblocks::legacy::doubles::OneValue	signature:(DoubleStats& stats, u8 allowed_cascading_level)
btrblocks::legacy::doubles::OneValue::override	btrblocks/scheme/double/OneValue.hpp	/^                  u32 level) override;$/;"	m	class:btrblocks::legacy::doubles::OneValue	access:public
btrblocks::legacy::doubles::OneValue::override	btrblocks/scheme/double/OneValue.hpp	/^               u8 allowed_cascading_level) override;$/;"	m	class:btrblocks::legacy::doubles::OneValue	access:public
btrblocks::legacy::doubles::OneValue::override	btrblocks/scheme/double/OneValue.hpp	/^  double expectedCompressionRatio(DoubleStats& stats, u8 allowed_cascading_level) override;$/;"	m	class:btrblocks::legacy::doubles::OneValue	access:public
btrblocks::legacy::doubles::OneValue::staticSchemeType	btrblocks/scheme/double/OneValue.hpp	/^  inline static DoubleSchemeType staticSchemeType() { return DoubleSchemeType::ONE_VALUE; }$/;"	f	class:btrblocks::legacy::doubles::OneValue	access:public	signature:()
btrblocks::legacy::doubles::OneValueStructure	btrblocks/scheme/double/OneValue.hpp	/^struct OneValueStructure {$/;"	s	namespace:btrblocks::legacy::doubles
btrblocks::legacy::doubles::OneValueStructure::one_value	btrblocks/scheme/double/OneValue.hpp	/^  DOUBLE one_value;$/;"	m	struct:btrblocks::legacy::doubles::OneValueStructure	access:public
btrblocks::legacy::doubles::Uncompressed	btrblocks/scheme/double/Uncompressed.hpp	/^class Uncompressed : public DoubleScheme {$/;"	c	namespace:btrblocks::legacy::doubles	inherits:DoubleScheme
btrblocks::legacy::doubles::Uncompressed::compress	btrblocks/scheme/double/Uncompressed.cpp	/^u32 Uncompressed::compress(const DOUBLE* src,$/;"	f	class:btrblocks::legacy::doubles::Uncompressed	signature:(const DOUBLE* src, const BITMAP* nullmap, u8* dest, DoubleStats& stats, u8 allowed_cascading_level)
btrblocks::legacy::doubles::Uncompressed::decompress	btrblocks/scheme/double/Uncompressed.cpp	/^void Uncompressed::decompress(DOUBLE* dest,$/;"	f	class:btrblocks::legacy::doubles::Uncompressed	signature:(DOUBLE* dest, BitmapWrapper*, const u8* src, u32 tuple_count, u32 level)
btrblocks::legacy::doubles::Uncompressed::expectedCompressionRatio	btrblocks/scheme/double/Uncompressed.cpp	/^double Uncompressed::expectedCompressionRatio(DoubleStats& stats, u8 allowed_cascading_level) {$/;"	f	class:btrblocks::legacy::doubles::Uncompressed	signature:(DoubleStats& stats, u8 allowed_cascading_level)
btrblocks::legacy::doubles::Uncompressed::override	btrblocks/scheme/double/Uncompressed.hpp	/^                  u32 level) override;$/;"	m	class:btrblocks::legacy::doubles::Uncompressed	access:public
btrblocks::legacy::doubles::Uncompressed::override	btrblocks/scheme/double/Uncompressed.hpp	/^               u8 allowed_cascading_level) override;$/;"	m	class:btrblocks::legacy::doubles::Uncompressed	access:public
btrblocks::legacy::doubles::Uncompressed::override	btrblocks/scheme/double/Uncompressed.hpp	/^  double expectedCompressionRatio(DoubleStats& stats, u8 allowed_cascading_level) override;$/;"	m	class:btrblocks::legacy::doubles::Uncompressed	access:public
btrblocks::legacy::doubles::Uncompressed::staticSchemeType	btrblocks/scheme/double/Uncompressed.hpp	/^  inline static DoubleSchemeType staticSchemeType() { return DoubleSchemeType::UNCOMPRESSED; }$/;"	f	class:btrblocks::legacy::doubles::Uncompressed	access:public	signature:()
btrblocks::legacy::doubles::exact_powers_of_ten	btrblocks/scheme/double/MaxExponent.cpp	/^static const double exact_powers_of_ten[] = {$/;"	m	namespace:btrblocks::legacy::doubles	file:
btrblocks::legacy::doubles::exponent_exception_code	btrblocks/scheme/double/MaxExponent.cpp	/^const u8 exponent_exception_code = 23;$/;"	m	namespace:btrblocks::legacy::doubles	file:
btrblocks::legacy::doubles::max_exponent	btrblocks/scheme/double/MaxExponent.cpp	/^const u8 max_exponent = 22;$/;"	m	namespace:btrblocks::legacy::doubles	file:
btrblocks::legacy::integers	btrblocks/scheme/integer/FOR.cpp	/^namespace btrblocks::legacy::integers {$/;"	n	class:btrblocks::legacy	file:
btrblocks::legacy::integers	btrblocks/scheme/integer/FOR.hpp	/^namespace btrblocks::legacy::integers {$/;"	n	class:btrblocks::legacy
btrblocks::legacy::integers	btrblocks/scheme/integer/FixedDictionary.hpp	/^namespace btrblocks::legacy::integers {$/;"	n	class:btrblocks::legacy
btrblocks::legacy::integers	btrblocks/scheme/integer/OneValue.cpp	/^namespace btrblocks::legacy::integers {$/;"	n	class:btrblocks::legacy	file:
btrblocks::legacy::integers	btrblocks/scheme/integer/OneValue.hpp	/^namespace btrblocks::legacy::integers {$/;"	n	class:btrblocks::legacy
btrblocks::legacy::integers	btrblocks/scheme/integer/Truncation.cpp	/^namespace btrblocks::legacy::integers {$/;"	n	class:btrblocks::legacy	file:
btrblocks::legacy::integers	btrblocks/scheme/integer/Truncation.hpp	/^namespace btrblocks::legacy::integers {$/;"	n	class:btrblocks::legacy
btrblocks::legacy::integers	btrblocks/scheme/integer/Uncompressed.cpp	/^namespace btrblocks::legacy::integers {$/;"	n	class:btrblocks::legacy	file:
btrblocks::legacy::integers	btrblocks/scheme/integer/Uncompressed.hpp	/^namespace btrblocks::legacy::integers {$/;"	n	class:btrblocks::legacy
btrblocks::legacy::integers::Dictionary16	btrblocks/scheme/integer/FixedDictionary.hpp	/^class Dictionary16 : public IntegerScheme {$/;"	c	namespace:btrblocks::legacy::integers	inherits:IntegerScheme
btrblocks::legacy::integers::Dictionary16::staticSchemeType	btrblocks/scheme/integer/FixedDictionary.hpp	/^  inline static IntegerSchemeType staticSchemeType() { return IntegerSchemeType::DICTIONARY_16; }$/;"	f	class:btrblocks::legacy::integers::Dictionary16	access:public	signature:()
btrblocks::legacy::integers::Dictionary8	btrblocks/scheme/integer/FixedDictionary.hpp	/^class Dictionary8 : public IntegerScheme {$/;"	c	namespace:btrblocks::legacy::integers	inherits:IntegerScheme
btrblocks::legacy::integers::Dictionary8::staticSchemeType	btrblocks/scheme/integer/FixedDictionary.hpp	/^  inline static IntegerSchemeType staticSchemeType() { return IntegerSchemeType::DICTIONARY_8; }$/;"	f	class:btrblocks::legacy::integers::Dictionary8	access:public	signature:()
btrblocks::legacy::integers::FOR	btrblocks/scheme/integer/FOR.hpp	/^class FOR : public IntegerScheme {$/;"	c	namespace:btrblocks::legacy::integers	inherits:IntegerScheme
btrblocks::legacy::integers::FOR::compress	btrblocks/scheme/integer/FOR.cpp	/^u32 FOR::compress(const INTEGER* src,$/;"	f	class:btrblocks::legacy::integers::FOR	signature:(const INTEGER* src, const BITMAP* nullmap, u8* dest, SInteger32Stats& stats, u8 allowed_cascading_level)
btrblocks::legacy::integers::FOR::decompress	btrblocks/scheme/integer/FOR.cpp	/^void FOR::decompress(INTEGER* dest,$/;"	f	class:btrblocks::legacy::integers::FOR	signature:(INTEGER* dest, BitmapWrapper* nullmap, const u8* src, u32 tuple_count, u32 level)
btrblocks::legacy::integers::FOR::expectedCompressionRatio	btrblocks/scheme/integer/FOR.cpp	/^double FOR::expectedCompressionRatio(SInteger32Stats& stats, u8 allowed_cascading_level) {$/;"	f	class:btrblocks::legacy::integers::FOR	signature:(SInteger32Stats& stats, u8 allowed_cascading_level)
btrblocks::legacy::integers::FOR::fullDescription	btrblocks/scheme/integer/FOR.cpp	/^std::string FOR::fullDescription(const u8* src) {$/;"	f	class:btrblocks::legacy::integers::FOR	signature:(const u8* src)
btrblocks::legacy::integers::FOR::lookup	btrblocks/scheme/integer/FOR.cpp	/^INTEGER FOR::lookup(u32) {$/;"	f	class:btrblocks::legacy::integers::FOR	signature:(u32)
btrblocks::legacy::integers::FOR::override	btrblocks/scheme/integer/FOR.hpp	/^                  u32 level) override;$/;"	m	class:btrblocks::legacy::integers::FOR	access:public
btrblocks::legacy::integers::FOR::override	btrblocks/scheme/integer/FOR.hpp	/^               u8 allowed_cascading_level) override;$/;"	m	class:btrblocks::legacy::integers::FOR	access:public
btrblocks::legacy::integers::FOR::override	btrblocks/scheme/integer/FOR.hpp	/^  INTEGER lookup(u32) override;$/;"	m	class:btrblocks::legacy::integers::FOR	access:public
btrblocks::legacy::integers::FOR::override	btrblocks/scheme/integer/FOR.hpp	/^  double expectedCompressionRatio(SInteger32Stats& stats, u8 allowed_cascading_level) override;$/;"	m	class:btrblocks::legacy::integers::FOR	access:public
btrblocks::legacy::integers::FOR::override	btrblocks/scheme/integer/FOR.hpp	/^  std::string fullDescription(const u8* src) override;$/;"	m	class:btrblocks::legacy::integers::FOR	access:public
btrblocks::legacy::integers::FOR::override	btrblocks/scheme/integer/FOR.hpp	/^  void scan(Predicate, BITMAP*, const u8*, u32) override;$/;"	m	class:btrblocks::legacy::integers::FOR	access:public
btrblocks::legacy::integers::FOR::scan	btrblocks/scheme/integer/FOR.cpp	/^void FOR::scan(Predicate, BITMAP*, const u8*, u32) {$/;"	f	class:btrblocks::legacy::integers::FOR	signature:(Predicate, BITMAP*, const u8*, u32)
btrblocks::legacy::integers::FOR::staticSchemeType	btrblocks/scheme/integer/FOR.hpp	/^  inline static IntegerSchemeType staticSchemeType() { return IntegerSchemeType::FOR; }$/;"	f	class:btrblocks::legacy::integers::FOR	access:public	signature:()
btrblocks::legacy::integers::FORStructure	btrblocks/scheme/integer/FOR.hpp	/^struct FORStructure {$/;"	s	namespace:btrblocks::legacy::integers
btrblocks::legacy::integers::FORStructure::bias	btrblocks/scheme/integer/FOR.hpp	/^  INTEGER bias;$/;"	m	struct:btrblocks::legacy::integers::FORStructure	access:public
btrblocks::legacy::integers::FORStructure::data	btrblocks/scheme/integer/FOR.hpp	/^  u8 data[];$/;"	m	struct:btrblocks::legacy::integers::FORStructure	access:public
btrblocks::legacy::integers::FORStructure::next_scheme	btrblocks/scheme/integer/FOR.hpp	/^  u8 next_scheme;$/;"	m	struct:btrblocks::legacy::integers::FORStructure	access:public
btrblocks::legacy::integers::ITruncCompress	btrblocks/scheme/integer/Truncation.hpp	/^double ITruncCompress(const INTEGER* src, const BITMAP* nullmap, u8* dest, SInteger32Stats& stats) {$/;"	f	namespace:btrblocks::legacy::integers	signature:(const INTEGER* src, const BITMAP* nullmap, u8* dest, SInteger32Stats& stats)
btrblocks::legacy::integers::ITruncDecompress	btrblocks/scheme/integer/Truncation.hpp	/^void ITruncDecompress(INTEGER* dest,$/;"	f	namespace:btrblocks::legacy::integers	signature:(INTEGER* dest, BitmapWrapper* nullmap, const u8* src, u32 tuple_count, u32 level)
btrblocks::legacy::integers::ITruncExpectedCF	btrblocks/scheme/integer/Truncation.hpp	/^double ITruncExpectedCF(btrblocks::SInteger32Stats& stats) {$/;"	f	namespace:btrblocks::legacy::integers	signature:(btrblocks::SInteger32Stats& stats)
btrblocks::legacy::integers::OneValue	btrblocks/scheme/integer/OneValue.hpp	/^class OneValue : public IntegerScheme {$/;"	c	namespace:btrblocks::legacy::integers	inherits:IntegerScheme
btrblocks::legacy::integers::OneValue::compress	btrblocks/scheme/integer/OneValue.cpp	/^u32 OneValue::compress(const INTEGER* src, const BITMAP*, u8* dest, SInteger32Stats& stats, u8) {$/;"	f	class:btrblocks::legacy::integers::OneValue	signature:(const INTEGER* src, const BITMAP*, u8* dest, SInteger32Stats& stats, u8)
btrblocks::legacy::integers::OneValue::decompress	btrblocks/scheme/integer/OneValue.cpp	/^void OneValue::decompress(INTEGER* dest,$/;"	f	class:btrblocks::legacy::integers::OneValue	signature:(INTEGER* dest, BitmapWrapper*, const u8* src, u32 tuple_count, u32 level)
btrblocks::legacy::integers::OneValue::expectedCompressionRatio	btrblocks/scheme/integer/OneValue.cpp	/^double OneValue::expectedCompressionRatio(SInteger32Stats& stats, u8 allowed_cascading_level) {$/;"	f	class:btrblocks::legacy::integers::OneValue	signature:(SInteger32Stats& stats, u8 allowed_cascading_level)
btrblocks::legacy::integers::OneValue::lookup	btrblocks/scheme/integer/OneValue.cpp	/^INTEGER OneValue::lookup(u32) {$/;"	f	class:btrblocks::legacy::integers::OneValue	signature:(u32)
btrblocks::legacy::integers::OneValue::override	btrblocks/scheme/integer/OneValue.hpp	/^                  u32 level) override;$/;"	m	class:btrblocks::legacy::integers::OneValue	access:public
btrblocks::legacy::integers::OneValue::override	btrblocks/scheme/integer/OneValue.hpp	/^               u8 allowed_cascading_level) override;$/;"	m	class:btrblocks::legacy::integers::OneValue	access:public
btrblocks::legacy::integers::OneValue::override	btrblocks/scheme/integer/OneValue.hpp	/^  INTEGER lookup(u32) override;$/;"	m	class:btrblocks::legacy::integers::OneValue	access:public
btrblocks::legacy::integers::OneValue::override	btrblocks/scheme/integer/OneValue.hpp	/^  double expectedCompressionRatio(SInteger32Stats& stats, u8 allowed_cascading_level) override;$/;"	m	class:btrblocks::legacy::integers::OneValue	access:public
btrblocks::legacy::integers::OneValue::override	btrblocks/scheme/integer/OneValue.hpp	/^  void scan(Predicate, BITMAP*, const u8*, u32) override;$/;"	m	class:btrblocks::legacy::integers::OneValue	access:public
btrblocks::legacy::integers::OneValue::scan	btrblocks/scheme/integer/OneValue.cpp	/^void OneValue::scan(Predicate, BITMAP*, const u8*, u32) {$/;"	f	class:btrblocks::legacy::integers::OneValue	signature:(Predicate, BITMAP*, const u8*, u32)
btrblocks::legacy::integers::OneValue::staticSchemeType	btrblocks/scheme/integer/OneValue.hpp	/^  inline static IntegerSchemeType staticSchemeType() { return IntegerSchemeType::ONE_VALUE; }$/;"	f	class:btrblocks::legacy::integers::OneValue	access:public	signature:()
btrblocks::legacy::integers::OneValueStructure	btrblocks/scheme/integer/OneValue.hpp	/^struct OneValueStructure {$/;"	s	namespace:btrblocks::legacy::integers
btrblocks::legacy::integers::OneValueStructure::one_value	btrblocks/scheme/integer/OneValue.hpp	/^  UINTEGER one_value;$/;"	m	struct:btrblocks::legacy::integers::OneValueStructure	access:public
btrblocks::legacy::integers::Truncation16	btrblocks/scheme/integer/Truncation.hpp	/^class Truncation16 : public IntegerScheme {$/;"	c	namespace:btrblocks::legacy::integers	inherits:IntegerScheme
btrblocks::legacy::integers::Truncation16::canCompress	btrblocks/scheme/integer/Truncation.hpp	/^  virtual bool canCompress(SInteger32Stats& stats) {$/;"	f	class:btrblocks::legacy::integers::Truncation16	access:public	signature:(SInteger32Stats& stats)
btrblocks::legacy::integers::Truncation16::compress	btrblocks/scheme/integer/Truncation.cpp	/^u32 Truncation16::compress(const INTEGER* src,$/;"	f	class:btrblocks::legacy::integers::Truncation16	signature:(const INTEGER* src, const BITMAP* nullmap, u8* dest, SInteger32Stats& stats, u8 allowed_cascading_level)
btrblocks::legacy::integers::Truncation16::decompress	btrblocks/scheme/integer/Truncation.cpp	/^void Truncation16::decompress(INTEGER* dest,$/;"	f	class:btrblocks::legacy::integers::Truncation16	signature:(INTEGER* dest, BitmapWrapper* nullmap, const u8* src, u32 tuple_count, u32 level)
btrblocks::legacy::integers::Truncation16::expectedCompressionRatio	btrblocks/scheme/integer/Truncation.cpp	/^double Truncation16::expectedCompressionRatio(SInteger32Stats& stats, u8 allowed_cascading_level) {$/;"	f	class:btrblocks::legacy::integers::Truncation16	signature:(SInteger32Stats& stats, u8 allowed_cascading_level)
btrblocks::legacy::integers::Truncation16::lookup	btrblocks/scheme/integer/Truncation.cpp	/^INTEGER Truncation16::lookup(u32) {$/;"	f	class:btrblocks::legacy::integers::Truncation16	signature:(u32)
btrblocks::legacy::integers::Truncation16::override	btrblocks/scheme/integer/Truncation.hpp	/^                  u32 level) override;$/;"	m	class:btrblocks::legacy::integers::Truncation16	access:public
btrblocks::legacy::integers::Truncation16::override	btrblocks/scheme/integer/Truncation.hpp	/^               u8 allowed_cascading_level) override;$/;"	m	class:btrblocks::legacy::integers::Truncation16	access:public
btrblocks::legacy::integers::Truncation16::override	btrblocks/scheme/integer/Truncation.hpp	/^  INTEGER lookup(u32) override;$/;"	m	class:btrblocks::legacy::integers::Truncation16	access:public
btrblocks::legacy::integers::Truncation16::override	btrblocks/scheme/integer/Truncation.hpp	/^  double expectedCompressionRatio(SInteger32Stats& stats, u8 allowed_cascading_level) override;$/;"	m	class:btrblocks::legacy::integers::Truncation16	access:public
btrblocks::legacy::integers::Truncation16::override	btrblocks/scheme/integer/Truncation.hpp	/^  void scan(Predicate, BITMAP*, const u8*, u32) override;$/;"	m	class:btrblocks::legacy::integers::Truncation16	access:public
btrblocks::legacy::integers::Truncation16::scan	btrblocks/scheme/integer/Truncation.cpp	/^void Truncation16::scan(Predicate, BITMAP*, const u8*, u32) {$/;"	f	class:btrblocks::legacy::integers::Truncation16	signature:(Predicate, BITMAP*, const u8*, u32)
btrblocks::legacy::integers::Truncation16::staticSchemeType	btrblocks/scheme/integer/Truncation.hpp	/^  inline static IntegerSchemeType staticSchemeType() { return IntegerSchemeType::TRUNCATION_16; }$/;"	f	class:btrblocks::legacy::integers::Truncation16	access:public	signature:()
btrblocks::legacy::integers::Truncation8	btrblocks/scheme/integer/Truncation.hpp	/^class Truncation8 : public IntegerScheme {$/;"	c	namespace:btrblocks::legacy::integers	inherits:IntegerScheme
btrblocks::legacy::integers::Truncation8::canCompress	btrblocks/scheme/integer/Truncation.hpp	/^  virtual bool canCompress(SInteger32Stats& stats) {$/;"	f	class:btrblocks::legacy::integers::Truncation8	access:public	signature:(SInteger32Stats& stats)
btrblocks::legacy::integers::Truncation8::compress	btrblocks/scheme/integer/Truncation.cpp	/^u32 Truncation8::compress(const INTEGER* src,$/;"	f	class:btrblocks::legacy::integers::Truncation8	signature:(const INTEGER* src, const BITMAP* nullmap, u8* dest, SInteger32Stats& stats, u8 allowed_cascading_level)
btrblocks::legacy::integers::Truncation8::decompress	btrblocks/scheme/integer/Truncation.cpp	/^void Truncation8::decompress(INTEGER* dest,$/;"	f	class:btrblocks::legacy::integers::Truncation8	signature:(INTEGER* dest, BitmapWrapper* nullmap, const u8* src, u32 tuple_count, u32 level)
btrblocks::legacy::integers::Truncation8::expectedCompressionRatio	btrblocks/scheme/integer/Truncation.cpp	/^double Truncation8::expectedCompressionRatio(SInteger32Stats& stats, u8 allowed_cascading_level) {$/;"	f	class:btrblocks::legacy::integers::Truncation8	signature:(SInteger32Stats& stats, u8 allowed_cascading_level)
btrblocks::legacy::integers::Truncation8::lookup	btrblocks/scheme/integer/Truncation.cpp	/^INTEGER Truncation8::lookup(u32) {$/;"	f	class:btrblocks::legacy::integers::Truncation8	signature:(u32)
btrblocks::legacy::integers::Truncation8::override	btrblocks/scheme/integer/Truncation.hpp	/^                  u32 level) override;$/;"	m	class:btrblocks::legacy::integers::Truncation8	access:public
btrblocks::legacy::integers::Truncation8::override	btrblocks/scheme/integer/Truncation.hpp	/^               u8 allowed_cascading_level) override;$/;"	m	class:btrblocks::legacy::integers::Truncation8	access:public
btrblocks::legacy::integers::Truncation8::override	btrblocks/scheme/integer/Truncation.hpp	/^  INTEGER lookup(u32) override;$/;"	m	class:btrblocks::legacy::integers::Truncation8	access:public
btrblocks::legacy::integers::Truncation8::override	btrblocks/scheme/integer/Truncation.hpp	/^  double expectedCompressionRatio(SInteger32Stats& stats, u8 allowed_cascading_level) override;$/;"	m	class:btrblocks::legacy::integers::Truncation8	access:public
btrblocks::legacy::integers::Truncation8::override	btrblocks/scheme/integer/Truncation.hpp	/^  void scan(Predicate, BITMAP*, const u8*, u32) override;$/;"	m	class:btrblocks::legacy::integers::Truncation8	access:public
btrblocks::legacy::integers::Truncation8::scan	btrblocks/scheme/integer/Truncation.cpp	/^void Truncation8::scan(Predicate, BITMAP*, const u8*, u32) {$/;"	f	class:btrblocks::legacy::integers::Truncation8	signature:(Predicate, BITMAP*, const u8*, u32)
btrblocks::legacy::integers::Truncation8::staticSchemeType	btrblocks/scheme/integer/Truncation.hpp	/^  inline static IntegerSchemeType staticSchemeType() { return IntegerSchemeType::TRUNCATION_8; }$/;"	f	class:btrblocks::legacy::integers::Truncation8	access:public	signature:()
btrblocks::legacy::integers::TruncationStructure	btrblocks/scheme/integer/Truncation.hpp	/^struct TruncationStructure {$/;"	s	namespace:btrblocks::legacy::integers
btrblocks::legacy::integers::TruncationStructure::base	btrblocks/scheme/integer/Truncation.hpp	/^  INTEGER base;$/;"	m	struct:btrblocks::legacy::integers::TruncationStructure	access:public
btrblocks::legacy::integers::TruncationStructure::truncated_values	btrblocks/scheme/integer/Truncation.hpp	/^  CodeType truncated_values[];$/;"	m	struct:btrblocks::legacy::integers::TruncationStructure	access:public
btrblocks::legacy::integers::Uncompressed	btrblocks/scheme/integer/Uncompressed.hpp	/^class Uncompressed : public IntegerScheme {$/;"	c	namespace:btrblocks::legacy::integers	inherits:IntegerScheme
btrblocks::legacy::integers::Uncompressed::compress	btrblocks/scheme/integer/Uncompressed.cpp	/^u32 Uncompressed::compress(const INTEGER* src,$/;"	f	class:btrblocks::legacy::integers::Uncompressed	signature:(const INTEGER* src, const BITMAP*, u8* dest, SInteger32Stats& stats, u8 allowed_cascading_level)
btrblocks::legacy::integers::Uncompressed::decompress	btrblocks/scheme/integer/Uncompressed.cpp	/^void Uncompressed::decompress(INTEGER* dest,$/;"	f	class:btrblocks::legacy::integers::Uncompressed	signature:(INTEGER* dest, BitmapWrapper*, const u8* src, u32 tuple_count, u32 level)
btrblocks::legacy::integers::Uncompressed::expectedCompressionRatio	btrblocks/scheme/integer/Uncompressed.cpp	/^double Uncompressed::expectedCompressionRatio(SInteger32Stats&, u8 allowed_cascading_level) {$/;"	f	class:btrblocks::legacy::integers::Uncompressed	signature:(SInteger32Stats&, u8 allowed_cascading_level)
btrblocks::legacy::integers::Uncompressed::lookup	btrblocks/scheme/integer/Uncompressed.cpp	/^INTEGER Uncompressed::lookup(u32) {$/;"	f	class:btrblocks::legacy::integers::Uncompressed	signature:(u32)
btrblocks::legacy::integers::Uncompressed::override	btrblocks/scheme/integer/Uncompressed.hpp	/^                  u32 level) override;$/;"	m	class:btrblocks::legacy::integers::Uncompressed	access:public
btrblocks::legacy::integers::Uncompressed::override	btrblocks/scheme/integer/Uncompressed.hpp	/^               u8 allowed_cascading_level) override;$/;"	m	class:btrblocks::legacy::integers::Uncompressed	access:public
btrblocks::legacy::integers::Uncompressed::override	btrblocks/scheme/integer/Uncompressed.hpp	/^  INTEGER lookup(u32) override;$/;"	m	class:btrblocks::legacy::integers::Uncompressed	access:public
btrblocks::legacy::integers::Uncompressed::override	btrblocks/scheme/integer/Uncompressed.hpp	/^  double expectedCompressionRatio(SInteger32Stats& stats, u8 allowed_cascading_level) override;$/;"	m	class:btrblocks::legacy::integers::Uncompressed	access:public
btrblocks::legacy::integers::Uncompressed::override	btrblocks/scheme/integer/Uncompressed.hpp	/^  void scan(Predicate, BITMAP*, const u8*, u32) override;$/;"	m	class:btrblocks::legacy::integers::Uncompressed	access:public
btrblocks::legacy::integers::Uncompressed::scan	btrblocks/scheme/integer/Uncompressed.cpp	/^void Uncompressed::scan(Predicate, BITMAP*, const u8*, u32) {$/;"	f	class:btrblocks::legacy::integers::Uncompressed	signature:(Predicate, BITMAP*, const u8*, u32)
btrblocks::legacy::integers::Uncompressed::staticSchemeType	btrblocks/scheme/integer/Uncompressed.hpp	/^  inline static IntegerSchemeType staticSchemeType() { return IntegerSchemeType::UNCOMPRESSED; }$/;"	f	class:btrblocks::legacy::integers::Uncompressed	access:public	signature:()
btrblocks::legacy::strings	btrblocks/scheme/string/FixedDictionary.cpp	/^namespace btrblocks::legacy::strings {$/;"	n	class:btrblocks::legacy	file:
btrblocks::legacy::strings	btrblocks/scheme/string/FixedDictionary.hpp	/^namespace btrblocks::legacy::strings {$/;"	n	class:btrblocks::legacy
btrblocks::legacy::strings	btrblocks/scheme/string/OneValue.cpp	/^namespace btrblocks::legacy::strings {$/;"	n	class:btrblocks::legacy	file:
btrblocks::legacy::strings	btrblocks/scheme/string/OneValue.hpp	/^namespace btrblocks::legacy::strings {$/;"	n	class:btrblocks::legacy
btrblocks::legacy::strings	btrblocks/scheme/string/Uncompressed.cpp	/^namespace btrblocks::legacy::strings {$/;"	n	class:btrblocks::legacy	file:
btrblocks::legacy::strings	btrblocks/scheme/string/Uncompressed.hpp	/^namespace btrblocks::legacy::strings {$/;"	n	class:btrblocks::legacy
btrblocks::legacy::strings::Dictionary16	btrblocks/scheme/string/FixedDictionary.hpp	/^class Dictionary16 : public StringScheme {$/;"	c	namespace:btrblocks::legacy::strings	inherits:StringScheme
btrblocks::legacy::strings::Dictionary16::compress	btrblocks/scheme/string/FixedDictionary.cpp	/^u32 Dictionary16::compress(const StringArrayViewer src,$/;"	f	class:btrblocks::legacy::strings::Dictionary16	signature:(const StringArrayViewer src, const BITMAP* nullmap, u8* dest, StringStats& stats)
btrblocks::legacy::strings::Dictionary16::decompress	btrblocks/scheme/string/FixedDictionary.cpp	/^void Dictionary16::decompress(u8* dest,$/;"	f	class:btrblocks::legacy::strings::Dictionary16	signature:(u8* dest, BitmapWrapper* nullmap, const u8* src, u32 tuple_count, u32 level)
btrblocks::legacy::strings::Dictionary16::expectedCompressionRatio	btrblocks/scheme/string/FixedDictionary.cpp	/^double Dictionary16::expectedCompressionRatio(StringStats& stats, u8 allowed_cascading_level) {$/;"	f	class:btrblocks::legacy::strings::Dictionary16	signature:(StringStats& stats, u8 allowed_cascading_level)
btrblocks::legacy::strings::Dictionary16::getDecompressedSize	btrblocks/scheme/string/FixedDictionary.cpp	/^u32 Dictionary16::getDecompressedSize(const u8* src, u32 tuple_count, BitmapWrapper* nullmap) {$/;"	f	class:btrblocks::legacy::strings::Dictionary16	signature:(const u8* src, u32 tuple_count, BitmapWrapper* nullmap)
btrblocks::legacy::strings::Dictionary16::getTotalLength	btrblocks/scheme/string/FixedDictionary.cpp	/^u32 Dictionary16::getTotalLength(const u8* src, u32 tuple_count, BitmapWrapper* nullmap) {$/;"	f	class:btrblocks::legacy::strings::Dictionary16	signature:(const u8* src, u32 tuple_count, BitmapWrapper* nullmap)
btrblocks::legacy::strings::Dictionary16::override	btrblocks/scheme/string/FixedDictionary.hpp	/^                  u32 level) override;$/;"	m	class:btrblocks::legacy::strings::Dictionary16	access:public
btrblocks::legacy::strings::Dictionary16::override	btrblocks/scheme/string/FixedDictionary.hpp	/^               StringStats& stats) override;$/;"	m	class:btrblocks::legacy::strings::Dictionary16	access:public
btrblocks::legacy::strings::Dictionary16::override	btrblocks/scheme/string/FixedDictionary.hpp	/^  double expectedCompressionRatio(StringStats& stats, u8 allowed_cascading_level) override;$/;"	m	class:btrblocks::legacy::strings::Dictionary16	access:public
btrblocks::legacy::strings::Dictionary16::override	btrblocks/scheme/string/FixedDictionary.hpp	/^  u32 getDecompressedSize(const u8* src, u32 tuple_count, BitmapWrapper* nullmap) override;$/;"	m	class:btrblocks::legacy::strings::Dictionary16	access:public
btrblocks::legacy::strings::Dictionary16::override	btrblocks/scheme/string/FixedDictionary.hpp	/^  u32 getTotalLength(const u8* src, u32 tuple_count, BitmapWrapper* nullmap) override;$/;"	m	class:btrblocks::legacy::strings::Dictionary16	access:public
btrblocks::legacy::strings::Dictionary16::staticSchemeType	btrblocks/scheme/string/FixedDictionary.hpp	/^  inline static StringSchemeType staticSchemeType() { return StringSchemeType::DICTIONARY_16; }$/;"	f	class:btrblocks::legacy::strings::Dictionary16	access:public	signature:()
btrblocks::legacy::strings::Dictionary8	btrblocks/scheme/string/FixedDictionary.hpp	/^class Dictionary8 : public StringScheme {$/;"	c	namespace:btrblocks::legacy::strings	inherits:StringScheme
btrblocks::legacy::strings::Dictionary8::compress	btrblocks/scheme/string/FixedDictionary.cpp	/^u32 Dictionary8::compress(const StringArrayViewer src,$/;"	f	class:btrblocks::legacy::strings::Dictionary8	signature:(const StringArrayViewer src, const BITMAP* nullmap, u8* dest, StringStats& stats)
btrblocks::legacy::strings::Dictionary8::decompress	btrblocks/scheme/string/FixedDictionary.cpp	/^void Dictionary8::decompress(u8* dest,$/;"	f	class:btrblocks::legacy::strings::Dictionary8	signature:(u8* dest, BitmapWrapper* nullmap, const u8* src, u32 tuple_count, u32 level)
btrblocks::legacy::strings::Dictionary8::expectedCompressionRatio	btrblocks/scheme/string/FixedDictionary.cpp	/^double Dictionary8::expectedCompressionRatio(StringStats& stats, u8 allowed_cascading_level) {$/;"	f	class:btrblocks::legacy::strings::Dictionary8	signature:(StringStats& stats, u8 allowed_cascading_level)
btrblocks::legacy::strings::Dictionary8::getDecompressedSize	btrblocks/scheme/string/FixedDictionary.cpp	/^u32 Dictionary8::getDecompressedSize(const u8* src, u32 tuple_count, BitmapWrapper* nullmap) {$/;"	f	class:btrblocks::legacy::strings::Dictionary8	signature:(const u8* src, u32 tuple_count, BitmapWrapper* nullmap)
btrblocks::legacy::strings::Dictionary8::getTotalLength	btrblocks/scheme/string/FixedDictionary.cpp	/^u32 Dictionary8::getTotalLength(const u8* src, u32 tuple_count, BitmapWrapper* nullmap) {$/;"	f	class:btrblocks::legacy::strings::Dictionary8	signature:(const u8* src, u32 tuple_count, BitmapWrapper* nullmap)
btrblocks::legacy::strings::Dictionary8::override	btrblocks/scheme/string/FixedDictionary.hpp	/^                  u32 level) override;$/;"	m	class:btrblocks::legacy::strings::Dictionary8	access:public
btrblocks::legacy::strings::Dictionary8::override	btrblocks/scheme/string/FixedDictionary.hpp	/^               StringStats& stats) override;$/;"	m	class:btrblocks::legacy::strings::Dictionary8	access:public
btrblocks::legacy::strings::Dictionary8::override	btrblocks/scheme/string/FixedDictionary.hpp	/^  double expectedCompressionRatio(StringStats& stats, u8 allowed_cascading_level) override;$/;"	m	class:btrblocks::legacy::strings::Dictionary8	access:public
btrblocks::legacy::strings::Dictionary8::override	btrblocks/scheme/string/FixedDictionary.hpp	/^  u32 getDecompressedSize(const u8* src, u32 tuple_count, BitmapWrapper* nullmap) override;$/;"	m	class:btrblocks::legacy::strings::Dictionary8	access:public
btrblocks::legacy::strings::Dictionary8::override	btrblocks/scheme/string/FixedDictionary.hpp	/^  u32 getTotalLength(const u8* src, u32 tuple_count, BitmapWrapper* nullmap) override;$/;"	m	class:btrblocks::legacy::strings::Dictionary8	access:public
btrblocks::legacy::strings::Dictionary8::staticSchemeType	btrblocks/scheme/string/FixedDictionary.hpp	/^  inline static StringSchemeType staticSchemeType() { return StringSchemeType::DICTIONARY_8; }$/;"	f	class:btrblocks::legacy::strings::Dictionary8	access:public	signature:()
btrblocks::legacy::strings::OneValue	btrblocks/scheme/string/OneValue.hpp	/^class OneValue : public StringScheme {$/;"	c	namespace:btrblocks::legacy::strings	inherits:StringScheme
btrblocks::legacy::strings::OneValue::compress	btrblocks/scheme/string/OneValue.cpp	/^u32 OneValue::compress(const StringArrayViewer,$/;"	f	class:btrblocks::legacy::strings::OneValue	signature:(const StringArrayViewer, const BITMAP* bitmap, u8* dest, StringStats& stats)
btrblocks::legacy::strings::OneValue::decompress	btrblocks/scheme/string/OneValue.cpp	/^void OneValue::decompress(u8* dest,$/;"	f	class:btrblocks::legacy::strings::OneValue	signature:(u8* dest, BitmapWrapper* nullmap, const u8* src, u32 tuple_count, u32 level)
btrblocks::legacy::strings::OneValue::decompressNoCopy	btrblocks/scheme/string/OneValue.cpp	/^bool OneValue::decompressNoCopy(u8* dest,$/;"	f	class:btrblocks::legacy::strings::OneValue	signature:(u8* dest, BitmapWrapper* nullmap, const u8* src, u32 tuple_count, u32)
btrblocks::legacy::strings::OneValue::expectedCompressionRatio	btrblocks/scheme/string/OneValue.cpp	/^double OneValue::expectedCompressionRatio(StringStats& stats, u8 allowed_cascading_level) {$/;"	f	class:btrblocks::legacy::strings::OneValue	signature:(StringStats& stats, u8 allowed_cascading_level)
btrblocks::legacy::strings::OneValue::getDecompressedSize	btrblocks/scheme/string/OneValue.cpp	/^u32 OneValue::getDecompressedSize(const u8* src, u32 tuple_count, BitmapWrapper* nullmap) {$/;"	f	class:btrblocks::legacy::strings::OneValue	signature:(const u8* src, u32 tuple_count, BitmapWrapper* nullmap)
btrblocks::legacy::strings::OneValue::getDecompressedSizeNoCopy	btrblocks/scheme/string/OneValue.cpp	/^u32 OneValue::getDecompressedSizeNoCopy(const u8* src, u32 tuple_count, BitmapWrapper*) {$/;"	f	class:btrblocks::legacy::strings::OneValue	signature:(const u8* src, u32 tuple_count, BitmapWrapper*)
btrblocks::legacy::strings::OneValue::getTotalLength	btrblocks/scheme/string/OneValue.cpp	/^u32 OneValue::getTotalLength(const u8* src, u32, BitmapWrapper* nullmap) {$/;"	f	class:btrblocks::legacy::strings::OneValue	signature:(const u8* src, u32, BitmapWrapper* nullmap)
btrblocks::legacy::strings::OneValue::override	btrblocks/scheme/string/OneValue.hpp	/^                        u32 level) override;$/;"	m	class:btrblocks::legacy::strings::OneValue	access:public
btrblocks::legacy::strings::OneValue::override	btrblocks/scheme/string/OneValue.hpp	/^                  u32 level) override;$/;"	m	class:btrblocks::legacy::strings::OneValue	access:public
btrblocks::legacy::strings::OneValue::override	btrblocks/scheme/string/OneValue.hpp	/^               StringStats& stats) override;$/;"	m	class:btrblocks::legacy::strings::OneValue	access:public
btrblocks::legacy::strings::OneValue::override	btrblocks/scheme/string/OneValue.hpp	/^  double expectedCompressionRatio(StringStats& stats, u8 allowed_cascading_level) override;$/;"	m	class:btrblocks::legacy::strings::OneValue	access:public
btrblocks::legacy::strings::OneValue::override	btrblocks/scheme/string/OneValue.hpp	/^  u32 getDecompressedSize(const u8* src, u32 tuple_count, BitmapWrapper* nullmap) override;$/;"	m	class:btrblocks::legacy::strings::OneValue	access:public
btrblocks::legacy::strings::OneValue::override	btrblocks/scheme/string/OneValue.hpp	/^  u32 getDecompressedSizeNoCopy(const u8* src, u32 tuple_count, BitmapWrapper* nullmap) override;$/;"	m	class:btrblocks::legacy::strings::OneValue	access:public
btrblocks::legacy::strings::OneValue::override	btrblocks/scheme/string/OneValue.hpp	/^  u32 getTotalLength(const u8* src, u32 tuple_count, BitmapWrapper* nullmap) override;$/;"	m	class:btrblocks::legacy::strings::OneValue	access:public
btrblocks::legacy::strings::OneValue::staticSchemeType	btrblocks/scheme/string/OneValue.hpp	/^  inline static StringSchemeType staticSchemeType() { return StringSchemeType::ONE_VALUE; }$/;"	f	class:btrblocks::legacy::strings::OneValue	access:public	signature:()
btrblocks::legacy::strings::OneValueStructure	btrblocks/scheme/string/OneValue.hpp	/^struct OneValueStructure {$/;"	s	namespace:btrblocks::legacy::strings
btrblocks::legacy::strings::OneValueStructure::data	btrblocks/scheme/string/OneValue.hpp	/^  u8 data[];$/;"	m	struct:btrblocks::legacy::strings::OneValueStructure	access:public
btrblocks::legacy::strings::OneValueStructure::length	btrblocks/scheme/string/OneValue.hpp	/^  u32 length;$/;"	m	struct:btrblocks::legacy::strings::OneValueStructure	access:public
btrblocks::legacy::strings::Uncompressed	btrblocks/scheme/string/Uncompressed.hpp	/^class Uncompressed : public StringScheme {$/;"	c	namespace:btrblocks::legacy::strings	inherits:StringScheme
btrblocks::legacy::strings::Uncompressed::compress	btrblocks/scheme/string/Uncompressed.cpp	/^u32 Uncompressed::compress(const StringArrayViewer src,$/;"	f	class:btrblocks::legacy::strings::Uncompressed	signature:(const StringArrayViewer src, const BITMAP*, u8* dest, StringStats& stats)
btrblocks::legacy::strings::Uncompressed::decompress	btrblocks/scheme/string/Uncompressed.cpp	/^void Uncompressed::decompress(u8* dest,$/;"	f	class:btrblocks::legacy::strings::Uncompressed	signature:(u8* dest, BitmapWrapper* nullmap, const u8* src, u32 tuple_count, u32 level)
btrblocks::legacy::strings::Uncompressed::expectedCompressionRatio	btrblocks/scheme/string/Uncompressed.cpp	/^double Uncompressed::expectedCompressionRatio(StringStats& stats, u8 allowed_cascading_level) {$/;"	f	class:btrblocks::legacy::strings::Uncompressed	signature:(StringStats& stats, u8 allowed_cascading_level)
btrblocks::legacy::strings::Uncompressed::getDecompressedSize	btrblocks/scheme/string/Uncompressed.cpp	/^u32 Uncompressed::getDecompressedSize(const u8* src, u32 tuple_count, BitmapWrapper* nullmap) {$/;"	f	class:btrblocks::legacy::strings::Uncompressed	signature:(const u8* src, u32 tuple_count, BitmapWrapper* nullmap)
btrblocks::legacy::strings::Uncompressed::getTotalLength	btrblocks/scheme/string/Uncompressed.cpp	/^u32 Uncompressed::getTotalLength(const u8* src, u32 tuple_count, BitmapWrapper* nullmap) {$/;"	f	class:btrblocks::legacy::strings::Uncompressed	signature:(const u8* src, u32 tuple_count, BitmapWrapper* nullmap)
btrblocks::legacy::strings::Uncompressed::override	btrblocks/scheme/string/Uncompressed.hpp	/^                  u32 level) override;$/;"	m	class:btrblocks::legacy::strings::Uncompressed	access:public
btrblocks::legacy::strings::Uncompressed::override	btrblocks/scheme/string/Uncompressed.hpp	/^               StringStats& stats) override;$/;"	m	class:btrblocks::legacy::strings::Uncompressed	access:public
btrblocks::legacy::strings::Uncompressed::override	btrblocks/scheme/string/Uncompressed.hpp	/^  double expectedCompressionRatio(StringStats& stats, u8 allowed_cascading_level) override;$/;"	m	class:btrblocks::legacy::strings::Uncompressed	access:public
btrblocks::legacy::strings::Uncompressed::override	btrblocks/scheme/string/Uncompressed.hpp	/^  u32 getDecompressedSize(const u8* src, u32 tuple_count, BitmapWrapper* nullmap) override;$/;"	m	class:btrblocks::legacy::strings::Uncompressed	access:public
btrblocks::legacy::strings::Uncompressed::override	btrblocks/scheme/string/Uncompressed.hpp	/^  u32 getTotalLength(const u8* src, u32 tuple_count, BitmapWrapper* nullmap) override;$/;"	m	class:btrblocks::legacy::strings::Uncompressed	access:public
btrblocks::legacy::strings::Uncompressed::staticSchemeType	btrblocks/scheme/string/Uncompressed.hpp	/^  inline static StringSchemeType staticSchemeType() { return StringSchemeType::UNCOMPRESSED; }$/;"	f	class:btrblocks::legacy::strings::Uncompressed	access:public	signature:()
btrblocks::legacy::strings::UncompressedStructure	btrblocks/scheme/string/Uncompressed.hpp	/^struct UncompressedStructure {$/;"	s	namespace:btrblocks::legacy::strings
btrblocks::legacy::strings::UncompressedStructure::data	btrblocks/scheme/string/Uncompressed.hpp	/^  u8 data[];$/;"	m	struct:btrblocks::legacy::strings::UncompressedStructure	access:public
btrblocks::legacy::strings::UncompressedStructure::total_size	btrblocks/scheme/string/Uncompressed.hpp	/^  u32 total_size;$/;"	m	struct:btrblocks::legacy::strings::UncompressedStructure	access:public
btrblocks::mmapvector	btrblocks/storage/MMapVector.hpp	/^inline namespace mmapvector {$/;"	n	namespace:btrblocks
btrblocks::mmapvector::StringIndexSlot	btrblocks/storage/MMapVector.hpp	/^struct StringIndexSlot {$/;"	s	namespace:btrblocks::mmapvector
btrblocks::mmapvector::StringIndexSlot::offset	btrblocks/storage/MMapVector.hpp	/^  uint64_t offset;$/;"	m	struct:btrblocks::mmapvector::StringIndexSlot	access:public
btrblocks::mmapvector::StringIndexSlot::size	btrblocks/storage/MMapVector.hpp	/^  uint64_t size;$/;"	m	struct:btrblocks::mmapvector::StringIndexSlot	access:public
btrblocks::mmapvector::Vector	btrblocks/storage/MMapVector.hpp	/^struct Vector {$/;"	s	namespace:btrblocks::mmapvector
btrblocks::mmapvector::Vector	btrblocks/storage/MMapVector.hpp	/^struct Vector<std::string_view> {$/;"	s	namespace:btrblocks::mmapvector
btrblocks::mmapvector::Vector::Data	btrblocks/storage/MMapVector.hpp	/^  struct Data {$/;"	s	struct:btrblocks::mmapvector::Vector	access:public
btrblocks::mmapvector::Vector::Data::count	btrblocks/storage/MMapVector.hpp	/^    uint64_t count;$/;"	m	struct:btrblocks::mmapvector::Vector::Data	access:public
btrblocks::mmapvector::Vector::Data::slot	btrblocks/storage/MMapVector.hpp	/^    StringIndexSlot slot[];$/;"	m	struct:btrblocks::mmapvector::Vector::Data	access:public
btrblocks::mmapvector::Vector::Vector	btrblocks/storage/MMapVector.hpp	/^  Vector() : data(nullptr) {}$/;"	f	struct:btrblocks::mmapvector::Vector	access:public	signature:()
btrblocks::mmapvector::Vector::Vector	btrblocks/storage/MMapVector.hpp	/^  Vector(const Vector&) = delete;$/;"	p	struct:btrblocks::mmapvector::Vector	access:public	signature:(const Vector&)
btrblocks::mmapvector::Vector::Vector	btrblocks/storage/MMapVector.hpp	/^  explicit Vector(const char* pathname) { readBinary(pathname); }$/;"	f	struct:btrblocks::mmapvector::Vector	access:public	signature:(const char* pathname)
btrblocks::mmapvector::Vector::Vector	btrblocks/storage/MMapVector.hpp	/^  explicit Vector(uint64_t count) : count(count), data(new T[count]) {}$/;"	f	struct:btrblocks::mmapvector::Vector	access:public	signature:(uint64_t count)
btrblocks::mmapvector::Vector::_iterator	btrblocks/storage/MMapVector.hpp	/^  struct _iterator {$/;"	s	struct:btrblocks::mmapvector::Vector	access:public
btrblocks::mmapvector::Vector::_iterator::_iterator	btrblocks/storage/MMapVector.hpp	/^    _iterator(SlotPtr slot, Ptr data) : slot(slot), data(data) {}$/;"	f	struct:btrblocks::mmapvector::Vector::_iterator	access:public	signature:(SlotPtr slot, Ptr data)
btrblocks::mmapvector::Vector::_iterator::data	btrblocks/storage/MMapVector.hpp	/^    Ptr data;$/;"	m	struct:btrblocks::mmapvector::Vector::_iterator	access:public
btrblocks::mmapvector::Vector::_iterator::operator !=	btrblocks/storage/MMapVector.hpp	/^    bool operator!=(const _iterator& o) const { return slot != o.slot; }$/;"	f	struct:btrblocks::mmapvector::Vector::_iterator	access:public	signature:(const _iterator& o) const
btrblocks::mmapvector::Vector::_iterator::operator *	btrblocks/storage/MMapVector.hpp	/^    std::string_view operator*() const { return {data, slot->size}; }$/;"	f	struct:btrblocks::mmapvector::Vector::_iterator	access:public	signature:() const
btrblocks::mmapvector::Vector::_iterator::operator ++	btrblocks/storage/MMapVector.hpp	/^    _iterator operator++(int) {$/;"	f	struct:btrblocks::mmapvector::Vector::_iterator	access:public	signature:(int)
btrblocks::mmapvector::Vector::_iterator::operator ++	btrblocks/storage/MMapVector.hpp	/^    _iterator& operator++() {$/;"	f	struct:btrblocks::mmapvector::Vector::_iterator	access:public	signature:()
btrblocks::mmapvector::Vector::_iterator::slot	btrblocks/storage/MMapVector.hpp	/^    SlotPtr slot;$/;"	m	struct:btrblocks::mmapvector::Vector::_iterator	access:public
btrblocks::mmapvector::Vector::begin	btrblocks/storage/MMapVector.hpp	/^  [[nodiscard]] const_iterator begin() const { return data; }$/;"	f	struct:btrblocks::mmapvector::Vector	access:public	signature:() const
btrblocks::mmapvector::Vector::begin	btrblocks/storage/MMapVector.hpp	/^  [[nodiscard]] const_iterator begin() const { return {data->slot, reinterpret_cast<char*>(data)}; }$/;"	f	struct:btrblocks::mmapvector::Vector	access:public	signature:() const
btrblocks::mmapvector::Vector::begin	btrblocks/storage/MMapVector.hpp	/^  iterator begin() { return data; }$/;"	f	struct:btrblocks::mmapvector::Vector	access:public	signature:()
btrblocks::mmapvector::Vector::begin	btrblocks/storage/MMapVector.hpp	/^  iterator begin() { return {data->slot, reinterpret_cast<char*>(data)}; }$/;"	f	struct:btrblocks::mmapvector::Vector	access:public	signature:()
btrblocks::mmapvector::Vector::count	btrblocks/storage/MMapVector.hpp	/^  uint64_t count;$/;"	m	struct:btrblocks::mmapvector::Vector	access:public
btrblocks::mmapvector::Vector::data	btrblocks/storage/MMapVector.hpp	/^  Data* data;$/;"	m	struct:btrblocks::mmapvector::Vector	access:public
btrblocks::mmapvector::Vector::data	btrblocks/storage/MMapVector.hpp	/^  T* data;$/;"	m	struct:btrblocks::mmapvector::Vector	access:public
btrblocks::mmapvector::Vector::data	btrblocks/storage/MMapVector.hpp	/^  Vector(Vector&& o) noexcept : count(o.count), data(o.data) {$/;"	f	struct:btrblocks::mmapvector::Vector	access:public	signature:(o.data)
btrblocks::mmapvector::Vector::data	btrblocks/storage/MMapVector.hpp	/^  Vector(Vector&& o) noexcept : fileSize(o.fileSize), data(o.data) {$/;"	f	struct:btrblocks::mmapvector::Vector	access:public	signature:(o.data)
btrblocks::mmapvector::Vector::end	btrblocks/storage/MMapVector.hpp	/^  [[nodiscard]] const_iterator end() const { return data + count; }$/;"	f	struct:btrblocks::mmapvector::Vector	access:public	signature:() const
btrblocks::mmapvector::Vector::end	btrblocks/storage/MMapVector.hpp	/^  [[nodiscard]] const_iterator end() const {$/;"	f	struct:btrblocks::mmapvector::Vector	access:public	signature:() const
btrblocks::mmapvector::Vector::end	btrblocks/storage/MMapVector.hpp	/^  iterator end() { return data + count; }$/;"	f	struct:btrblocks::mmapvector::Vector	access:public	signature:()
btrblocks::mmapvector::Vector::end	btrblocks/storage/MMapVector.hpp	/^  iterator end() { return {data->slot + data->count, reinterpret_cast<char*>(data)}; }$/;"	f	struct:btrblocks::mmapvector::Vector	access:public	signature:()
btrblocks::mmapvector::Vector::fileSize	btrblocks/storage/MMapVector.hpp	/^  uint64_t fileSize;$/;"	m	struct:btrblocks::mmapvector::Vector	access:public
btrblocks::mmapvector::Vector::noexcept	btrblocks/storage/MMapVector.hpp	/^  Vector(Vector&& o) noexcept : count(o.count), data(o.data) {$/;"	m	struct:btrblocks::mmapvector::Vector	access:public
btrblocks::mmapvector::Vector::noexcept	btrblocks/storage/MMapVector.hpp	/^  Vector(Vector&& o) noexcept : fileSize(o.fileSize), data(o.data) {$/;"	m	struct:btrblocks::mmapvector::Vector	access:public
btrblocks::mmapvector::Vector::operator []	btrblocks/storage/MMapVector.hpp	/^  T& operator[](std::size_t idx) { return data[idx]; }$/;"	f	struct:btrblocks::mmapvector::Vector	access:public	signature:(std::size_t idx)
btrblocks::mmapvector::Vector::operator []	btrblocks/storage/MMapVector.hpp	/^  const T& operator[](std::size_t idx) const { return data[idx]; }$/;"	f	struct:btrblocks::mmapvector::Vector	access:public	signature:(std::size_t idx) const
btrblocks::mmapvector::Vector::operator []	btrblocks/storage/MMapVector.hpp	/^  std::string_view operator[](std::size_t idx) const {$/;"	f	struct:btrblocks::mmapvector::Vector	access:public	signature:(std::size_t idx) const
btrblocks::mmapvector::Vector::readBinary	btrblocks/storage/MMapVector.hpp	/^  void readBinary(const char* pathname) {$/;"	f	struct:btrblocks::mmapvector::Vector	access:public	signature:(const char* pathname)
btrblocks::mmapvector::Vector::size	btrblocks/storage/MMapVector.hpp	/^  [[nodiscard]] uint64_t size() const { return count; }$/;"	f	struct:btrblocks::mmapvector::Vector	access:public	signature:() const
btrblocks::mmapvector::Vector::size	btrblocks/storage/MMapVector.hpp	/^  [[nodiscard]] uint64_t size() const { return data->count; }$/;"	f	struct:btrblocks::mmapvector::Vector	access:public	signature:() const
btrblocks::mmapvector::Vector::~Vector	btrblocks/storage/MMapVector.hpp	/^  ~Vector() {$/;"	f	struct:btrblocks::mmapvector::Vector	access:public	signature:()
btrblocks::mmapvector::writeBinary	btrblocks/storage/MMapVector.hpp	/^void writeBinary(const char* pathname, std::vector<T>& v) {$/;"	f	namespace:btrblocks::mmapvector	signature:(const char* pathname, std::vector<T>& v)
btrblocks::mmapvector::writeBinary	btrblocks/storage/MMapVector.hpp	/^void writeBinary(const char* pathname, std::vector<std::string>& v);$/;"	p	namespace:btrblocks::mmapvector	signature:(const char* pathname, std::vector<std::string>& v)
btrblocks::sizeof	btrblocks/compression/Datablock.hpp	/^static_assert(sizeof(ColumnChunkMeta) == 12);$/;"	p	namespace:btrblocks	signature:(ColumnChunkMeta)
btrblocks::sizeof	btrblocks/compression/Datablock.hpp	/^static_assert(sizeof(ColumnMeta) == 16);$/;"	p	namespace:btrblocks	signature:(ColumnMeta)
btrblocks::sizeof	btrblocks/compression/Datablock.hpp	/^static_assert(sizeof(ColumnPartInfo) == 8);$/;"	p	namespace:btrblocks	signature:(ColumnPartInfo)
btrblocks::sizeof	btrblocks/compression/Datablock.hpp	/^static_assert(sizeof(DatablockMeta) == 16);$/;"	p	namespace:btrblocks	signature:(DatablockMeta)
btrblocks::sizeof	btrblocks/compression/Datablock.hpp	/^static_assert(sizeof(FileMetadata) == 8);$/;"	p	namespace:btrblocks	signature:(FileMetadata)
btrblocks::strings	btrblocks/scheme/string/DynamicDictionary.cpp	/^namespace btrblocks::strings {$/;"	n	class:btrblocks	file:
btrblocks::strings	btrblocks/scheme/string/DynamicDictionary.hpp	/^namespace btrblocks::strings {$/;"	n	class:btrblocks
btrblocks::strings	btrblocks/scheme/string/Fsst.cpp	/^namespace btrblocks::strings {$/;"	n	class:btrblocks	file:
btrblocks::strings	btrblocks/scheme/string/Fsst.hpp	/^namespace btrblocks::strings {$/;"	n	class:btrblocks
btrblocks::strings::DynamicDictionary	btrblocks/scheme/string/DynamicDictionary.hpp	/^class DynamicDictionary : public StringScheme {$/;"	c	namespace:btrblocks::strings	inherits:StringScheme
btrblocks::strings::DynamicDictionary::compress	btrblocks/scheme/string/DynamicDictionary.cpp	/^u32 DynamicDictionary::compress(const btrblocks::StringArrayViewer src,$/;"	f	class:btrblocks::strings::DynamicDictionary	signature:(const btrblocks::StringArrayViewer src, const BITMAP*, u8* dest, btrblocks::StringStats& stats)
btrblocks::strings::DynamicDictionary::decompress	btrblocks/scheme/string/DynamicDictionary.cpp	/^void DynamicDictionary::decompress(u8* dest,$/;"	f	class:btrblocks::strings::DynamicDictionary	signature:(u8* dest, BitmapWrapper*, const u8* src, u32 tuple_count, u32 level)
btrblocks::strings::DynamicDictionary::decompressNoCopy	btrblocks/scheme/string/DynamicDictionary.cpp	/^bool DynamicDictionary::decompressNoCopy(u8* dest,$/;"	f	class:btrblocks::strings::DynamicDictionary	signature:(u8* dest, BitmapWrapper*, const u8* src, u32 tuple_count, u32 level)
btrblocks::strings::DynamicDictionary::expectedCompressionRatio	btrblocks/scheme/string/DynamicDictionary.cpp	/^double DynamicDictionary::expectedCompressionRatio(StringStats& stats, u8) {$/;"	f	class:btrblocks::strings::DynamicDictionary	signature:(StringStats& stats, u8)
btrblocks::strings::DynamicDictionary::fullDescription	btrblocks/scheme/string/DynamicDictionary.cpp	/^std::string DynamicDictionary::fullDescription(const u8* src) {$/;"	f	class:btrblocks::strings::DynamicDictionary	signature:(const u8* src)
btrblocks::strings::DynamicDictionary::getDecompressedSize	btrblocks/scheme/string/DynamicDictionary.cpp	/^u32 DynamicDictionary::getDecompressedSize(const u8* src, u32 tuple_count, BitmapWrapper* nullmap) {$/;"	f	class:btrblocks::strings::DynamicDictionary	signature:(const u8* src, u32 tuple_count, BitmapWrapper* nullmap)
btrblocks::strings::DynamicDictionary::getDecompressedSizeNoCopy	btrblocks/scheme/string/DynamicDictionary.cpp	/^u32 DynamicDictionary::getDecompressedSizeNoCopy(const u8* src,$/;"	f	class:btrblocks::strings::DynamicDictionary	signature:(const u8* src, u32 tuple_count, BitmapWrapper* nullmap)
btrblocks::strings::DynamicDictionary::getTotalLength	btrblocks/scheme/string/DynamicDictionary.cpp	/^u32 DynamicDictionary::getTotalLength(const u8* src, u32 tuple_count, BitmapWrapper* nullmap) {$/;"	f	class:btrblocks::strings::DynamicDictionary	signature:(const u8* src, u32 tuple_count, BitmapWrapper* nullmap)
btrblocks::strings::DynamicDictionary::isUsable	btrblocks/scheme/string/DynamicDictionary.cpp	/^bool DynamicDictionary::isUsable(StringStats& stats) {$/;"	f	class:btrblocks::strings::DynamicDictionary	signature:(StringStats& stats)
btrblocks::strings::DynamicDictionary::override	btrblocks/scheme/string/DynamicDictionary.hpp	/^                        u32 level) override;$/;"	m	class:btrblocks::strings::DynamicDictionary	access:public
btrblocks::strings::DynamicDictionary::override	btrblocks/scheme/string/DynamicDictionary.hpp	/^                  u32 level) override;$/;"	m	class:btrblocks::strings::DynamicDictionary	access:public
btrblocks::strings::DynamicDictionary::override	btrblocks/scheme/string/DynamicDictionary.hpp	/^  bool isUsable(StringStats& stats) override;$/;"	m	class:btrblocks::strings::DynamicDictionary	access:public
btrblocks::strings::DynamicDictionary::override	btrblocks/scheme/string/DynamicDictionary.hpp	/^  bool usesFsst(const u8* src) override;$/;"	m	class:btrblocks::strings::DynamicDictionary	access:public
btrblocks::strings::DynamicDictionary::override	btrblocks/scheme/string/DynamicDictionary.hpp	/^  double expectedCompressionRatio(StringStats& stats, u8 allowed_cascading_level) override;$/;"	m	class:btrblocks::strings::DynamicDictionary	access:public
btrblocks::strings::DynamicDictionary::override	btrblocks/scheme/string/DynamicDictionary.hpp	/^  std::string fullDescription(const u8* src) override;$/;"	m	class:btrblocks::strings::DynamicDictionary	access:public
btrblocks::strings::DynamicDictionary::override	btrblocks/scheme/string/DynamicDictionary.hpp	/^  u32 compress(StringArrayViewer src, const BITMAP* nullmap, u8* dest, StringStats& stats) override;$/;"	m	class:btrblocks::strings::DynamicDictionary	access:public
btrblocks::strings::DynamicDictionary::override	btrblocks/scheme/string/DynamicDictionary.hpp	/^  u32 getDecompressedSize(const u8* src, u32 tuple_count, BitmapWrapper* nullmap) override;$/;"	m	class:btrblocks::strings::DynamicDictionary	access:public
btrblocks::strings::DynamicDictionary::override	btrblocks/scheme/string/DynamicDictionary.hpp	/^  u32 getDecompressedSizeNoCopy(const u8* src, u32 tuple_count, BitmapWrapper* nullmap) override;$/;"	m	class:btrblocks::strings::DynamicDictionary	access:public
btrblocks::strings::DynamicDictionary::override	btrblocks/scheme/string/DynamicDictionary.hpp	/^  u32 getTotalLength(const u8* src, u32 tuple_count, BitmapWrapper* nullmap) override;$/;"	m	class:btrblocks::strings::DynamicDictionary	access:public
btrblocks::strings::DynamicDictionary::staticSchemeType	btrblocks/scheme/string/DynamicDictionary.hpp	/^  inline static StringSchemeType staticSchemeType() { return StringSchemeType::DICT; }$/;"	f	class:btrblocks::strings::DynamicDictionary	access:public	signature:()
btrblocks::strings::DynamicDictionary::usesFsst	btrblocks/scheme/string/DynamicDictionary.cpp	/^bool DynamicDictionary::usesFsst(const u8* src) {$/;"	f	class:btrblocks::strings::DynamicDictionary	signature:(const u8* src)
btrblocks::strings::DynamicDictionaryStructure	btrblocks/scheme/string/DynamicDictionary.hpp	/^struct DynamicDictionaryStructure {$/;"	s	namespace:btrblocks::strings
btrblocks::strings::DynamicDictionaryStructure::codes_offset	btrblocks/scheme/string/DynamicDictionary.hpp	/^  u32 codes_offset;$/;"	m	struct:btrblocks::strings::DynamicDictionaryStructure	access:public
btrblocks::strings::DynamicDictionaryStructure::codes_scheme	btrblocks/scheme/string/DynamicDictionary.hpp	/^  u8 codes_scheme;$/;"	m	struct:btrblocks::strings::DynamicDictionaryStructure	access:public
btrblocks::strings::DynamicDictionaryStructure::data	btrblocks/scheme/string/DynamicDictionary.hpp	/^  u8 data[];$/;"	m	struct:btrblocks::strings::DynamicDictionaryStructure	access:public
btrblocks::strings::DynamicDictionaryStructure::fsst_offsets_offset	btrblocks/scheme/string/DynamicDictionary.hpp	/^  u32 fsst_offsets_offset;$/;"	m	struct:btrblocks::strings::DynamicDictionaryStructure	access:public
btrblocks::strings::DynamicDictionaryStructure::lengths_offset	btrblocks/scheme/string/DynamicDictionary.hpp	/^  u32 lengths_offset;$/;"	m	struct:btrblocks::strings::DynamicDictionaryStructure	access:public
btrblocks::strings::DynamicDictionaryStructure::lengths_scheme	btrblocks/scheme/string/DynamicDictionary.hpp	/^  u8 lengths_scheme;$/;"	m	struct:btrblocks::strings::DynamicDictionaryStructure	access:public
btrblocks::strings::DynamicDictionaryStructure::num_codes	btrblocks/scheme/string/DynamicDictionary.hpp	/^  u32 num_codes;$/;"	m	struct:btrblocks::strings::DynamicDictionaryStructure	access:public
btrblocks::strings::DynamicDictionaryStructure::total_decompressed_size	btrblocks/scheme/string/DynamicDictionary.hpp	/^  u32 total_decompressed_size;  \/\/ i.e original input size$/;"	m	struct:btrblocks::strings::DynamicDictionaryStructure	access:public
btrblocks::strings::DynamicDictionaryStructure::use_fsst	btrblocks/scheme/string/DynamicDictionary.hpp	/^  bool use_fsst;$/;"	m	struct:btrblocks::strings::DynamicDictionaryStructure	access:public
btrblocks::strings::DynamicDictionaryStructure::use_rle_optimized_path	btrblocks/scheme/string/DynamicDictionary.hpp	/^  bool use_rle_optimized_path;$/;"	m	struct:btrblocks::strings::DynamicDictionaryStructure	access:public
btrblocks::strings::Fsst	btrblocks/scheme/string/Fsst.hpp	/^class Fsst : public StringScheme {$/;"	c	namespace:btrblocks::strings	inherits:StringScheme
btrblocks::strings::Fsst::compress	btrblocks/scheme/string/Fsst.cpp	/^u32 Fsst::compress(const btrblocks::StringArrayViewer src,$/;"	f	class:btrblocks::strings::Fsst	signature:(const btrblocks::StringArrayViewer src, const BITMAP*, u8* dest, btrblocks::StringStats& stats)
btrblocks::strings::Fsst::decompress	btrblocks/scheme/string/Fsst.cpp	/^void Fsst::decompress(u8* dest, BitmapWrapper*, const u8* src, u32 tuple_count, u32 level) {$/;"	f	class:btrblocks::strings::Fsst	signature:(u8* dest, BitmapWrapper*, const u8* src, u32 tuple_count, u32 level)
btrblocks::strings::Fsst::expectedCompressionRatio	btrblocks/scheme/string/Fsst.cpp	/^double Fsst::expectedCompressionRatio(StringStats& stats, u8) {$/;"	f	class:btrblocks::strings::Fsst	signature:(StringStats& stats, u8)
btrblocks::strings::Fsst::fullDescription	btrblocks/scheme/string/Fsst.cpp	/^std::string Fsst::fullDescription(const u8* src) {$/;"	f	class:btrblocks::strings::Fsst	signature:(const u8* src)
btrblocks::strings::Fsst::getDecompressedSize	btrblocks/scheme/string/Fsst.cpp	/^u32 Fsst::getDecompressedSize(const u8* src, u32, BitmapWrapper*) {$/;"	f	class:btrblocks::strings::Fsst	signature:(const u8* src, u32, BitmapWrapper*)
btrblocks::strings::Fsst::getTotalLength	btrblocks/scheme/string/Fsst.cpp	/^u32 Fsst::getTotalLength(const u8* src, u32 tuple_count, BitmapWrapper*) {$/;"	f	class:btrblocks::strings::Fsst	signature:(const u8* src, u32 tuple_count, BitmapWrapper*)
btrblocks::strings::Fsst::isUsable	btrblocks/scheme/string/Fsst.cpp	/^bool Fsst::isUsable(StringStats& stats) {$/;"	f	class:btrblocks::strings::Fsst	signature:(StringStats& stats)
btrblocks::strings::Fsst::override	btrblocks/scheme/string/Fsst.hpp	/^                  u32 level) override;$/;"	m	class:btrblocks::strings::Fsst	access:public
btrblocks::strings::Fsst::override	btrblocks/scheme/string/Fsst.hpp	/^  bool isUsable(StringStats& stats) override;$/;"	m	class:btrblocks::strings::Fsst	access:public
btrblocks::strings::Fsst::override	btrblocks/scheme/string/Fsst.hpp	/^  double expectedCompressionRatio(StringStats& stats, u8 allowed_cascading_level) override;$/;"	m	class:btrblocks::strings::Fsst	access:public
btrblocks::strings::Fsst::override	btrblocks/scheme/string/Fsst.hpp	/^  std::string fullDescription(const u8* src) override;$/;"	m	class:btrblocks::strings::Fsst	access:public
btrblocks::strings::Fsst::override	btrblocks/scheme/string/Fsst.hpp	/^  u32 compress(StringArrayViewer src, const BITMAP* nullmap, u8* dest, StringStats& stats) override;$/;"	m	class:btrblocks::strings::Fsst	access:public
btrblocks::strings::Fsst::override	btrblocks/scheme/string/Fsst.hpp	/^  u32 getDecompressedSize(const u8* src, u32 tuple_count, BitmapWrapper* nullmap) override;$/;"	m	class:btrblocks::strings::Fsst	access:public
btrblocks::strings::Fsst::override	btrblocks/scheme/string/Fsst.hpp	/^  u32 getTotalLength(const u8* src, u32 tuple_count, BitmapWrapper* nullmap) override;$/;"	m	class:btrblocks::strings::Fsst	access:public
btrblocks::strings::Fsst::staticSchemeType	btrblocks/scheme/string/Fsst.hpp	/^  inline static StringSchemeType staticSchemeType() { return StringSchemeType::FSST; }$/;"	f	class:btrblocks::strings::Fsst	access:public	signature:()
btrblocks::strings::FsstStructure	btrblocks/scheme/string/Fsst.hpp	/^struct FsstStructure {$/;"	s	namespace:btrblocks::strings
btrblocks::strings::FsstStructure::compressed_strings_size	btrblocks/scheme/string/Fsst.hpp	/^  u32 compressed_strings_size;$/;"	m	struct:btrblocks::strings::FsstStructure	access:public
btrblocks::strings::FsstStructure::data	btrblocks/scheme/string/Fsst.hpp	/^  u8 data[];$/;"	m	struct:btrblocks::strings::FsstStructure	access:public
btrblocks::strings::FsstStructure::offsets_offset	btrblocks/scheme/string/Fsst.hpp	/^  u32 offsets_offset;$/;"	m	struct:btrblocks::strings::FsstStructure	access:public
btrblocks::strings::FsstStructure::offsets_scheme	btrblocks/scheme/string/Fsst.hpp	/^  u8 offsets_scheme;$/;"	m	struct:btrblocks::strings::FsstStructure	access:public
btrblocks::strings::FsstStructure::strings_offset	btrblocks/scheme/string/Fsst.hpp	/^  u32 strings_offset;$/;"	m	struct:btrblocks::strings::FsstStructure	access:public
btrblocks::strings::FsstStructure::total_decompressed_size	btrblocks/scheme/string/Fsst.hpp	/^  u32 total_decompressed_size;$/;"	m	struct:btrblocks::strings::FsstStructure	access:public
btrblocks::units	btrblocks/common/Units.hpp	/^inline namespace units {$/;"	n	namespace:btrblocks
btrblocks::units::BitmapType	btrblocks/common/Units.hpp	/^enum class BitmapType : u8 { ALLONES, ALLZEROS, REGULAR, FLIPPED };$/;"	c	namespace:btrblocks::units	inherits:u8
btrblocks::units::BitmapType::ALLONES	btrblocks/common/Units.hpp	/^enum class BitmapType : u8 { ALLONES, ALLZEROS, REGULAR, FLIPPED };$/;"	m	class:btrblocks::units::BitmapType	access:private
btrblocks::units::BitmapType::ALLZEROS	btrblocks/common/Units.hpp	/^enum class BitmapType : u8 { ALLONES, ALLZEROS, REGULAR, FLIPPED };$/;"	m	class:btrblocks::units::BitmapType	access:private
btrblocks::units::BitmapType::REGULAR	btrblocks/common/Units.hpp	/^enum class BitmapType : u8 { ALLONES, ALLZEROS, REGULAR, FLIPPED };$/;"	m	class:btrblocks::units::BitmapType	access:private
btrblocks::units::ColumnType	btrblocks/common/Units.hpp	/^enum class ColumnType : u8 {$/;"	c	namespace:btrblocks::units	inherits:u8
btrblocks::units::ColumnType::BIGINT	btrblocks/common/Units.hpp	/^  BIGINT,$/;"	m	class:btrblocks::units::ColumnType	access:private
btrblocks::units::ColumnType::DOUBLE	btrblocks/common/Units.hpp	/^  DOUBLE = 1,$/;"	m	class:btrblocks::units::ColumnType	access:private
btrblocks::units::ColumnType::FLOAT	btrblocks/common/Units.hpp	/^  FLOAT,$/;"	m	class:btrblocks::units::ColumnType	access:private
btrblocks::units::ColumnType::INTEGER	btrblocks/common/Units.hpp	/^  INTEGER = 0,$/;"	m	class:btrblocks::units::ColumnType	access:private
btrblocks::units::ColumnType::SKIP	btrblocks/common/Units.hpp	/^  SKIP,  \/\/ SKIP THIS COLUMN$/;"	m	class:btrblocks::units::ColumnType	access:private
btrblocks::units::ColumnType::SMALLINT	btrblocks/common/Units.hpp	/^  SMALLINT,$/;"	m	class:btrblocks::units::ColumnType	access:private
btrblocks::units::ColumnType::STRING	btrblocks/common/Units.hpp	/^  STRING = 2,$/;"	m	class:btrblocks::units::ColumnType	access:private
btrblocks::units::ConvertStringToType	btrblocks/common/Units.hpp	/^inline ColumnType ConvertStringToType(const string& type_str) {$/;"	f	namespace:btrblocks::units	signature:(const string& type_str)
btrblocks::units::ConvertTypeToString	btrblocks/common/Units.hpp	/^inline string ConvertTypeToString(const ColumnType type_str) {$/;"	f	namespace:btrblocks::units	signature:(const ColumnType type_str)
btrblocks::units::INT_BUFFER_SIZE	btrblocks/common/Units.hpp	/^enum { INT_BUFFER_SIZE = (65000 * 4 * 2) };$/;"	e	enum:btrblocks::units::__anon9
btrblocks::units::NULL_CODE	btrblocks/common/Units.hpp	/^enum { NULL_CODE = 0 };$/;"	e	enum:btrblocks::units::__anon10
btrblocks::units::NULL_CODE_MARGIN	btrblocks/common/Units.hpp	/^enum { NULL_CODE_MARGIN = 1 };$/;"	e	enum:btrblocks::units::__anon8
btrblocks::units::get_data	btrblocks/common/Units.hpp	/^inline T* get_data(std::vector<T>& v, std::size_t s) {$/;"	f	namespace:btrblocks::units	signature:(std::vector<T>& v, std::size_t s)
btrblocks::units::get_level_data	btrblocks/common/Units.hpp	/^inline T* get_level_data(std::vector<std::vector<T>>& v, std::size_t s, std::size_t level) {$/;"	f	namespace:btrblocks::units	signature:(std::vector<std::vector<T>>& v, std::size_t s, std::size_t level)
btrblocks::units::readRaw	btrblocks/common/Units.hpp	/^inline constexpr T readRaw(const u8* base, u32 offset) {$/;"	f	namespace:btrblocks::units	signature:(const u8* base, u32 offset)
btrblocks::units::readRaw	btrblocks/common/Units.hpp	/^inline constexpr T readRaw(u8* base, u32 offset) {  \/\/ TODO: Deprecate$/;"	f	namespace:btrblocks::units	signature:(u8* base, u32 offset)
btrblocks::units::writeRaw	btrblocks/common/Units.hpp	/^inline constexpr void writeRaw(u8* base, u32 offset, T value) {$/;"	f	namespace:btrblocks::units	signature:(u8* base, u32 offset, T value)
btrblocks::writeBinary	btrblocks/storage/MMapVector.cpp	/^void btrblocks::writeBinary(const char* pathname, std::vector<std::string>& v) {$/;"	f	class:btrblocks	signature:(const char* pathname, std::vector<std::string>& v)
bucket_prefix	tools/playground/generate_s3_data.cpp	/^static const char* const bucket_prefix = "bucketprefix-s3-test-data";$/;"	v	file:
buffer_cv	tools/conversion/s3-management.hpp	/^static std::condition_variable buffer_cv;$/;"	v
buffer_cv	tools/playground/test-s3-crt.cpp	/^std::condition_variable buffer_cv;$/;"	v
buffer_mutex	tools/conversion/s3-management.hpp	/^static std::mutex buffer_mutex;$/;"	v
buffer_mutex	tools/playground/test-s3-crt.cpp	/^std::mutex buffer_mutex;$/;"	v
buffers_available	tools/conversion/s3-management.hpp	/^static std::queue<long> buffers_available;$/;"	v
buffers_available	tools/playground/test-s3-crt.cpp	/^std::unordered_set<long> buffers_available;$/;"	v
callback	tools/conversion/s3-management.hpp	/^std::function<void(const s3_client_t*, const s3::Model::GetObjectRequest& get_request, s3::Model::GetObjectOutcome outcome, const std::shared_ptr<const Aws::Client::AsyncCallerContext>&)> callback;$/;"	v
callback	tools/playground/test-s3-crt.cpp	/^    callback;$/;"	v
canAdd	btrblocks/storage/Chunk.cpp	/^bool ColumnPart::canAdd(SIZE chunk_size) {$/;"	f	class:btrblocks::ColumnPart	signature:(SIZE chunk_size)
canAdd	btrblocks/storage/Chunk.hpp	/^  [[nodiscard]] bool canAdd(SIZE chunk_size);$/;"	p	class:btrblocks::ColumnPart	access:public	signature:(SIZE chunk_size)
canCompress	btrblocks/scheme/integer/Truncation.hpp	/^  virtual bool canCompress(SInteger32Stats& stats) {$/;"	f	class:btrblocks::legacy::integers::Truncation16	access:public	signature:(SInteger32Stats& stats)
canCompress	btrblocks/scheme/integer/Truncation.hpp	/^  virtual bool canCompress(SInteger32Stats& stats) {$/;"	f	class:btrblocks::legacy::integers::Truncation8	access:public	signature:(SInteger32Stats& stats)
cardinality	btrblocks/extern/RoaringBitmap.hpp	/^  [[nodiscard]] inline u32 cardinality() const { return this->m_cardinality; };$/;"	f	class:btrblocks::bitmap::BitmapWrapper	access:public	signature:() const
cfg	tools/playground/sampling_algorithms.cpp	/^  static BtrBlocksConfig& cfg() {$/;"	f	struct:RandomSampler	access:public	signature:()
charge	LICENSE	/^Permission is hereby granted, free of charge, to any person obtaining a copy$/;"	v
chooseScheme	btrblocks/compression/SchemePicker.hpp	/^  static SchemeType& chooseScheme(StatsType& stats, u8 allowed_cascading_level) {$/;"	f	class:btrblocks::CSchemePicker	access:public	signature:(StatsType& stats, u8 allowed_cascading_level)
chunk_count	tools/conversion/decompression-speed-s3.cpp	/^static std::atomic<uint64_t> chunk_count = 0;$/;"	v	file:
chunk_i	btrblocks/cache/ThreadCache.hpp	/^    u32 chunk_i;$/;"	m	struct:btrblocks::ThreadCacheContainer::DumpMeta	access:public
chunk_part_size_threshold	btrblocks/storage/Chunk.cpp	/^constexpr uint32_t chunk_part_size_threshold = 16 * 1024 * 1024;$/;"	v
chunks	btrblocks/storage/Chunk.hpp	/^  vector<vector<u8>> chunks;$/;"	m	class:btrblocks::ColumnPart	access:public
ci	.cache/clangd/index/Pseudodecimal.hpp.5BF37A45E94C55D7.idx	/^RIFFZ	/;"	v
codec	btrblocks/extern/FastPFOR.cpp	/^  FastPForLib::CompositeCodec<FastPForLib::FastBinaryPacking<32>, FastPForLib::VariableByte> codec;$/;"	m	struct:LemiereImpl::impl	file:	access:public
codes_offset	btrblocks/scheme/integer/DynamicDictionary.hpp	/^  u32 codes_offset;$/;"	m	struct:btrblocks::integers::DynamicDictionaryStructure	access:public
codes_offset	btrblocks/scheme/string/DynamicDictionary.hpp	/^  u32 codes_offset;$/;"	m	struct:btrblocks::strings::DynamicDictionaryStructure	access:public
codes_offset	btrblocks/scheme/templated/DynamicDictionary.hpp	/^  u32 codes_offset;$/;"	m	struct:btrblocks::DynamicDictionaryStructure	access:public
codes_offset	btrblocks/scheme/templated/FixedDictionary.hpp	/^  u32 codes_offset;$/;"	m	struct:btrblocks::FixedDictionaryStructure	access:public
codes_offset	btrblocks/scheme/templated/VarDictionary.hpp	/^  u32 codes_offset;$/;"	m	struct:btrblocks::legacy::VarDictionaryStructure	access:public
codes_scheme	btrblocks/scheme/string/DynamicDictionary.hpp	/^  u8 codes_scheme;$/;"	m	struct:btrblocks::strings::DynamicDictionaryStructure	access:public
codes_scheme_code	btrblocks/scheme/integer/DynamicDictionary.hpp	/^  u8 codes_scheme_code;$/;"	m	struct:btrblocks::integers::DynamicDictionaryStructure	access:public
codes_scheme_code	btrblocks/scheme/templated/DynamicDictionary.hpp	/^  u8 codes_scheme_code;$/;"	m	struct:btrblocks::DynamicDictionaryStructure	access:public
col_name	btrblocks/cache/ThreadCache.hpp	/^    string col_name;$/;"	m	struct:btrblocks::ThreadCacheContainer::DumpMeta	access:public
col_type	btrblocks/cache/ThreadCache.hpp	/^    string col_type;$/;"	m	struct:btrblocks::ThreadCacheContainer::DumpMeta	access:public
column_count	btrblocks/compression/Datablock.hpp	/^  u32 column_count;$/;"	m	struct:btrblocks::DatablockMeta	access:public
column_requires_copy	btrblocks/storage/Chunk.hpp	/^  unique_ptr<bool[]> column_requires_copy;$/;"	m	class:btrblocks::Chunk	access:public
column_type	btrblocks/compression/Datablock.hpp	/^  ColumnType column_type;$/;"	m	struct:btrblocks::ColumnMeta	access:public
column_type	btrfiles/Parser.cpp	/^  ColumnType column_type;$/;"	m	struct:btrblocks::files::ColumnDescriptor	file:	access:public
columns	btrblocks/storage/Chunk.hpp	/^  unique_ptr<unique_ptr<u8[]>[]> columns;$/;"	m	class:btrblocks::Chunk	access:public
columns	btrblocks/storage/Relation.hpp	/^  vector<Column> columns;$/;"	m	class:btrblocks::Relation	access:public
compareContents	btrblocks/storage/Chunk.cpp	/^bool InputChunk::compareContents(u8* their_data,$/;"	f	class:btrblocks::InputChunk	signature:(u8* their_data, const std::vector<BITMAP>& their_bitmap, u64 their_tuple_count, bool requires_copy) const
compareContents	btrblocks/storage/Chunk.hpp	/^  bool compareContents(u8* their_data,$/;"	p	class:btrblocks::InputChunk	access:public	signature:(u8* their_data, const std::vector<BITMAP>& their_bitmap, u64 their_tuple_count, bool requires_copy) const
compress	btrblocks/compression/Compressor.hpp	/^  virtual OutputBlockStats compress(const Chunk& input_chunk, BytesArray& output_block) = 0;$/;"	p	class:btrblocks::RelationCompressor	access:public	signature:(const Chunk& input_chunk, BytesArray& output_block)
compress	btrblocks/compression/Datablock.cpp	/^OutputBlockStats Datablock::compress(const Chunk& input_chunk, BytesArray& output_block) {$/;"	f	class:btrblocks::Datablock	signature:(const Chunk& input_chunk, BytesArray& output_block)
compress	btrblocks/compression/Datablock.cpp	/^SIZE Datablock::compress(const InputChunk& input_chunk, u8* output) {$/;"	f	class:btrblocks::Datablock	signature:(const InputChunk& input_chunk, u8* output)
compress	btrblocks/compression/Datablock.cpp	/^std::vector<u8> Datablock::compress(const InputChunk& input_chunk) {$/;"	f	class:btrblocks::Datablock	signature:(const InputChunk& input_chunk)
compress	btrblocks/compression/Datablock.hpp	/^  static SIZE compress(const InputChunk& input_chunk, u8* output_buffer);$/;"	p	class:btrblocks::Datablock	access:public	signature:(const InputChunk& input_chunk, u8* output_buffer)
compress	btrblocks/compression/Datablock.hpp	/^  static vector<u8> compress(const InputChunk& input_chunk);$/;"	p	class:btrblocks::Datablock	access:public	signature:(const InputChunk& input_chunk)
compress	btrblocks/compression/SchemePicker.hpp	/^  static void compress(const Type* src,$/;"	f	class:btrblocks::CSchemePicker	access:public	signature:(const Type* src, const BITMAP* nullmap, u8* dest, u32 tuple_count, u8 allowed_cascading_level, u32& after_size, u8& scheme_code, u8 force_scheme = autoScheme(), const string& comment = Ó)
compress	btrblocks/extern/FastPFOR.cpp	/^u32 LemiereImpl<Codec>::compress(const data_t* src, u32 count, data_t* dest, SIZE& outsize) {$/;"	f	class:LemiereImpl	signature:(const data_t* src, u32 count, data_t* dest, SIZE& outsize)
compress	btrblocks/extern/FastPFOR.hpp	/^  u32 compress(const data_t* src, u32 count, data_t* dest, size_t& outsize);$/;"	p	struct:LemiereImpl	access:public	signature:(const data_t* src, u32 count, data_t* dest, size_t& outsize)
compress	btrblocks/extern/RoaringBitmap.cpp	/^std::pair<u32, BitmapType> RoaringBitmap::compress(const BITMAP* bitmap,$/;"	f	class:btrblocks::bitmap::RoaringBitmap	signature:(const BITMAP* bitmap, u8* dest, u32 tuple_count)
compress	btrblocks/extern/RoaringBitmap.hpp	/^  static std::pair<u32, BitmapType> compress(const BITMAP* bitmap, u8* dest, u32 tuple_count);$/;"	p	class:btrblocks::bitmap::RoaringBitmap	access:public	signature:(const BITMAP* bitmap, u8* dest, u32 tuple_count)
compress	btrblocks/scheme/CompressionScheme.hpp	/^  virtual u32 compress(StringArrayViewer src,$/;"	p	class:btrblocks::StringScheme	access:public	signature:(StringArrayViewer src, const BITMAP* nullmap, u8* dest, StringStats& stats)
compress	btrblocks/scheme/CompressionScheme.hpp	/^  virtual u32 compress(const DOUBLE* src,$/;"	p	class:btrblocks::DoubleScheme	access:public	signature:(const DOUBLE* src, const BITMAP* nullmap, u8* dest, DoubleStats& stats, u8 allowed_cascading_level)
compress	btrblocks/scheme/CompressionScheme.hpp	/^  virtual u32 compress(const INTEGER* src,$/;"	p	class:btrblocks::IntegerScheme	access:public	signature:(const INTEGER* src, const BITMAP* nullmap, u8* dest, SInteger32Stats& stats, u8 allowed_cascading_level)
compress	btrblocks/scheme/double/DoubleBP.cpp	/^u32 DoubleBP::compress(const DOUBLE* src,$/;"	f	class:btrblocks::doubles::DoubleBP	signature:(const DOUBLE* src, const BITMAP*, u8* dest, DoubleStats& stats, [[maybe_unused]] u8 allowed_cascading_level)
compress	btrblocks/scheme/double/DynamicDictionary.cpp	/^u32 DynamicDictionary::compress(const DOUBLE* src,$/;"	f	class:btrblocks::doubles::DynamicDictionary	signature:(const DOUBLE* src, const BITMAP* nullmap, u8* dest, DoubleStats& stats, u8 allowed_cascading_level)
compress	btrblocks/scheme/double/Frequency.cpp	/^u32 Frequency::compress(const DOUBLE* src,$/;"	f	class:btrblocks::legacy::doubles::Frequency	signature:(const DOUBLE* src, const BITMAP* nullmap, u8* dest, DoubleStats& stats, u8 allowed_cascading_level)
compress	btrblocks/scheme/double/MaxExponent.cpp	/^u32 MaxExponent::compress(const DOUBLE* src,$/;"	f	class:btrblocks::legacy::doubles::MaxExponent	signature:(const DOUBLE* src, const BITMAP* nullmap, u8* dest, DoubleStats& stats, u8 allowed_cascading_level)
compress	btrblocks/scheme/double/OneValue.cpp	/^u32 OneValue::compress(const DOUBLE* src,$/;"	f	class:btrblocks::legacy::doubles::OneValue	signature:(const DOUBLE* src, const BITMAP* nullmap, u8* dest, DoubleStats& stats, u8 allowed_cascading_level)
compress	btrblocks/scheme/double/Pseudodecimal.cpp	/^u32 Decimal::compress(const DOUBLE* src,$/;"	f	class:btrblocks::doubles::Decimal	signature:(const DOUBLE* src, const BITMAP*, u8* dest, DoubleStats& stats, u8 allowed_cascading_level)
compress	btrblocks/scheme/double/RLE.cpp	/^u32 RLE::compress(const DOUBLE* src,$/;"	f	class:btrblocks::doubles::RLE	signature:(const DOUBLE* src, const BITMAP* nullmap, u8* dest, DoubleStats& stats, u8 allowed_cascading_level)
compress	btrblocks/scheme/double/Uncompressed.cpp	/^u32 Uncompressed::compress(const DOUBLE* src,$/;"	f	class:btrblocks::legacy::doubles::Uncompressed	signature:(const DOUBLE* src, const BITMAP* nullmap, u8* dest, DoubleStats& stats, u8 allowed_cascading_level)
compress	btrblocks/scheme/integer/DynamicDictionary.cpp	/^u32 DynamicDictionary::compress(const INTEGER* src,$/;"	f	class:btrblocks::integers::DynamicDictionary	signature:(const INTEGER* src, const BITMAP* nullmap, u8* dest, SInteger32Stats& stats, u8 allowed_cascading_level)
compress	btrblocks/scheme/integer/FOR.cpp	/^u32 FOR::compress(const INTEGER* src,$/;"	f	class:btrblocks::legacy::integers::FOR	signature:(const INTEGER* src, const BITMAP* nullmap, u8* dest, SInteger32Stats& stats, u8 allowed_cascading_level)
compress	btrblocks/scheme/integer/Frequency.cpp	/^u32 Frequency::compress(const INTEGER* src,$/;"	f	class:btrblocks::integers::Frequency	signature:(const INTEGER* src, const BITMAP* nullmap, u8* dest, SInteger32Stats& stats, u8 allowed_cascading_level)
compress	btrblocks/scheme/integer/OneValue.cpp	/^u32 OneValue::compress(const INTEGER* src, const BITMAP*, u8* dest, SInteger32Stats& stats, u8) {$/;"	f	class:btrblocks::legacy::integers::OneValue	signature:(const INTEGER* src, const BITMAP*, u8* dest, SInteger32Stats& stats, u8)
compress	btrblocks/scheme/integer/PBP.cpp	/^u32 EXP_FBP::compress(const INTEGER* src, const BITMAP*, u8* dest, SInteger32Stats& stats, u8) {$/;"	f	class:btrblocks::integers::EXP_FBP	signature:(const INTEGER* src, const BITMAP*, u8* dest, SInteger32Stats& stats, u8)
compress	btrblocks/scheme/integer/PBP.cpp	/^u32 FBP64::compress(u64* src, u8* dest, u32 tuple_count) {$/;"	f	class:btrblocks::integers::FBP64	signature:(u64* src, u8* dest, u32 tuple_count)
compress	btrblocks/scheme/integer/PBP.cpp	/^u32 FBP::compress(const INTEGER* src, const BITMAP*, u8* dest, SInteger32Stats& stats, u8) {$/;"	f	class:btrblocks::integers::FBP	signature:(const INTEGER* src, const BITMAP*, u8* dest, SInteger32Stats& stats, u8)
compress	btrblocks/scheme/integer/PBP.cpp	/^u32 PBP::compress(const INTEGER* src, const BITMAP*, u8* dest, SInteger32Stats& stats, u8) {$/;"	f	class:btrblocks::integers::PBP	signature:(const INTEGER* src, const BITMAP*, u8* dest, SInteger32Stats& stats, u8)
compress	btrblocks/scheme/integer/PBP.cpp	/^u32 PBP_DELTA::compress(const INTEGER* src, const BITMAP*, u8* dest, SInteger32Stats& stats, u8) {$/;"	f	class:btrblocks::integers::PBP_DELTA	signature:(const INTEGER* src, const BITMAP*, u8* dest, SInteger32Stats& stats, u8)
compress	btrblocks/scheme/integer/PBP.hpp	/^  static u32 compress(u64* src, u8* dest, u32 tuple_count);$/;"	p	class:btrblocks::integers::FBP64	access:public	signature:(u64* src, u8* dest, u32 tuple_count)
compress	btrblocks/scheme/integer/RLE.cpp	/^u32 RLE::compress(const INTEGER* src,$/;"	f	class:btrblocks::integers::RLE	signature:(const INTEGER* src, const BITMAP* nullmap, u8* dest, SInteger32Stats& stats, u8 allowed_cascading_level)
compress	btrblocks/scheme/integer/Truncation.cpp	/^u32 Truncation16::compress(const INTEGER* src,$/;"	f	class:btrblocks::legacy::integers::Truncation16	signature:(const INTEGER* src, const BITMAP* nullmap, u8* dest, SInteger32Stats& stats, u8 allowed_cascading_level)
compress	btrblocks/scheme/integer/Truncation.cpp	/^u32 Truncation8::compress(const INTEGER* src,$/;"	f	class:btrblocks::legacy::integers::Truncation8	signature:(const INTEGER* src, const BITMAP* nullmap, u8* dest, SInteger32Stats& stats, u8 allowed_cascading_level)
compress	btrblocks/scheme/integer/Uncompressed.cpp	/^u32 Uncompressed::compress(const INTEGER* src,$/;"	f	class:btrblocks::legacy::integers::Uncompressed	signature:(const INTEGER* src, const BITMAP*, u8* dest, SInteger32Stats& stats, u8 allowed_cascading_level)
compress	btrblocks/scheme/string/DynamicDictionary.cpp	/^u32 DynamicDictionary::compress(const btrblocks::StringArrayViewer src,$/;"	f	class:btrblocks::strings::DynamicDictionary	signature:(const btrblocks::StringArrayViewer src, const BITMAP*, u8* dest, btrblocks::StringStats& stats)
compress	btrblocks/scheme/string/FixedDictionary.cpp	/^u32 Dictionary16::compress(const StringArrayViewer src,$/;"	f	class:btrblocks::legacy::strings::Dictionary16	signature:(const StringArrayViewer src, const BITMAP* nullmap, u8* dest, StringStats& stats)
compress	btrblocks/scheme/string/FixedDictionary.cpp	/^u32 Dictionary8::compress(const StringArrayViewer src,$/;"	f	class:btrblocks::legacy::strings::Dictionary8	signature:(const StringArrayViewer src, const BITMAP* nullmap, u8* dest, StringStats& stats)
compress	btrblocks/scheme/string/Fsst.cpp	/^u32 Fsst::compress(const btrblocks::StringArrayViewer src,$/;"	f	class:btrblocks::strings::Fsst	signature:(const btrblocks::StringArrayViewer src, const BITMAP*, u8* dest, btrblocks::StringStats& stats)
compress	btrblocks/scheme/string/OneValue.cpp	/^u32 OneValue::compress(const StringArrayViewer,$/;"	f	class:btrblocks::legacy::strings::OneValue	signature:(const StringArrayViewer, const BITMAP* bitmap, u8* dest, StringStats& stats)
compress	btrblocks/scheme/string/Uncompressed.cpp	/^u32 Uncompressed::compress(const StringArrayViewer src,$/;"	f	class:btrblocks::legacy::strings::Uncompressed	signature:(const StringArrayViewer src, const BITMAP*, u8* dest, StringStats& stats)
compressColumn	btrblocks/scheme/templated/DynamicDictionary.hpp	/^  static inline u32 compressColumn(const NumberType* src,$/;"	f	class:btrblocks::TDynamicDictionary	access:public	signature:(const NumberType* src, const BITMAP*, u8* dest, StatsType& stats, u8 allowed_cascading_level)
compressColumn	btrblocks/scheme/templated/Frequency.hpp	/^  static inline u32 compressColumn(const NumberType* src,$/;"	f	class:btrblocks::TFrequency	access:public	signature:(const NumberType* src, const BITMAP* nullmap, u8* dest, StatsType& stats, u8 allowed_cascading_level)
compressColumn	btrblocks/scheme/templated/RLE.hpp	/^  static inline u32 compressColumn(const NumberType* src,$/;"	f	class:btrblocks::TRLE	access:public	signature:(const NumberType* src, const BITMAP* nullmap, u8* dest, StatsType& stats, u8 allowed_cascading_level, u8 force_values = autoScheme(), u8 force_counts = autoScheme())
compressed_strings_size	btrblocks/scheme/string/Fsst.hpp	/^  u32 compressed_strings_size;$/;"	m	struct:btrblocks::strings::FsstStructure	access:public
compression_level	btrblocks/cache/ThreadCache.hpp	/^  u16 compression_level = 0;$/;"	m	struct:btrblocks::ThreadCacheContainer	access:public
compression_ratio	btrblocks/compression/Compressor.hpp	/^  double compression_ratio;  \/\/ before \/old data size$/;"	m	struct:btrblocks::OutputBlockStats	access:public
compression_type	btrblocks/compression/Datablock.hpp	/^  u8 compression_type;$/;"	m	struct:btrblocks::ColumnChunkMeta	access:public
compression_type	btrblocks/compression/Datablock.hpp	/^  u8 compression_type;$/;"	m	struct:btrblocks::ColumnMeta	access:public
condition_variable	tools/conversion/s3-management.hpp	/^std::condition_variable condition_variable;$/;"	v
condition_variable	tools/playground/test-s3-crt.cpp	/^std::condition_variable condition_variable;$/;"	v
configure	btrblocks/btrblocks.cpp	/^void BtrBlocksConfig::configure(const std::function<void(BtrBlocksConfig&)>& f) {$/;"	f	class:btrblocks::BtrBlocksConfig	signature:(const std::function<void(BtrBlocksConfig&)>& f)
configure	btrblocks/btrblocks.hpp	/^  static void configure(const std::function<void(BtrBlocksConfig&)>& f = [](BtrBlocksConfig&) {});$/;"	p	struct:btrblocks::BtrBlocksConfig	access:public	signature:(const std::function<void(BtrBlocksConfig&)>& f = [](BtrBlocksConfig&) {})
convertCSV	btrfiles/Parser.cpp	/^void convertCSV(const string csv_path, const YAML::Node &schema, const string &out_dir, const string &csv_separator)$/;"	f	namespace:btrblocks::files	signature:(const string csv_path, const YAML::Node &schema, const string &out_dir, const string &csv_separator)
convertCSV	btrfiles/btrfiles.hpp	/^void convertCSV(const string csv_path, const YAML::Node &schema, const string &out_dir, const string &csv_separator = "|");$/;"	p	namespace:btrblocks::files	signature:(const string csv_path, const YAML::Node &schema, const string &out_dir, const string &csv_separator = Ó)
converted_count	btrblocks/scheme/double/MaxExponent.hpp	/^  u32 converted_count;$/;"	m	struct:btrblocks::legacy::doubles::MaxExponentStructure	access:public
converted_count	btrblocks/scheme/double/Pseudodecimal.hpp	/^  u32 converted_count;$/;"	m	struct:btrblocks::doubles::DecimalStructure	access:public
copy	LICENSE	/^to use, copy, modify, merge, publish, distribute, sublicense, and\/or sell$/;"	v
count	btrblocks/compression/Datablock.hpp	/^  u32 count;$/;"	m	struct:btrblocks::DatablockMeta	access:public
count	btrblocks/storage/MMapVector.hpp	/^    uint64_t count;$/;"	m	struct:btrblocks::mmapvector::Vector::Data	access:public
count	btrblocks/storage/MMapVector.hpp	/^  uint64_t count;$/;"	m	struct:btrblocks::mmapvector::Vector	access:public
counts_scheme_code	btrblocks/scheme/integer/RLE.hpp	/^  u8 counts_scheme_code;$/;"	m	struct:btrblocks::integers::RLEStructure	access:public
counts_scheme_code	btrblocks/scheme/templated/RLE.hpp	/^  u8 counts_scheme_code;$/;"	m	struct:btrblocks::RLEStructure	access:public
critical	btrblocks/common/Log.hpp	/^enum class level { trace, debug, info, warn, err, critical, off };$/;"	m	class:Log::level	access:private
d1	btrblocks/scheme/double/Pseudodecimal.hpp	/^    u8 d1 : 4;$/;"	m	struct:btrblocks::doubles::DecimalStructure::Slot	access:public
d2	btrblocks/scheme/double/Pseudodecimal.hpp	/^    u8 d2 : 4;$/;"	m	struct:btrblocks::doubles::DecimalStructure::Slot	access:public
data	btrblocks/common/PerfEvent.hpp	/^    read_format data;$/;"	m	struct:PerfEvent::event	access:public
data	btrblocks/compression/Datablock.hpp	/^  u8 data[];$/;"	m	struct:btrblocks::ColumnChunkMeta	access:public
data	btrblocks/scheme/double/DoubleBP.hpp	/^  u8 data[];$/;"	m	struct:btrblocks::doubles::DoubleBPStructure	access:public
data	btrblocks/scheme/double/MaxExponent.hpp	/^  u8 data[];$/;"	m	struct:btrblocks::legacy::doubles::MaxExponentStructure	access:public
data	btrblocks/scheme/double/Pseudodecimal.hpp	/^  u8 data[];$/;"	m	struct:btrblocks::doubles::DecimalStructure	access:public
data	btrblocks/scheme/integer/DynamicDictionary.hpp	/^  u8 data[];$/;"	m	struct:btrblocks::integers::DynamicDictionaryStructure	access:public
data	btrblocks/scheme/integer/FOR.hpp	/^  u8 data[];$/;"	m	struct:btrblocks::legacy::integers::FORStructure	access:public
data	btrblocks/scheme/integer/Frequency.hpp	/^  u8 data[];$/;"	m	struct:btrblocks::integers::FrequencyStructure	access:public
data	btrblocks/scheme/integer/PBP.hpp	/^  u8 data[];$/;"	m	struct:btrblocks::integers::XPBPStructure	access:public
data	btrblocks/scheme/integer/RLE.hpp	/^  u8 data[];$/;"	m	struct:btrblocks::integers::RLEStructure	access:public
data	btrblocks/scheme/string/DynamicDictionary.hpp	/^  u8 data[];$/;"	m	struct:btrblocks::strings::DynamicDictionaryStructure	access:public
data	btrblocks/scheme/string/Fsst.hpp	/^  u8 data[];$/;"	m	struct:btrblocks::strings::FsstStructure	access:public
data	btrblocks/scheme/string/OneValue.hpp	/^  u8 data[];$/;"	m	struct:btrblocks::legacy::strings::OneValueStructure	access:public
data	btrblocks/scheme/string/Uncompressed.hpp	/^  u8 data[];$/;"	m	struct:btrblocks::legacy::strings::UncompressedStructure	access:public
data	btrblocks/scheme/templated/DynamicDictionary.hpp	/^  u8 data[];$/;"	m	struct:btrblocks::DynamicDictionaryStructure	access:public
data	btrblocks/scheme/templated/Frequency.hpp	/^  u8 data[];$/;"	m	struct:btrblocks::FrequencyStructure	access:public
data	btrblocks/scheme/templated/RLE.hpp	/^  u8 data[];$/;"	m	struct:btrblocks::RLEStructure	access:public
data	btrblocks/scheme/templated/VarDictionary.hpp	/^  u8 data[];$/;"	m	struct:btrblocks::legacy::VarDictionaryStructure	access:public
data	btrblocks/storage/Chunk.hpp	/^  unique_ptr<u8[]> data;$/;"	m	class:btrblocks::InputChunk	access:public
data	btrblocks/storage/Column.hpp	/^  Data data;$/;"	m	class:btrblocks::Column	access:public
data	btrblocks/storage/MMapVector.hpp	/^    Ptr data;$/;"	m	struct:btrblocks::mmapvector::Vector::_iterator	access:public
data	btrblocks/storage/MMapVector.hpp	/^  Data* data;$/;"	m	struct:btrblocks::mmapvector::Vector	access:public
data	btrblocks/storage/MMapVector.hpp	/^  T* data;$/;"	m	struct:btrblocks::mmapvector::Vector	access:public
data	btrblocks/storage/MMapVector.hpp	/^  Vector(Vector&& o) noexcept : count(o.count), data(o.data) {$/;"	f	struct:btrblocks::mmapvector::Vector	access:public	signature:(o.data)
data	btrblocks/storage/MMapVector.hpp	/^  Vector(Vector&& o) noexcept : fileSize(o.fileSize), data(o.data) {$/;"	f	struct:btrblocks::mmapvector::Vector	access:public	signature:(o.data)
data_sizes	btrblocks/compression/Compressor.hpp	/^  vector<SIZE> data_sizes;$/;"	m	struct:btrblocks::OutputBlockStats	access:public
debug	btrblocks/common/Log.hpp	/^enum class level { trace, debug, info, warn, err, critical, off };$/;"	m	class:Log::level	access:private
debug	btrblocks/common/Log.hpp	/^inline void debug([[maybe_unused]] Args&&... args) { \/* noop *\/$/;"	f	namespace:Log	signature:([[maybe_unused]] Args&&.... args)
decimal_index_mask	btrblocks/scheme/double/Pseudodecimal.cpp	/^const u8 decimal_index_mask = 0x1F;$/;"	m	namespace:btrblocks::doubles	file:
decompress	btrblocks/compression/Compressor.hpp	/^  virtual Chunk decompress(const BytesArray& input_block) = 0;$/;"	p	class:btrblocks::RelationCompressor	access:public	signature:(const BytesArray& input_block)
decompress	btrblocks/compression/Datablock.cpp	/^bool Datablock::decompress(const u8* data_in, BitmapWrapper** bitmap_out, u8* data_out) {$/;"	f	class:btrblocks::Datablock	signature:(const u8* data_in, BitmapWrapper** bitmap_out, u8* data_out)
decompress	btrblocks/compression/Datablock.cpp	/^btrblocks::Chunk Datablock::decompress(const BytesArray& input_db) {$/;"	f	class:btrblocks::Datablock	signature:(const BytesArray& input_db)
decompress	btrblocks/compression/Datablock.hpp	/^  static bool decompress(const u8* data_in, BitmapWrapper** bitmap_out, u8* data_out);$/;"	p	class:btrblocks::Datablock	access:public	signature:(const u8* data_in, BitmapWrapper** bitmap_out, u8* data_out)
decompress	btrblocks/extern/FastPFOR.cpp	/^const typename LemiereImpl<Codec>::data_t* LemiereImpl<Codec>::decompress(const data_t* src,$/;"	f	class:LemiereImpl	signature:(const data_t* src, u32 count, data_t* dest, SIZE& outsize)
decompress	btrblocks/extern/FastPFOR.hpp	/^  const data_t* decompress(const data_t* src, u32 count, data_t* dest, size_t& outsize);$/;"	p	struct:LemiereImpl	access:public	signature:(const data_t* src, u32 count, data_t* dest, size_t& outsize)
decompress	btrblocks/scheme/CompressionScheme.hpp	/^  virtual void decompress(DOUBLE* dest,$/;"	p	class:btrblocks::DoubleScheme	access:public	signature:(DOUBLE* dest, BitmapWrapper* bitmap, const u8* src, u32 tuple_count, u32 level)
decompress	btrblocks/scheme/CompressionScheme.hpp	/^  virtual void decompress(INTEGER* dest,$/;"	p	class:btrblocks::IntegerScheme	access:public	signature:(INTEGER* dest, BitmapWrapper* nullmap, const u8* src, u32 tuple_count, u32 level)
decompress	btrblocks/scheme/CompressionScheme.hpp	/^  virtual void decompress(u8* dest,$/;"	p	class:btrblocks::StringScheme	access:public	signature:(u8* dest, BitmapWrapper* nullmap, const u8* src, u32 tuple_count, u32 level)
decompress	btrblocks/scheme/double/DoubleBP.cpp	/^void DoubleBP::decompress(DOUBLE* dest,$/;"	f	class:btrblocks::doubles::DoubleBP	signature:(DOUBLE* dest, [[maybe_unused]] BitmapWrapper*, const u8* src, u32 tuple_count, [[maybe_unused]] u32 level)
decompress	btrblocks/scheme/double/DynamicDictionary.cpp	/^void DynamicDictionary::decompress(DOUBLE* dest,$/;"	f	class:btrblocks::doubles::DynamicDictionary	signature:(DOUBLE* dest, BitmapWrapper* nullmap, const u8* src, u32 tuple_count, u32 level)
decompress	btrblocks/scheme/double/Frequency.cpp	/^void Frequency::decompress(DOUBLE* dest,$/;"	f	class:btrblocks::legacy::doubles::Frequency	signature:(DOUBLE* dest, BitmapWrapper* nullmap, const u8* src, u32 tuple_count, u32 level)
decompress	btrblocks/scheme/double/MaxExponent.cpp	/^void MaxExponent::decompress(DOUBLE* dest,$/;"	f	class:btrblocks::legacy::doubles::MaxExponent	signature:(DOUBLE* dest, BitmapWrapper*, const u8* src, u32 tuple_count, u32 level)
decompress	btrblocks/scheme/double/OneValue.cpp	/^void OneValue::decompress(DOUBLE* dest, BitmapWrapper*, const u8* src, u32 tuple_count, u32 level) {$/;"	f	class:btrblocks::legacy::doubles::OneValue	signature:(DOUBLE* dest, BitmapWrapper*, const u8* src, u32 tuple_count, u32 level)
decompress	btrblocks/scheme/double/Pseudodecimal.cpp	/^void Decimal::decompress(DOUBLE* dest, BitmapWrapper*, const u8* src, u32 tuple_count, u32 level) {$/;"	f	class:btrblocks::doubles::Decimal	signature:(DOUBLE* dest, BitmapWrapper*, const u8* src, u32 tuple_count, u32 level)
decompress	btrblocks/scheme/double/RLE.cpp	/^void RLE::decompress(DOUBLE* dest,$/;"	f	class:btrblocks::doubles::RLE	signature:(DOUBLE* dest, BitmapWrapper* nullmap, const u8* src, u32 tuple_count, u32 level)
decompress	btrblocks/scheme/double/Uncompressed.cpp	/^void Uncompressed::decompress(DOUBLE* dest,$/;"	f	class:btrblocks::legacy::doubles::Uncompressed	signature:(DOUBLE* dest, BitmapWrapper*, const u8* src, u32 tuple_count, u32 level)
decompress	btrblocks/scheme/integer/DynamicDictionary.cpp	/^void DynamicDictionary::decompress(INTEGER* dest,$/;"	f	class:btrblocks::integers::DynamicDictionary	signature:(INTEGER* dest, BitmapWrapper* nullmap, const u8* src, u32 tuple_count, u32 level)
decompress	btrblocks/scheme/integer/FOR.cpp	/^void FOR::decompress(INTEGER* dest,$/;"	f	class:btrblocks::legacy::integers::FOR	signature:(INTEGER* dest, BitmapWrapper* nullmap, const u8* src, u32 tuple_count, u32 level)
decompress	btrblocks/scheme/integer/Frequency.cpp	/^void Frequency::decompress(INTEGER* dest,$/;"	f	class:btrblocks::integers::Frequency	signature:(INTEGER* dest, BitmapWrapper* nullmap, const u8* src, u32 tuple_count, u32 level)
decompress	btrblocks/scheme/integer/OneValue.cpp	/^void OneValue::decompress(INTEGER* dest,$/;"	f	class:btrblocks::legacy::integers::OneValue	signature:(INTEGER* dest, BitmapWrapper*, const u8* src, u32 tuple_count, u32 level)
decompress	btrblocks/scheme/integer/PBP.cpp	/^void EXP_FBP::decompress(INTEGER* dest, BitmapWrapper*, const u8* src, u32 tuple_count, u32 level) {$/;"	f	class:btrblocks::integers::EXP_FBP	signature:(INTEGER* dest, BitmapWrapper*, const u8* src, u32 tuple_count, u32 level)
decompress	btrblocks/scheme/integer/PBP.cpp	/^void FBP64::decompress(u8* dest, const u8* src, u32 tuple_count, u32 level) {$/;"	f	class:btrblocks::integers::FBP64	signature:(u8* dest, const u8* src, u32 tuple_count, u32 level)
decompress	btrblocks/scheme/integer/PBP.cpp	/^void FBP::decompress(INTEGER* dest, BitmapWrapper*, const u8* src, u32 tuple_count, u32 level) {$/;"	f	class:btrblocks::integers::FBP	signature:(INTEGER* dest, BitmapWrapper*, const u8* src, u32 tuple_count, u32 level)
decompress	btrblocks/scheme/integer/PBP.cpp	/^void PBP::decompress(INTEGER* dest, BitmapWrapper*, const u8* src, u32 tuple_count, u32 level) {$/;"	f	class:btrblocks::integers::PBP	signature:(INTEGER* dest, BitmapWrapper*, const u8* src, u32 tuple_count, u32 level)
decompress	btrblocks/scheme/integer/PBP.cpp	/^void PBP_DELTA::decompress(INTEGER* dest,$/;"	f	class:btrblocks::integers::PBP_DELTA	signature:(INTEGER* dest, BitmapWrapper*, const u8* src, u32 tuple_count, u32 level)
decompress	btrblocks/scheme/integer/PBP.hpp	/^  static void decompress(u8* dest, const u8* src, u32 tuple_count, u32 level);$/;"	p	class:btrblocks::integers::FBP64	access:public	signature:(u8* dest, const u8* src, u32 tuple_count, u32 level)
decompress	btrblocks/scheme/integer/RLE.cpp	/^void RLE::decompress(INTEGER* dest,$/;"	f	class:btrblocks::integers::RLE	signature:(INTEGER* dest, BitmapWrapper* nullmap, const u8* src, u32 tuple_count, u32 level)
decompress	btrblocks/scheme/integer/Truncation.cpp	/^void Truncation16::decompress(INTEGER* dest,$/;"	f	class:btrblocks::legacy::integers::Truncation16	signature:(INTEGER* dest, BitmapWrapper* nullmap, const u8* src, u32 tuple_count, u32 level)
decompress	btrblocks/scheme/integer/Truncation.cpp	/^void Truncation8::decompress(INTEGER* dest,$/;"	f	class:btrblocks::legacy::integers::Truncation8	signature:(INTEGER* dest, BitmapWrapper* nullmap, const u8* src, u32 tuple_count, u32 level)
decompress	btrblocks/scheme/integer/Uncompressed.cpp	/^void Uncompressed::decompress(INTEGER* dest,$/;"	f	class:btrblocks::legacy::integers::Uncompressed	signature:(INTEGER* dest, BitmapWrapper*, const u8* src, u32 tuple_count, u32 level)
decompress	btrblocks/scheme/string/DynamicDictionary.cpp	/^void DynamicDictionary::decompress(u8* dest,$/;"	f	class:btrblocks::strings::DynamicDictionary	signature:(u8* dest, BitmapWrapper*, const u8* src, u32 tuple_count, u32 level)
decompress	btrblocks/scheme/string/FixedDictionary.cpp	/^void Dictionary16::decompress(u8* dest,$/;"	f	class:btrblocks::legacy::strings::Dictionary16	signature:(u8* dest, BitmapWrapper* nullmap, const u8* src, u32 tuple_count, u32 level)
decompress	btrblocks/scheme/string/FixedDictionary.cpp	/^void Dictionary8::decompress(u8* dest,$/;"	f	class:btrblocks::legacy::strings::Dictionary8	signature:(u8* dest, BitmapWrapper* nullmap, const u8* src, u32 tuple_count, u32 level)
decompress	btrblocks/scheme/string/Fsst.cpp	/^void Fsst::decompress(u8* dest, BitmapWrapper*, const u8* src, u32 tuple_count, u32 level) {$/;"	f	class:btrblocks::strings::Fsst	signature:(u8* dest, BitmapWrapper*, const u8* src, u32 tuple_count, u32 level)
decompress	btrblocks/scheme/string/OneValue.cpp	/^void OneValue::decompress(u8* dest,$/;"	f	class:btrblocks::legacy::strings::OneValue	signature:(u8* dest, BitmapWrapper* nullmap, const u8* src, u32 tuple_count, u32 level)
decompress	btrblocks/scheme/string/Uncompressed.cpp	/^void Uncompressed::decompress(u8* dest,$/;"	f	class:btrblocks::legacy::strings::Uncompressed	signature:(u8* dest, BitmapWrapper* nullmap, const u8* src, u32 tuple_count, u32 level)
decompressAVXBlock	btrblocks/scheme/double/Pseudodecimal.cpp	/^static inline void decompressAVXBlock(DecimalIterateParam* param, uint32_t limit) {$/;"	f	namespace:btrblocks::doubles	signature:(DecimalIterateParam* param, uint32_t limit)
decompressAVXBlock1	btrblocks/scheme/double/Pseudodecimal.cpp	/^static inline void decompressAVXBlock1(DecimalIterateParam* param) {$/;"	f	namespace:btrblocks::doubles	signature:(DecimalIterateParam* param)
decompressAVXBlock2	btrblocks/scheme/double/Pseudodecimal.cpp	/^static inline void decompressAVXBlock2(DecimalIterateParam* param) {$/;"	f	namespace:btrblocks::doubles	signature:(DecimalIterateParam* param)
decompressAVXBlock4	btrblocks/scheme/double/Pseudodecimal.cpp	/^static inline void decompressAVXBlock4(DecimalIterateParam* param) {$/;"	f	namespace:btrblocks::doubles	signature:(DecimalIterateParam* param)
decompressAVXBlockUnroll	btrblocks/scheme/double/Pseudodecimal.cpp	/^static inline void decompressAVXBlockUnroll(DecimalIterateParam* param, uint32_t limit) {$/;"	f	namespace:btrblocks::doubles	signature:(DecimalIterateParam* param, uint32_t limit)
decompressColumn	btrblocks/scheme/templated/DynamicDictionary.hpp	/^    decompressColumn(DOUBLE* dest, BitmapWrapper*, const u8* src, u32 tuple_count, u32 level) {$/;"	f	class:btrblocks::TDynamicDictionary	signature:(DOUBLE* dest, BitmapWrapper*, const u8* src, u32 tuple_count, u32 level)
decompressColumn	btrblocks/scheme/templated/DynamicDictionary.hpp	/^    decompressColumn(INTEGER* dest, BitmapWrapper*, const u8* src, u32 tuple_count, u32 level) {$/;"	f	class:btrblocks::TDynamicDictionary	signature:(INTEGER* dest, BitmapWrapper*, const u8* src, u32 tuple_count, u32 level)
decompressColumn	btrblocks/scheme/templated/DynamicDictionary.hpp	/^  static inline void decompressColumn(NumberType* dest,$/;"	f	class:btrblocks::TDynamicDictionary	access:public	signature:(NumberType* dest, BitmapWrapper*, const u8* src, u32 tuple_count, u32 level)
decompressColumn	btrblocks/scheme/templated/Frequency.hpp	/^  static inline void decompressColumn(NumberType* dest,$/;"	f	class:btrblocks::TFrequency	access:public	signature:(NumberType* dest, BitmapWrapper*, const u8* src, u32 tuple_count, u32 level)
decompressColumn	btrblocks/scheme/templated/RLE.hpp	/^  static inline void decompressColumn(NumberType* dest,$/;"	f	class:btrblocks::TRLE	access:public	signature:(NumberType* dest, BitmapWrapper*, const u8* src, u32 tuple_count, u32 level)
decompressColumn	btrblocks/scheme/templated/RLE.hpp	/^inline void TRLE<DOUBLE, DoubleScheme, DoubleStats, DoubleSchemeType>::decompressColumn($/;"	f	class:btrblocks::TRLE	signature:( DOUBLE* dest, BitmapWrapper*, const u8* src, u32 tuple_count, u32 level)
decompressColumn	btrblocks/scheme/templated/RLE.hpp	/^inline void TRLE<INTEGER, IntegerScheme, SInteger32Stats, IntegerSchemeType>::decompressColumn($/;"	f	class:btrblocks::TRLE	signature:( INTEGER* dest, BitmapWrapper*, const u8* src, u32 tuple_count, u32 level)
decompressExceptionBlock	btrblocks/scheme/double/Pseudodecimal.cpp	/^static inline void decompressExceptionBlock(DecimalIterateParam* param) {$/;"	f	namespace:btrblocks::doubles	signature:(DecimalIterateParam* param)
decompressNoCopy	btrblocks/scheme/CompressionScheme.hpp	/^  virtual bool decompressNoCopy(u8* dest,$/;"	f	class:btrblocks::StringScheme	access:public	signature:(u8* dest, BitmapWrapper* nullmap, const u8* src, u32 tuple_count, u32 level)
decompressNoCopy	btrblocks/scheme/string/DynamicDictionary.cpp	/^bool DynamicDictionary::decompressNoCopy(u8* dest,$/;"	f	class:btrblocks::strings::DynamicDictionary	signature:(u8* dest, BitmapWrapper*, const u8* src, u32 tuple_count, u32 level)
decompressNoCopy	btrblocks/scheme/string/OneValue.cpp	/^bool OneValue::decompressNoCopy(u8* dest,$/;"	f	class:btrblocks::legacy::strings::OneValue	signature:(u8* dest, BitmapWrapper* nullmap, const u8* src, u32 tuple_count, u32)
decompressPart	tools/conversion/decompression-speed-s3.cpp	/^static uint64_t decompressPart(long idx) {$/;"	f	file:	signature:(long idx)
decompressRuns	btrblocks/scheme/integer/RLE.cpp	/^u32 RLE::decompressRuns(INTEGER* values,$/;"	f	class:btrblocks::integers::RLE	signature:(INTEGER* values, INTEGER* counts, BitmapWrapper* nullmap, const u8* src, u32 tuple_count, u32 level)
decompressRuns	btrblocks/scheme/integer/RLE.hpp	/^  u32 decompressRuns(INTEGER* values,$/;"	p	class:btrblocks::integers::RLE	access:public	signature:(INTEGER* values, INTEGER* counts, BitmapWrapper* nullmap, const u8* src, u32 tuple_count, u32 level)
decompressRuns	btrblocks/scheme/templated/RLE.hpp	/^  static inline u32 decompressRuns(NumberType* values,$/;"	f	class:btrblocks::TRLE	access:public	signature:(NumberType* values, INTEGER* counts, BitmapWrapper*, const u8* src, u32 tuple_count, u32 level)
decompressor	tools/conversion/s3-management.hpp	/^tbb::flow::function_node<long, uint64_t> *decompressor = nullptr;$/;"	v
defaultDoubleSchemes	btrblocks/scheme/SchemeType.hpp	/^constexpr DoubleSchemeSet defaultDoubleSchemes() {$/;"	f	class:btrblocks::IntegerSchemeType::DoubleSchemeType	access:private	signature:()
defaultIntegerSchemes	btrblocks/scheme/SchemeType.hpp	/^constexpr IntegerSchemeSet defaultIntegerSchemes() {$/;"	f	class:btrblocks::IntegerSchemeType	access:private	signature:()
defaultStringSchemes	btrblocks/scheme/SchemeType.hpp	/^constexpr StringSchemeSet defaultStringSchemes() {$/;"	f	class:btrblocks::IntegerSchemeType::DoubleSchemeType::StringSchemeType	access:private	signature:()
dict_slots	btrblocks/scheme/templated/FixedDictionary.hpp	/^  NumberType dict_slots[];$/;"	m	struct:btrblocks::FixedDictionaryStructure	access:public
die_if	btrblocks/common/Exceptions.hpp	/^#define die_if(/;"	d
disable	btrblocks/scheme/SchemeSet.hpp	/^  constexpr SchemeSet& disable(T s) {$/;"	f	struct:btrblocks::SchemeSet	access:public	signature:(T s)
disable	btrblocks/scheme/SchemeSet.hpp	/^  constexpr SchemeSet& disable(std::initializer_list<T>&& schemes) {$/;"	f	struct:btrblocks::SchemeSet	access:public	signature:(std::initializer_list<T>&& schemes)
distinct_values	btrblocks/stats/NumberStats.hpp	/^  std::map<T, u32> distinct_values;$/;"	m	struct:btrblocks::NumberStats	access:public
distinct_values	btrblocks/stats/StringStats.hpp	/^  std::set<str> distinct_values;$/;"	m	struct:btrblocks::StringStats	access:public
distribute	LICENSE	/^to use, copy, modify, merge, publish, distribute, sublicense, and\/or sell$/;"	v
do_iteration	btrblocks/scheme/double/Pseudodecimal.hpp	/^const u8 do_iteration = (1 << 0);$/;"	m	namespace:btrblocks::doubles
do_unroll	btrblocks/scheme/double/Pseudodecimal.hpp	/^const u8 do_unroll = (1 << 1);$/;"	m	namespace:btrblocks::doubles
double_schemes	btrblocks/scheme/SchemePool.hpp	/^  std::unordered_map<DoubleSchemeType, unique_ptr<DoubleScheme>> double_schemes;$/;"	m	struct:btrblocks::SchemesCollection	access:public
doubles	btrblocks/btrblocks.hpp	/^  } doubles;$/;"	m	struct:btrblocks::BtrBlocksConfig	typeref:struct:btrblocks::BtrBlocksConfig::__anon6	access:public
doubles	btrblocks/scheme/SchemeConfig.hpp	/^  } doubles;$/;"	m	struct:btrblocks::SchemeConfig	typeref:struct:btrblocks::SchemeConfig::__anon3	access:public
doubles	btrblocks/scheme/double/DoubleBP.cpp	/^namespace btrblocks::doubles {$/;"	n	class:btrblocks	file:
doubles	btrblocks/scheme/double/DoubleBP.hpp	/^namespace btrblocks::doubles {$/;"	n	class:btrblocks
doubles	btrblocks/scheme/double/DynamicDictionary.cpp	/^namespace btrblocks::doubles {$/;"	n	class:btrblocks	file:
doubles	btrblocks/scheme/double/DynamicDictionary.hpp	/^namespace btrblocks::doubles {$/;"	n	class:btrblocks
doubles	btrblocks/scheme/double/FixedDictionary.hpp	/^namespace btrblocks::legacy::doubles {$/;"	n	class:btrblocks::legacy
doubles	btrblocks/scheme/double/Frequency.cpp	/^namespace btrblocks::legacy::doubles {$/;"	n	class:btrblocks::legacy	file:
doubles	btrblocks/scheme/double/Frequency.hpp	/^namespace btrblocks::legacy::doubles {$/;"	n	class:btrblocks::legacy
doubles	btrblocks/scheme/double/MaxExponent.cpp	/^namespace btrblocks::legacy::doubles {$/;"	n	class:btrblocks::legacy	file:
doubles	btrblocks/scheme/double/MaxExponent.hpp	/^namespace btrblocks::legacy::doubles {$/;"	n	class:btrblocks::legacy
doubles	btrblocks/scheme/double/OneValue.cpp	/^namespace btrblocks::legacy::doubles {$/;"	n	class:btrblocks::legacy	file:
doubles	btrblocks/scheme/double/OneValue.hpp	/^namespace btrblocks::legacy::doubles {$/;"	n	class:btrblocks::legacy
doubles	btrblocks/scheme/double/Pseudodecimal.cpp	/^namespace btrblocks::doubles {$/;"	n	class:btrblocks	file:
doubles	btrblocks/scheme/double/Pseudodecimal.hpp	/^namespace btrblocks::doubles {$/;"	n	class:btrblocks
doubles	btrblocks/scheme/double/RLE.cpp	/^namespace btrblocks::doubles {$/;"	n	class:btrblocks	file:
doubles	btrblocks/scheme/double/RLE.hpp	/^namespace btrblocks::doubles {$/;"	n	class:btrblocks
doubles	btrblocks/scheme/double/Uncompressed.cpp	/^namespace btrblocks::legacy::doubles {$/;"	n	class:btrblocks::legacy	file:
doubles	btrblocks/scheme/double/Uncompressed.hpp	/^namespace btrblocks::legacy::doubles {$/;"	n	class:btrblocks::legacy
doubles	btrblocks/storage/Column.cpp	/^const Vector<DOUBLE>& Column::doubles() const {$/;"	f	class:btrblocks::Column	signature:() const
doubles	btrblocks/storage/Column.hpp	/^  [[nodiscard]] const Vector<DOUBLE>& doubles() const;$/;"	p	class:btrblocks::Column	access:public	signature:() const
dumpFsst	btrblocks/cache/ThreadCache.hpp	/^  static void dumpFsst([[maybe_unused]] u32 before_total,$/;"	f	class:btrblocks::ThreadCache	access:public	signature:([[maybe_unused]] u32 before_total, [[maybe_unused]] u32 before_pool, [[maybe_unused]] u32 after_pool, [[maybe_unused]] u32 after_total)
dumpPush	btrblocks/cache/ThreadCache.hpp	/^  static void dumpPush([[maybe_unused]] const string& scheme_name,$/;"	f	class:btrblocks::ThreadCache	access:public	signature:([[maybe_unused]] const string& scheme_name, [[maybe_unused]] double cf, [[maybe_unused]] u32 before, [[maybe_unused]] u32 after, [[maybe_unused]] u32 unique_count, [[maybe_unused]] const string& comment = Ó)
dumpSet	btrblocks/cache/ThreadCache.hpp	/^  static void dumpSet([[maybe_unused]] string rel_name,$/;"	f	class:btrblocks::ThreadCache	access:public	signature:([[maybe_unused]] string rel_name, [[maybe_unused]] string col_name, [[maybe_unused]] string col_type)
dump_meta	btrblocks/cache/ThreadCache.hpp	/^  DumpMeta dump_meta;$/;"	m	struct:btrblocks::ThreadCacheContainer	access:public
e	btrblocks/common/PerfEvent.hpp	/^  PerfEvent& e;$/;"	m	struct:PerfEventBlock	access:public
echo	bench.sh	/^	echo "${HELP}"$/;"	v
empty_count	btrfiles/Parser.cpp	/^  u32 empty_count = 0;  \/\/ 0 by double and integers, '' by strings$/;"	m	struct:btrblocks::files::ColumnDescriptor	file:	access:public
enable	btrblocks/scheme/SchemeSet.hpp	/^  constexpr SchemeSet& enable(T s) {$/;"	f	struct:btrblocks::SchemeSet	access:public	signature:(T s)
enable	btrblocks/scheme/SchemeSet.hpp	/^  constexpr SchemeSet& enable(std::initializer_list<T> schemes) {$/;"	f	struct:btrblocks::SchemeSet	access:public	signature:(std::initializer_list<T> schemes)
enableAll	btrblocks/scheme/SchemeSet.hpp	/^  constexpr void enableAll() { set.set(); }$/;"	f	struct:btrblocks::SchemeSet	access:public	signature:()
enableFORScheme	btrblocks/compression/SchemePicker.hpp	/^constexpr bool enableFORScheme() {$/;"	f	signature:()
end	btrblocks/storage/MMapVector.hpp	/^  [[nodiscard]] const_iterator end() const { return data + count; }$/;"	f	struct:btrblocks::mmapvector::Vector	access:public	signature:() const
end	btrblocks/storage/MMapVector.hpp	/^  [[nodiscard]] const_iterator end() const {$/;"	f	struct:btrblocks::mmapvector::Vector	access:public	signature:() const
end	btrblocks/storage/MMapVector.hpp	/^  iterator end() { return data + count; }$/;"	f	struct:btrblocks::mmapvector::Vector	access:public	signature:()
end	btrblocks/storage/MMapVector.hpp	/^  iterator end() { return {data->slot + data->count, reinterpret_cast<char*>(data)}; }$/;"	f	struct:btrblocks::mmapvector::Vector	access:public	signature:()
ensure_file	tools/playground/pseudodecimal_benchmark.cpp	/^std::string ensure_file(const std::string& object) {$/;"	f	signature:(const std::string& object)
ensure_file	tools/playground/sampling_algorithms.cpp	/^std::string ensure_file(const std::string& object) {$/;"	f	signature:(const std::string& object)
err	btrblocks/common/Log.hpp	/^enum class level { trace, debug, info, warn, err, critical, off };$/;"	m	class:Log::level	access:private
error	btrblocks/common/Log.hpp	/^inline void error([[maybe_unused]] Args&&... args) { \/* noop *\/$/;"	f	namespace:Log	signature:([[maybe_unused]] Args&&.... args)
estimation_deviation_csv	btrblocks/cache/ThreadCache.hpp	/^  std::stringstream estimation_deviation_csv;  \/\/ decision_tree$/;"	m	struct:btrblocks::ThreadCacheContainer	access:public
estimation_level	btrblocks/cache/ThreadCache.hpp	/^  u16 estimation_level = 0;$/;"	m	struct:btrblocks::ThreadCacheContainer	access:public
event	btrblocks/common/PerfEvent.hpp	/^  struct event {$/;"	s	struct:PerfEvent	access:public
events	btrblocks/common/PerfEvent.hpp	/^  std::vector<event> events;$/;"	m	struct:PerfEvent	access:public
exact_fractions_of_ten	btrblocks/scheme/double/Pseudodecimal.cpp	/^static const double exact_fractions_of_ten[] = {$/;"	m	namespace:btrblocks::doubles	file:
exact_powers_of_ten	btrblocks/scheme/double/MaxExponent.cpp	/^static const double exact_powers_of_ten[] = {$/;"	m	namespace:btrblocks::legacy::doubles	file:
exact_powers_of_ten	tools/playground/double.cpp	/^static const double exact_powers_of_ten[] = {$/;"	v	file:
exceptions_map_offset	btrblocks/scheme/double/Pseudodecimal.hpp	/^  u32 exceptions_map_offset;$/;"	m	struct:btrblocks::doubles::DecimalStructure	access:public
exceptions_offset	btrblocks/scheme/double/MaxExponent.hpp	/^  u32 exceptions_offset;$/;"	m	struct:btrblocks::legacy::doubles::MaxExponentStructure	access:public
exceptions_offset	btrblocks/scheme/integer/Frequency.hpp	/^  u32 exceptions_offset;$/;"	m	struct:btrblocks::integers::FrequencyStructure	access:public
exceptions_offset	btrblocks/scheme/templated/Frequency.hpp	/^  u32 exceptions_offset;$/;"	m	struct:btrblocks::FrequencyStructure	access:public
excluded	tools/playground/sampling_algorithms.cpp	/^  static const std::set<scheme_enum> excluded() {$/;"	f	struct:Schemes	access:public	signature:()
expectedCompressionRatio	btrblocks/scheme/CompressionScheme.cpp	/^double DoubleScheme::expectedCompressionRatio(DoubleStats& stats, u8 allowed_cascading_level) {$/;"	f	class:btrblocks::DoubleScheme	signature:(DoubleStats& stats, u8 allowed_cascading_level)
expectedCompressionRatio	btrblocks/scheme/CompressionScheme.cpp	/^double IntegerScheme::expectedCompressionRatio(SInteger32Stats& stats, u8 allowed_cascading_level) {$/;"	f	class:btrblocks::IntegerScheme	signature:(SInteger32Stats& stats, u8 allowed_cascading_level)
expectedCompressionRatio	btrblocks/scheme/CompressionScheme.hpp	/^  virtual double expectedCompressionRatio(DoubleStats& stats, [[maybe_unused]] u8 allowed_cascading_level);$/;"	p	class:btrblocks::DoubleScheme	access:public	signature:(DoubleStats& stats, [[maybe_unused]] u8 allowed_cascading_level)
expectedCompressionRatio	btrblocks/scheme/CompressionScheme.hpp	/^  virtual double expectedCompressionRatio(SInteger32Stats& stats, [[maybe_unused]] u8 allowed_cascading_level);$/;"	p	class:btrblocks::IntegerScheme	access:public	signature:(SInteger32Stats& stats, [[maybe_unused]] u8 allowed_cascading_level)
expectedCompressionRatio	btrblocks/scheme/CompressionScheme.hpp	/^  virtual double expectedCompressionRatio(StringStats& stats, [[maybe_unused]] u8 allowed_cascading_level) = 0;$/;"	p	class:btrblocks::StringScheme	access:public	signature:(StringStats& stats, [[maybe_unused]] u8 allowed_cascading_level)
expectedCompressionRatio	btrblocks/scheme/double/DynamicDictionary.cpp	/^double DynamicDictionary::expectedCompressionRatio(btrblocks::DoubleStats& stats,$/;"	f	class:btrblocks::doubles::DynamicDictionary	signature:(btrblocks::DoubleStats& stats, u8 allowed_cascading_level)
expectedCompressionRatio	btrblocks/scheme/double/Frequency.cpp	/^double Frequency::expectedCompressionRatio(DoubleStats& stats, u8 allowed_cascading_level) {$/;"	f	class:btrblocks::legacy::doubles::Frequency	signature:(DoubleStats& stats, u8 allowed_cascading_level)
expectedCompressionRatio	btrblocks/scheme/double/OneValue.cpp	/^double OneValue::expectedCompressionRatio(DoubleStats& stats, u8 allowed_cascading_level) {$/;"	f	class:btrblocks::legacy::doubles::OneValue	signature:(DoubleStats& stats, u8 allowed_cascading_level)
expectedCompressionRatio	btrblocks/scheme/double/RLE.cpp	/^double RLE::expectedCompressionRatio(DoubleStats& stats, u8 allowed_cascading_level) {$/;"	f	class:btrblocks::doubles::RLE	signature:(DoubleStats& stats, u8 allowed_cascading_level)
expectedCompressionRatio	btrblocks/scheme/double/Uncompressed.cpp	/^double Uncompressed::expectedCompressionRatio(DoubleStats& stats, u8 allowed_cascading_level) {$/;"	f	class:btrblocks::legacy::doubles::Uncompressed	signature:(DoubleStats& stats, u8 allowed_cascading_level)
expectedCompressionRatio	btrblocks/scheme/integer/DynamicDictionary.cpp	/^double DynamicDictionary::expectedCompressionRatio(SInteger32Stats& stats,$/;"	f	class:btrblocks::integers::DynamicDictionary	signature:(SInteger32Stats& stats, u8 allowed_cascading_level)
expectedCompressionRatio	btrblocks/scheme/integer/FOR.cpp	/^double FOR::expectedCompressionRatio(SInteger32Stats& stats, u8 allowed_cascading_level) {$/;"	f	class:btrblocks::legacy::integers::FOR	signature:(SInteger32Stats& stats, u8 allowed_cascading_level)
expectedCompressionRatio	btrblocks/scheme/integer/Frequency.cpp	/^double Frequency::expectedCompressionRatio(SInteger32Stats& stats, u8 allowed_cascading_level) {$/;"	f	class:btrblocks::integers::Frequency	signature:(SInteger32Stats& stats, u8 allowed_cascading_level)
expectedCompressionRatio	btrblocks/scheme/integer/OneValue.cpp	/^double OneValue::expectedCompressionRatio(SInteger32Stats& stats, u8 allowed_cascading_level) {$/;"	f	class:btrblocks::legacy::integers::OneValue	signature:(SInteger32Stats& stats, u8 allowed_cascading_level)
expectedCompressionRatio	btrblocks/scheme/integer/PBP.cpp	/^double EXP_FBP::expectedCompressionRatio(SInteger32Stats& stats, u8 allowed_cascading_level) {$/;"	f	class:btrblocks::integers::EXP_FBP	signature:(SInteger32Stats& stats, u8 allowed_cascading_level)
expectedCompressionRatio	btrblocks/scheme/integer/PBP.cpp	/^double FBP::expectedCompressionRatio(SInteger32Stats& stats, u8 allowed_cascading_level) {$/;"	f	class:btrblocks::integers::FBP	signature:(SInteger32Stats& stats, u8 allowed_cascading_level)
expectedCompressionRatio	btrblocks/scheme/integer/PBP.cpp	/^double PBP_DELTA::expectedCompressionRatio(SInteger32Stats& stats, u8 allowed_cascading_level) {$/;"	f	class:btrblocks::integers::PBP_DELTA	signature:(SInteger32Stats& stats, u8 allowed_cascading_level)
expectedCompressionRatio	btrblocks/scheme/integer/RLE.cpp	/^double RLE::expectedCompressionRatio(SInteger32Stats& stats, u8 allowed_cascading_level) {$/;"	f	class:btrblocks::integers::RLE	signature:(SInteger32Stats& stats, u8 allowed_cascading_level)
expectedCompressionRatio	btrblocks/scheme/integer/Truncation.cpp	/^double Truncation16::expectedCompressionRatio(SInteger32Stats& stats, u8 allowed_cascading_level) {$/;"	f	class:btrblocks::legacy::integers::Truncation16	signature:(SInteger32Stats& stats, u8 allowed_cascading_level)
expectedCompressionRatio	btrblocks/scheme/integer/Truncation.cpp	/^double Truncation8::expectedCompressionRatio(SInteger32Stats& stats, u8 allowed_cascading_level) {$/;"	f	class:btrblocks::legacy::integers::Truncation8	signature:(SInteger32Stats& stats, u8 allowed_cascading_level)
expectedCompressionRatio	btrblocks/scheme/integer/Uncompressed.cpp	/^double Uncompressed::expectedCompressionRatio(SInteger32Stats&, u8 allowed_cascading_level) {$/;"	f	class:btrblocks::legacy::integers::Uncompressed	signature:(SInteger32Stats&, u8 allowed_cascading_level)
expectedCompressionRatio	btrblocks/scheme/string/DynamicDictionary.cpp	/^double DynamicDictionary::expectedCompressionRatio(StringStats& stats, u8) {$/;"	f	class:btrblocks::strings::DynamicDictionary	signature:(StringStats& stats, u8)
expectedCompressionRatio	btrblocks/scheme/string/FixedDictionary.cpp	/^double Dictionary16::expectedCompressionRatio(StringStats& stats, u8 allowed_cascading_level) {$/;"	f	class:btrblocks::legacy::strings::Dictionary16	signature:(StringStats& stats, u8 allowed_cascading_level)
expectedCompressionRatio	btrblocks/scheme/string/FixedDictionary.cpp	/^double Dictionary8::expectedCompressionRatio(StringStats& stats, u8 allowed_cascading_level) {$/;"	f	class:btrblocks::legacy::strings::Dictionary8	signature:(StringStats& stats, u8 allowed_cascading_level)
expectedCompressionRatio	btrblocks/scheme/string/Fsst.cpp	/^double Fsst::expectedCompressionRatio(StringStats& stats, u8) {$/;"	f	class:btrblocks::strings::Fsst	signature:(StringStats& stats, u8)
expectedCompressionRatio	btrblocks/scheme/string/OneValue.cpp	/^double OneValue::expectedCompressionRatio(StringStats& stats, u8 allowed_cascading_level) {$/;"	f	class:btrblocks::legacy::strings::OneValue	signature:(StringStats& stats, u8 allowed_cascading_level)
expectedCompressionRatio	btrblocks/scheme/string/Uncompressed.cpp	/^double Uncompressed::expectedCompressionRatio(StringStats& stats, u8 allowed_cascading_level) {$/;"	f	class:btrblocks::legacy::strings::Uncompressed	signature:(StringStats& stats, u8 allowed_cascading_level)
expectedCompressionRatio	btrblocks/scheme/templated/DynamicDictionary.hpp	/^  static inline double expectedCompressionRatio(StatsType& stats, u8 allowed_cascading_level) {$/;"	f	class:btrblocks::TDynamicDictionary	access:public	signature:(StatsType& stats, u8 allowed_cascading_level)
expectedCompressionRatio	btrblocks/scheme/templated/Frequency.hpp	/^  static inline double expectedCompressionRatio(StatsType& stats) {$/;"	f	class:btrblocks::TFrequency	access:public	signature:(StatsType& stats)
exponent_exception_code	btrblocks/scheme/double/MaxExponent.cpp	/^const u8 exponent_exception_code = 23;$/;"	m	namespace:btrblocks::legacy::doubles	file:
exponent_exception_code	btrblocks/scheme/double/Pseudodecimal.cpp	/^const u8 exponent_exception_code = 23;$/;"	m	namespace:btrblocks::doubles	file:
exponents_offset	btrblocks/scheme/double/Pseudodecimal.hpp	/^  u32 exponents_offset;$/;"	m	struct:btrblocks::doubles::DecimalStructure	access:public
exponents_ptr	btrblocks/scheme/double/Pseudodecimal.cpp	/^  INTEGER* exponents_ptr;$/;"	m	struct:btrblocks::doubles::DecimalIterateParam	file:	access:public
exponents_scheme	btrblocks/scheme/double/Pseudodecimal.hpp	/^  u8 exponents_scheme;$/;"	m	struct:btrblocks::doubles::DecimalStructure	access:public
f	.cache/clangd/index/decompression-speed.cpp.C2C21CC4924B0786.idx	/^RIFF,/;"	v
fd	btrblocks/common/PerfEvent.hpp	/^    int fd;$/;"	m	struct:PerfEvent::event	access:public
fileSize	btrblocks/storage/MMapVector.hpp	/^  uint64_t fileSize;$/;"	m	struct:btrblocks::mmapvector::Vector	access:public
files	btrfiles/Parser.cpp	/^namespace btrblocks::files {$/;"	n	class:btrblocks	file:
files	btrfiles/Relation.cpp	/^namespace btrblocks::files {$/;"	n	class:btrblocks	file:
files	btrfiles/btrfiles.hpp	/^namespace btrblocks::files {$/;"	n	class:btrblocks
fixTupleCount	btrblocks/storage/Relation.cpp	/^void Relation::fixTupleCount() {$/;"	f	class:btrblocks::Relation	signature:()
fixTupleCount	btrblocks/storage/Relation.hpp	/^  void fixTupleCount();$/;"	p	class:btrblocks::Relation	access:private	signature:()
format	tags	/^!_TAG_FILE_FORMAT	2	\/extended format; --format=1 will not append ;" to lines\/$/;"	v
free_buffers	tools/playground/test-s3-crt.cpp	/^static void free_buffers() {$/;"	f	file:	signature:()
fsst	btrblocks/cache/ThreadCache.hpp	/^  bool fsst = false;$/;"	m	struct:btrblocks::ThreadCacheContainer	access:public
fsst_csv	btrblocks/cache/ThreadCache.hpp	/^  std::stringstream fsst_csv;                  \/\/ fsst$/;"	m	struct:btrblocks::ThreadCacheContainer	access:public
fsst_offsets_offset	btrblocks/scheme/string/DynamicDictionary.hpp	/^  u32 fsst_offsets_offset;$/;"	m	struct:btrblocks::strings::DynamicDictionaryStructure	access:public
fullBitmap	btrblocks/storage/Column.cpp	/^Vector<BITMAP> Column::fullBitmap(SIZE count) {$/;"	f	class:btrblocks::Column	signature:(SIZE count)
fullBitmap	btrblocks/storage/Column.hpp	/^  static Vector<BITMAP> fullBitmap(SIZE count);$/;"	p	class:btrblocks::Column	access:public	signature:(SIZE count)
fullDescription	btrblocks/scheme/CompressionScheme.hpp	/^  virtual string fullDescription(const u8*) {$/;"	f	class:btrblocks::DoubleScheme	access:public	signature:(const u8*)
fullDescription	btrblocks/scheme/CompressionScheme.hpp	/^  virtual string fullDescription(const u8*) {$/;"	f	class:btrblocks::IntegerScheme	access:public	signature:(const u8*)
fullDescription	btrblocks/scheme/CompressionScheme.hpp	/^  virtual string fullDescription(const u8*) {$/;"	f	class:btrblocks::StringScheme	access:public	signature:(const u8*)
fullDescription	btrblocks/scheme/double/DynamicDictionary.cpp	/^string DynamicDictionary::fullDescription(const u8* src) {$/;"	f	class:btrblocks::doubles::DynamicDictionary	signature:(const u8* src)
fullDescription	btrblocks/scheme/double/Frequency.cpp	/^string Frequency::fullDescription(const u8* src) {$/;"	f	class:btrblocks::legacy::doubles::Frequency	signature:(const u8* src)
fullDescription	btrblocks/scheme/double/Pseudodecimal.cpp	/^string Decimal::fullDescription(const u8* src) {$/;"	f	class:btrblocks::doubles::Decimal	signature:(const u8* src)
fullDescription	btrblocks/scheme/double/RLE.cpp	/^string RLE::fullDescription(const u8* src) {$/;"	f	class:btrblocks::doubles::RLE	signature:(const u8* src)
fullDescription	btrblocks/scheme/integer/DynamicDictionary.cpp	/^string DynamicDictionary::fullDescription(const u8* src) {$/;"	f	class:btrblocks::integers::DynamicDictionary	signature:(const u8* src)
fullDescription	btrblocks/scheme/integer/FOR.cpp	/^std::string FOR::fullDescription(const u8* src) {$/;"	f	class:btrblocks::legacy::integers::FOR	signature:(const u8* src)
fullDescription	btrblocks/scheme/integer/Frequency.cpp	/^std::string Frequency::fullDescription(const u8* src) {$/;"	f	class:btrblocks::integers::Frequency	signature:(const u8* src)
fullDescription	btrblocks/scheme/integer/RLE.cpp	/^std::string RLE::fullDescription(const u8* src) {$/;"	f	class:btrblocks::integers::RLE	signature:(const u8* src)
fullDescription	btrblocks/scheme/string/DynamicDictionary.cpp	/^std::string DynamicDictionary::fullDescription(const u8* src) {$/;"	f	class:btrblocks::strings::DynamicDictionary	signature:(const u8* src)
fullDescription	btrblocks/scheme/string/Fsst.cpp	/^std::string Fsst::fullDescription(const u8* src) {$/;"	f	class:btrblocks::strings::Fsst	signature:(const u8* src)
fullDescription	btrblocks/scheme/templated/DynamicDictionary.hpp	/^  static inline string fullDescription(const u8* src, const string& selfDescription) {$/;"	f	class:btrblocks::TDynamicDictionary	access:public	signature:(const u8* src, const string& selfDescription)
fullDescription	btrblocks/scheme/templated/Frequency.hpp	/^  static inline string fullDescription(const u8* src, const string& selfDescription) {$/;"	f	class:btrblocks::TFrequency	access:public	signature:(const u8* src, const string& selfDescription)
fullDescription	btrblocks/scheme/templated/RLE.hpp	/^  static inline string fullDescription(const u8* src, const string& selfDescription) {$/;"	f	class:btrblocks::TRLE	access:public	signature:(const u8* src, const string& selfDescription)
g	tools/conversion/s3-management.hpp	/^tbb::flow::graph g;$/;"	v
generateData	tools/examples/compression.cpp	/^btrblocks::Vector<T> generateData(size_t size, size_t unique, size_t runlength, int seed = 42) {$/;"	f	signature:(size_t size, size_t unique, size_t runlength, int seed = 42)
generateStats	btrblocks/stats/NumberStats.hpp	/^  static NumberStats generateStats(const T* src, const BITMAP* nullmap, u32 tuple_count) {$/;"	f	struct:btrblocks::NumberStats	access:public	signature:(const T* src, const BITMAP* nullmap, u32 tuple_count)
generateStats	btrblocks/stats/StringStats.cpp	/^StringStats StringStats::generateStats(const btrblocks::StringArrayViewer src,$/;"	f	class:btrblocks::StringStats	signature:(const btrblocks::StringArrayViewer src, const BITMAP* nullmap, u32 tuple_count, SIZE column_data_size)
generateStats	btrblocks/stats/StringStats.hpp	/^  static StringStats generateStats(const StringArrayViewer src,$/;"	p	struct:btrblocks::StringStats	access:public	signature:(const StringArrayViewer src, const BITMAP* nullmap, u32 tuple_count, SIZE column_data_size)
generate_and_upload	tools/playground/generate_s3_data.cpp	/^static void generate_and_upload(const Aws::S3Crt::S3CrtClient& s3_client,$/;"	f	file:	signature:(const Aws::S3Crt::S3CrtClient& s3_client, const std::string& bucket, long number_of_objects, long object_size)
generate_and_upload_multipart	tools/playground/generate_s3_data.cpp	/^static void generate_and_upload_multipart(const Aws::S3Crt::S3CrtClient& s3_client,$/;"	f	file:	signature:(const Aws::S3Crt::S3CrtClient& s3_client, const std::string& bucket, long number_of_objects, long object_size)
generate_data	tools/playground/generate_s3_data.cpp	/^static void generate_data(std::shared_ptr<std::stringstream>& sstream, long object_size) {$/;"	f	file:	signature:(std::shared_ptr<std::stringstream>& sstream, long object_size)
get	btrblocks/btrblocks.hpp	/^  static BtrBlocksConfig& get() {$/;"	f	struct:btrblocks::BtrBlocksConfig	access:public	signature:()
get	btrblocks/cache/ThreadCache.hpp	/^  static ThreadCacheContainer& get() {$/;"	f	class:btrblocks::ThreadCache	access:public	signature:()
get	btrblocks/scheme/SchemeConfig.hpp	/^  static SchemeConfig& get() {$/;"	f	struct:btrblocks::SchemeConfig	access:public	signature:()
get	btrblocks/storage/Chunk.hpp	/^  inline T& get(u32 c, u32 i) const {$/;"	f	class:btrblocks::Chunk	access:public	signature:(u32 c, u32 i) const
get	btrblocks/storage/StringArrayViewer.hpp	/^  inline static const str get(const u8* slots_ptr, u32 i) {$/;"	f	struct:btrblocks::StringArrayViewer	access:public	signature:(const u8* slots_ptr, u32 i)
getBasicSchemeDescription	btrblocks/compression/BtrReader.cpp	/^string BtrReader::getBasicSchemeDescription(u32 index) {$/;"	f	class:btrblocks::BtrReader	signature:(u32 index)
getBasicSchemeDescription	btrblocks/compression/BtrReader.hpp	/^  [[nodiscard]] string getBasicSchemeDescription(u32 index);$/;"	p	class:btrblocks::BtrReader	access:public	signature:(u32 index)
getBitmap	btrblocks/compression/BtrReader.cpp	/^BitmapWrapper* BtrReader::getBitmap(u32 index) {$/;"	f	class:btrblocks::BtrReader	signature:(u32 index)
getBitmap	btrblocks/compression/BtrReader.hpp	/^  [[nodiscard]] BitmapWrapper* getBitmap(u32 index);$/;"	p	class:btrblocks::BtrReader	access:public	signature:(u32 index)
getBitsNeeded	btrblocks/common/Utils.hpp	/^  static constexpr u32 getBitsNeeded(s32 input) {$/;"	f	class:btrblocks::Utils	access:public	signature:(s32 input)
getBitsNeeded	btrblocks/common/Utils.hpp	/^  static constexpr u32 getBitsNeeded(u32 input) {$/;"	f	class:btrblocks::Utils	access:public	signature:(u32 input)
getBitsNeeded	btrblocks/common/Utils.hpp	/^  static constexpr u32 getBitsNeeded(u64 input) {$/;"	f	class:btrblocks::Utils	access:public	signature:(u64 input)
getCPUs	btrblocks/common/PerfEvent.hpp	/^  double getCPUs() { return getCounter("task") \/ (getDuration() * 1e9); }$/;"	f	struct:PerfEvent	access:public	signature:()
getChunk	btrblocks/storage/Relation.cpp	/^Chunk Relation::getChunk(const vector<btrblocks::Range>& ranges, SIZE chunk_i) const {$/;"	f	class:btrblocks::Relation	signature:(const vector<btrblocks::Range>& ranges, SIZE chunk_i) const
getChunk	btrblocks/storage/Relation.hpp	/^  [[nodiscard]] Chunk getChunk(const vector<Range>& ranges, SIZE chunk_i) const;$/;"	p	class:btrblocks::Relation	access:public	signature:(const vector<Range>& ranges, SIZE chunk_i) const
getChunkCount	btrblocks/compression/BtrReader.hpp	/^  [[nodiscard]] inline u32 getChunkCount() { return this->getPartMetadata()->num_chunks; }$/;"	f	class:btrblocks::BtrReader	access:public	signature:()
getChunkMetadata	btrblocks/compression/BtrReader.hpp	/^  [[nodiscard]] inline const ColumnChunkMeta* getChunkMetadata(u32 index) {$/;"	f	class:btrblocks::BtrReader	access:public	signature:(u32 index)
getColumnType	btrblocks/compression/BtrReader.hpp	/^  [[nodiscard]] inline ColumnType getColumnType() { return this->getChunkMetadata(0)->type; }$/;"	f	class:btrblocks::BtrReader	access:public	signature:()
getCompressedColumn	btrblocks/compression/Datablock.cpp	/^void Datablock::getCompressedColumn(const BytesArray& input_db, u32 col_i, u8*& ptr, u32& size) {$/;"	f	class:btrblocks::Datablock	signature:(const BytesArray& input_db, u32 col_i, u8*& ptr, u32& size)
getCompressedColumn	btrblocks/compression/Datablock.hpp	/^  virtual void getCompressedColumn(const BytesArray& input_db, u32 col_i, u8*& ptr, u32& size);$/;"	p	class:btrblocks::Datablock	access:public	signature:(const BytesArray& input_db, u32 col_i, u8*& ptr, u32& size)
getCounter	btrblocks/common/PerfEvent.hpp	/^  double getCounter(const std::string& name) {$/;"	f	struct:PerfEvent	access:public	signature:(const std::string& name)
getDecompressedDataSize	btrblocks/compression/BtrReader.cpp	/^u32 BtrReader::getDecompressedDataSize(u32 index) {$/;"	f	class:btrblocks::BtrReader	signature:(u32 index)
getDecompressedDataSize	btrblocks/compression/BtrReader.hpp	/^  [[nodiscard]] u32 getDecompressedDataSize(u32 index);$/;"	p	class:btrblocks::BtrReader	access:public	signature:(u32 index)
getDecompressedSize	btrblocks/compression/BtrReader.cpp	/^u32 BtrReader::getDecompressedSize(u32 index) {$/;"	f	class:btrblocks::BtrReader	signature:(u32 index)
getDecompressedSize	btrblocks/compression/BtrReader.hpp	/^  [[nodiscard]] u32 getDecompressedSize(u32 index);$/;"	p	class:btrblocks::BtrReader	access:public	signature:(u32 index)
getDecompressedSize	btrblocks/scheme/CompressionScheme.hpp	/^  virtual u32 getDecompressedSize(const u8* src, u32 tuple_count, BitmapWrapper* nullmap) = 0;$/;"	p	class:btrblocks::StringScheme	access:public	signature:(const u8* src, u32 tuple_count, BitmapWrapper* nullmap)
getDecompressedSize	btrblocks/scheme/string/DynamicDictionary.cpp	/^u32 DynamicDictionary::getDecompressedSize(const u8* src, u32 tuple_count, BitmapWrapper* nullmap) {$/;"	f	class:btrblocks::strings::DynamicDictionary	signature:(const u8* src, u32 tuple_count, BitmapWrapper* nullmap)
getDecompressedSize	btrblocks/scheme/string/FixedDictionary.cpp	/^u32 Dictionary16::getDecompressedSize(const u8* src, u32 tuple_count, BitmapWrapper* nullmap) {$/;"	f	class:btrblocks::legacy::strings::Dictionary16	signature:(const u8* src, u32 tuple_count, BitmapWrapper* nullmap)
getDecompressedSize	btrblocks/scheme/string/FixedDictionary.cpp	/^u32 Dictionary8::getDecompressedSize(const u8* src, u32 tuple_count, BitmapWrapper* nullmap) {$/;"	f	class:btrblocks::legacy::strings::Dictionary8	signature:(const u8* src, u32 tuple_count, BitmapWrapper* nullmap)
getDecompressedSize	btrblocks/scheme/string/Fsst.cpp	/^u32 Fsst::getDecompressedSize(const u8* src, u32, BitmapWrapper*) {$/;"	f	class:btrblocks::strings::Fsst	signature:(const u8* src, u32, BitmapWrapper*)
getDecompressedSize	btrblocks/scheme/string/OneValue.cpp	/^u32 OneValue::getDecompressedSize(const u8* src, u32 tuple_count, BitmapWrapper* nullmap) {$/;"	f	class:btrblocks::legacy::strings::OneValue	signature:(const u8* src, u32 tuple_count, BitmapWrapper* nullmap)
getDecompressedSize	btrblocks/scheme/string/Uncompressed.cpp	/^u32 Uncompressed::getDecompressedSize(const u8* src, u32 tuple_count, BitmapWrapper* nullmap) {$/;"	f	class:btrblocks::legacy::strings::Uncompressed	signature:(const u8* src, u32 tuple_count, BitmapWrapper* nullmap)
getDecompressedSizeNoCopy	btrblocks/scheme/CompressionScheme.hpp	/^  virtual u32 getDecompressedSizeNoCopy(const u8* src, u32 tuple_count, BitmapWrapper* nullmap) {$/;"	f	class:btrblocks::StringScheme	access:public	signature:(const u8* src, u32 tuple_count, BitmapWrapper* nullmap)
getDecompressedSizeNoCopy	btrblocks/scheme/string/DynamicDictionary.cpp	/^u32 DynamicDictionary::getDecompressedSizeNoCopy(const u8* src,$/;"	f	class:btrblocks::strings::DynamicDictionary	signature:(const u8* src, u32 tuple_count, BitmapWrapper* nullmap)
getDecompressedSizeNoCopy	btrblocks/scheme/string/OneValue.cpp	/^u32 OneValue::getDecompressedSizeNoCopy(const u8* src, u32 tuple_count, BitmapWrapper*) {$/;"	f	class:btrblocks::legacy::strings::OneValue	signature:(const u8* src, u32 tuple_count, BitmapWrapper*)
getDuration	btrblocks/common/PerfEvent.hpp	/^  double getDuration() { return std::chrono::duration<double>(stopTime - startTime).count(); }$/;"	f	struct:PerfEvent	access:public	signature:()
getFORScheme	btrblocks/compression/SchemePicker.hpp	/^  static DoubleScheme& getFORScheme() {$/;"	f	class:btrblocks::TypeWrapper	access:public	signature:()
getFORScheme	btrblocks/compression/SchemePicker.hpp	/^  static IntegerScheme& getFORScheme() { return getScheme(IntegerSchemeType::FOR); }$/;"	f	class:btrblocks::TypeWrapper	access:public	signature:()
getFORScheme	btrblocks/compression/SchemePicker.hpp	/^  static StringScheme& getFORScheme() {$/;"	f	class:btrblocks::TypeWrapper	access:public	signature:()
getGHz	btrblocks/common/PerfEvent.hpp	/^  double getGHz() { return getCounter("cycle") \/ getCounter("task"); }$/;"	f	struct:PerfEvent	access:public	signature:()
getIPC	btrblocks/common/PerfEvent.hpp	/^  double getIPC() { return getCounter("instr") \/ getCounter("cycle"); }$/;"	f	struct:PerfEvent	access:public	signature:()
getInputChunk	btrblocks/storage/Relation.cpp	/^InputChunk Relation::getInputChunk(const Range& range,$/;"	f	class:btrblocks::Relation	signature:(const Range& range, [[maybe_unused]] SIZE chunk_i, u32 column) const
getInputChunk	btrblocks/storage/Relation.hpp	/^  [[nodiscard]] InputChunk getInputChunk(const Range& range,$/;"	p	class:btrblocks::Relation	access:public	signature:(const Range& range, [[maybe_unused]] SIZE chunk_i, u32 column) const
getOverrideScheme	btrblocks/compression/SchemePicker.hpp	/^  static u8& getOverrideScheme() {$/;"	f	class:btrblocks::TypeWrapper	access:public	signature:()
getPartMetadata	btrblocks/compression/BtrReader.hpp	/^  [[nodiscard]] inline const ColumnPartMetadata* getPartMetadata() {$/;"	f	class:btrblocks::BtrReader	access:public	signature:()
getRanges	btrblocks/storage/Relation.cpp	/^vector<tuple<u64, u64>> Relation::getRanges(btrblocks::SplitStrategy strategy,$/;"	f	class:btrblocks::Relation	signature:(btrblocks::SplitStrategy strategy, u32 max_chunk_count) const
getRanges	btrblocks/storage/Relation.hpp	/^  [[nodiscard]] vector<Range> getRanges(btrblocks::SplitStrategy strategy,$/;"	p	class:btrblocks::Relation	access:public	signature:(btrblocks::SplitStrategy strategy, u32 max_chunk_count) const
getScheme	btrblocks/compression/SchemePicker.hpp	/^  static DoubleScheme& getScheme(DoubleSchemeType code) { return *getSchemes()[code]; }$/;"	f	class:btrblocks::TypeWrapper	access:public	signature:(DoubleSchemeType code)
getScheme	btrblocks/compression/SchemePicker.hpp	/^  static DoubleScheme& getScheme(u8 code) {$/;"	f	class:btrblocks::TypeWrapper	access:public	signature:(u8 code)
getScheme	btrblocks/compression/SchemePicker.hpp	/^  static IntegerScheme& getScheme(IntegerSchemeType code) { return *getSchemes()[code]; }$/;"	f	class:btrblocks::TypeWrapper	access:public	signature:(IntegerSchemeType code)
getScheme	btrblocks/compression/SchemePicker.hpp	/^  static IntegerScheme& getScheme(u8 code) {$/;"	f	class:btrblocks::TypeWrapper	access:public	signature:(u8 code)
getScheme	btrblocks/compression/SchemePicker.hpp	/^  static StringScheme& getScheme(StringSchemeType code) { return *getSchemes()[code]; }$/;"	f	class:btrblocks::TypeWrapper	access:public	signature:(StringSchemeType code)
getScheme	btrblocks/compression/SchemePicker.hpp	/^  static StringScheme& getScheme(u8 code) {$/;"	f	class:btrblocks::TypeWrapper	access:public	signature:(u8 code)
getSchemeDescription	btrblocks/compression/BtrReader.cpp	/^string BtrReader::getSchemeDescription(u32 index) {$/;"	f	class:btrblocks::BtrReader	signature:(u32 index)
getSchemeDescription	btrblocks/compression/BtrReader.hpp	/^  [[nodiscard]] string getSchemeDescription(u32 index);$/;"	p	class:btrblocks::BtrReader	access:public	signature:(u32 index)
getSchemeRef	test/test-cases/TestHelper.hpp	/^   T& getSchemeRef();$/;"	p	struct:EnforceScheme	access:public	signature:()
getSchemeRef	test/test-cases/TestHelper.hpp	/^inline DoubleSchemeType& EnforceScheme<DoubleSchemeType>::getSchemeRef() {$/;"	f	class:EnforceScheme	signature:()
getSchemeRef	test/test-cases/TestHelper.hpp	/^inline IntegerSchemeType& EnforceScheme<IntegerSchemeType>::getSchemeRef() {$/;"	f	class:EnforceScheme	signature:()
getSchemeRef	test/test-cases/TestHelper.hpp	/^inline StringSchemeType& EnforceScheme<StringSchemeType>::getSchemeRef() {$/;"	f	class:EnforceScheme	signature:()
getSchemes	btrblocks/compression/SchemePicker.hpp	/^  static std::unordered_map<DoubleSchemeType, unique_ptr<DoubleScheme>>& getSchemes() {$/;"	f	class:btrblocks::TypeWrapper	access:public	signature:()
getSchemes	btrblocks/compression/SchemePicker.hpp	/^  static std::unordered_map<IntegerSchemeType, unique_ptr<IntegerScheme>>& getSchemes() {$/;"	f	class:btrblocks::TypeWrapper	access:public	signature:()
getSchemes	btrblocks/compression/SchemePicker.hpp	/^  static std::unordered_map<StringSchemeType, unique_ptr<StringScheme>>& getSchemes() {$/;"	f	class:btrblocks::TypeWrapper	access:public	signature:()
getStream	tools/playground/test-s3-crt.cpp	/^static Aws::IOStream* getStream() {$/;"	f	file:	signature:()
getTotalLength	btrblocks/scheme/CompressionScheme.hpp	/^  virtual u32 getTotalLength(const u8* src, u32 tuple_count, BitmapWrapper* nullmap) = 0;$/;"	p	class:btrblocks::StringScheme	access:public	signature:(const u8* src, u32 tuple_count, BitmapWrapper* nullmap)
getTotalLength	btrblocks/scheme/string/DynamicDictionary.cpp	/^u32 DynamicDictionary::getTotalLength(const u8* src, u32 tuple_count, BitmapWrapper* nullmap) {$/;"	f	class:btrblocks::strings::DynamicDictionary	signature:(const u8* src, u32 tuple_count, BitmapWrapper* nullmap)
getTotalLength	btrblocks/scheme/string/FixedDictionary.cpp	/^u32 Dictionary16::getTotalLength(const u8* src, u32 tuple_count, BitmapWrapper* nullmap) {$/;"	f	class:btrblocks::legacy::strings::Dictionary16	signature:(const u8* src, u32 tuple_count, BitmapWrapper* nullmap)
getTotalLength	btrblocks/scheme/string/FixedDictionary.cpp	/^u32 Dictionary8::getTotalLength(const u8* src, u32 tuple_count, BitmapWrapper* nullmap) {$/;"	f	class:btrblocks::legacy::strings::Dictionary8	signature:(const u8* src, u32 tuple_count, BitmapWrapper* nullmap)
getTotalLength	btrblocks/scheme/string/Fsst.cpp	/^u32 Fsst::getTotalLength(const u8* src, u32 tuple_count, BitmapWrapper*) {$/;"	f	class:btrblocks::strings::Fsst	signature:(const u8* src, u32 tuple_count, BitmapWrapper*)
getTotalLength	btrblocks/scheme/string/OneValue.cpp	/^u32 OneValue::getTotalLength(const u8* src, u32, BitmapWrapper* nullmap) {$/;"	f	class:btrblocks::legacy::strings::OneValue	signature:(const u8* src, u32, BitmapWrapper* nullmap)
getTotalLength	btrblocks/scheme/string/Uncompressed.cpp	/^u32 Uncompressed::getTotalLength(const u8* src, u32 tuple_count, BitmapWrapper* nullmap) {$/;"	f	class:btrblocks::legacy::strings::Uncompressed	signature:(const u8* src, u32 tuple_count, BitmapWrapper* nullmap)
getTupleCount	btrblocks/compression/BtrReader.hpp	/^  [[nodiscard]] inline u32 getTupleCount(u32 index) {$/;"	f	class:btrblocks::BtrReader	access:public	signature:(u32 index)
getTypeName	btrblocks/compression/SchemePicker.hpp	/^  static inline string getTypeName() { return "DOUBLE"; }$/;"	f	class:btrblocks::TypeWrapper	access:public	signature:()
getTypeName	btrblocks/compression/SchemePicker.hpp	/^  static inline string getTypeName() { return "INTEGER"; }$/;"	f	class:btrblocks::TypeWrapper	access:public	signature:()
getTypeName	btrblocks/compression/SchemePicker.hpp	/^  static inline string getTypeName() { return "STRING"; }$/;"	f	class:btrblocks::TypeWrapper	access:public	signature:()
get_bitset	btrblocks/extern/RoaringBitmap.cpp	/^boost::dynamic_bitset<>* BitmapWrapper::get_bitset() {$/;"	f	class:btrblocks::bitmap::BitmapWrapper	signature:()
get_bitset	btrblocks/extern/RoaringBitmap.hpp	/^  boost::dynamic_bitset<>* get_bitset();$/;"	p	class:btrblocks::bitmap::BitmapWrapper	access:public	signature:()
get_data	btrblocks/common/Units.hpp	/^inline T* get_data(std::vector<T>& v, std::size_t s) {$/;"	f	namespace:btrblocks::units	signature:(std::vector<T>& v, std::size_t s)
get_key	tools/playground/generate_s3_data.cpp	/^static std::string get_key(long object_size, long object_idx) {$/;"	f	file:	signature:(long object_size, long object_idx)
get_level_data	btrblocks/common/Units.hpp	/^inline T* get_level_data(std::vector<std::vector<T>>& v, std::size_t s, std::size_t level) {$/;"	f	namespace:btrblocks::units	signature:(std::vector<std::vector<T>>& v, std::size_t s, std::size_t level)
get_pointer	btrblocks/storage/StringArrayViewer.hpp	/^  [[nodiscard]] inline const char* get_pointer(u32 i) const {$/;"	f	struct:btrblocks::StringArrayViewer	access:public	signature:(u32 i) const
get_requests	tools/conversion/s3-management.hpp	/^std::vector<s3::Model::GetObjectRequest> get_requests;$/;"	v
get_requests	tools/playground/test-s3-crt.cpp	/^std::vector<std::vector<s3::Model::GetObjectRequest>> get_requests;$/;"	v
granted	LICENSE	/^Permission is hereby granted, free of charge, to any person obtaining a copy$/;"	v
h	.cache/clangd/index/Relation.hpp.3445CECF2F3A715D.idx	/^òtÊIàÈáh\\7Ä,ê7b>Aî«ndD8k¢¢è%iD+æ©ý &ªsÖ:-iÞû`]$/;"	v
has	btrblocks/storage/Chunk.hpp	/^  [[nodiscard]] inline BITMAP has(u32 c, u32 i) const { return bitmaps.get()[c].get()[i]; }$/;"	f	class:btrblocks::Chunk	access:public	signature:(u32 c, u32 i) const
hasUsedFsst	btrblocks/cache/ThreadCache.hpp	/^  static bool hasUsedFsst() {$/;"	f	class:btrblocks::ThreadCache	access:public	signature:()
i	.cache/clangd/index/sampling_algorithms.cpp.323F640775E07ED7.idx	/^$/;"	v
id	btrblocks/common/PerfEvent.hpp	/^      uint64_t id;$/;"	m	struct:PerfEvent::event::read_format	access:public
impl	btrblocks/extern/FastPFOR.cpp	/^struct LemiereImpl<FastPForCodec::FBP>::impl {$/;"	s	class:LemiereImpl	file:
impl	btrblocks/extern/FastPFOR.cpp	/^struct LemiereImpl<FastPForCodec::FPF>::impl {$/;"	s	class:LemiereImpl	file:
info	btrblocks/common/Log.hpp	/^enum class level { trace, debug, info, warn, err, critical, off };$/;"	m	class:Log::level	access:private
info	btrblocks/common/Log.hpp	/^inline void info([[maybe_unused]] Args&&... args) { \/* noop *\/$/;"	f	namespace:Log	signature:([[maybe_unused]] Args&&.... args)
integer_schemes	btrblocks/scheme/SchemePool.hpp	/^  std::unordered_map<IntegerSchemeType, unique_ptr<IntegerScheme>> integer_schemes;$/;"	m	struct:btrblocks::SchemesCollection	access:public
integers	btrblocks/btrblocks.hpp	/^  } integers;$/;"	m	struct:btrblocks::BtrBlocksConfig	typeref:struct:btrblocks::BtrBlocksConfig::__anon5	access:public
integers	btrblocks/scheme/SchemeConfig.hpp	/^  } integers;$/;"	m	struct:btrblocks::SchemeConfig	typeref:struct:btrblocks::SchemeConfig::__anon2	access:public
integers	btrblocks/scheme/integer/DynamicDictionary.cpp	/^namespace btrblocks::integers {$/;"	n	class:btrblocks	file:
integers	btrblocks/scheme/integer/DynamicDictionary.hpp	/^namespace btrblocks::integers {$/;"	n	class:btrblocks
integers	btrblocks/scheme/integer/FOR.cpp	/^namespace btrblocks::legacy::integers {$/;"	n	class:btrblocks::legacy	file:
integers	btrblocks/scheme/integer/FOR.hpp	/^namespace btrblocks::legacy::integers {$/;"	n	class:btrblocks::legacy
integers	btrblocks/scheme/integer/FixedDictionary.hpp	/^namespace btrblocks::legacy::integers {$/;"	n	class:btrblocks::legacy
integers	btrblocks/scheme/integer/Frequency.cpp	/^namespace btrblocks::integers {$/;"	n	class:btrblocks	file:
integers	btrblocks/scheme/integer/Frequency.hpp	/^namespace btrblocks::integers {$/;"	n	class:btrblocks
integers	btrblocks/scheme/integer/OneValue.cpp	/^namespace btrblocks::legacy::integers {$/;"	n	class:btrblocks::legacy	file:
integers	btrblocks/scheme/integer/OneValue.hpp	/^namespace btrblocks::legacy::integers {$/;"	n	class:btrblocks::legacy
integers	btrblocks/scheme/integer/PBP.cpp	/^namespace btrblocks::integers {$/;"	n	class:btrblocks	file:
integers	btrblocks/scheme/integer/PBP.hpp	/^namespace btrblocks::integers {$/;"	n	class:btrblocks
integers	btrblocks/scheme/integer/RLE.cpp	/^namespace btrblocks::integers {$/;"	n	class:btrblocks	file:
integers	btrblocks/scheme/integer/RLE.hpp	/^namespace btrblocks::integers {$/;"	n	class:btrblocks
integers	btrblocks/scheme/integer/Truncation.cpp	/^namespace btrblocks::legacy::integers {$/;"	n	class:btrblocks::legacy	file:
integers	btrblocks/scheme/integer/Truncation.hpp	/^namespace btrblocks::legacy::integers {$/;"	n	class:btrblocks::legacy
integers	btrblocks/scheme/integer/Uncompressed.cpp	/^namespace btrblocks::legacy::integers {$/;"	n	class:btrblocks::legacy	file:
integers	btrblocks/scheme/integer/Uncompressed.hpp	/^namespace btrblocks::legacy::integers {$/;"	n	class:btrblocks::legacy
integers	btrblocks/storage/Column.cpp	/^const Vector<INTEGER>& Column::integers() const {$/;"	f	class:btrblocks::Column	signature:() const
integers	btrblocks/storage/Column.hpp	/^  [[nodiscard]] const Vector<INTEGER>& integers() const;$/;"	p	class:btrblocks::Column	access:public	signature:() const
isEnabled	btrblocks/scheme/SchemeSet.hpp	/^  [[nodiscard]] constexpr bool isEnabled(T s) const {$/;"	f	struct:btrblocks::SchemeSet	access:public	signature:(T s) const
isOnHotPath	btrblocks/cache/ThreadCache.hpp	/^  bool isOnHotPath() { return estimation_level == 0; }$/;"	f	struct:btrblocks::ThreadCacheContainer	access:public	signature:()
isUsable	btrblocks/scheme/CompressionScheme.hpp	/^  virtual bool isUsable(DoubleStats&) { return true; }$/;"	f	class:btrblocks::DoubleScheme	access:public	signature:(DoubleStats&)
isUsable	btrblocks/scheme/CompressionScheme.hpp	/^  virtual bool isUsable(SInteger32Stats&) { return true; }$/;"	f	class:btrblocks::IntegerScheme	access:public	signature:(SInteger32Stats&)
isUsable	btrblocks/scheme/CompressionScheme.hpp	/^  virtual bool isUsable(StringStats&) { return true; }$/;"	f	class:btrblocks::StringScheme	access:public	signature:(StringStats&)
isUsable	btrblocks/scheme/double/Pseudodecimal.cpp	/^bool Decimal::isUsable(DoubleStats& stats) {$/;"	f	class:btrblocks::doubles::Decimal	signature:(DoubleStats& stats)
isUsable	btrblocks/scheme/string/DynamicDictionary.cpp	/^bool DynamicDictionary::isUsable(StringStats& stats) {$/;"	f	class:btrblocks::strings::DynamicDictionary	signature:(StringStats& stats)
isUsable	btrblocks/scheme/string/Fsst.cpp	/^bool Fsst::isUsable(StringStats& stats) {$/;"	f	class:btrblocks::strings::Fsst	signature:(StringStats& stats)
is_sorted	btrblocks/stats/NumberStats.hpp	/^  bool is_sorted;$/;"	m	struct:btrblocks::NumberStats	access:public
j	.cache/clangd/index/ThreadCache.hpp.3629053F4C5F0730.idx	/^RIFFô/;"	v
k	.cache/clangd/index/btrtocsv.cpp.07E02B3B412629C9.idx	/^RIFFN/;"	v
l	.cache/clangd/index/Column.hpp.3F41A3D204FB805D.idx	/^RIFFÂ/;"	v
l	.cache/clangd/index/FixedDictionary.hpp.9A488706072F8F93.idx	/^ìù~¢7¦Bûl÷þ²@%,AóßIV§(¥û_w·Ççý¹û~ÐãûV"×?ÆhsÐ®ËvÚõð"ZË-¢ß"h-­PÕìÐO©Z&Ñ2þ5xeAr?Jµ2jéU¶ÃF Ð»\/R½pL5¹OWäp»£õ½2C;Z|8ÆªõoüÀì!y8K"BnªçsH@:©ÑDû2O%°8_X\/8X®>/;"	v
legacy	btrblocks/scheme/templated/VarDictionary.hpp	/^namespace btrblocks::legacy {$/;"	n	class:btrblocks
length	btrblocks/scheme/string/OneValue.hpp	/^  u32 length;$/;"	m	struct:btrblocks::legacy::strings::OneValueStructure	access:public
length	btrblocks/storage/StringPointerArrayViewer.hpp	/^    u32 length;$/;"	m	struct:btrblocks::StringPointerArrayViewer::View	access:public
lengths_offset	btrblocks/scheme/string/DynamicDictionary.hpp	/^  u32 lengths_offset;$/;"	m	struct:btrblocks::strings::DynamicDictionaryStructure	access:public
lengths_scheme	btrblocks/scheme/string/DynamicDictionary.hpp	/^  u8 lengths_scheme;$/;"	m	struct:btrblocks::strings::DynamicDictionaryStructure	access:public
level	btrblocks/common/Log.hpp	/^enum class level { trace, debug, info, warn, err, critical, off };$/;"	c	namespace:Log
list	tools/playground/pseudodecimal_benchmark.cpp	/^    std::ifstream list;$/;"	m	struct:InputFiles	file:	access:public
list	tools/playground/sampling_algorithms.cpp	/^    std::ifstream list;$/;"	m	struct:InputFiles	file:	access:public
local	btrblocks/btrblocks.hpp	/^  static BtrBlocksConfig& local() {$/;"	f	struct:btrblocks::BtrBlocksConfig	access:public	signature:()
log	btrblocks/cache/ThreadCache.hpp	/^  std::stringstream log;  \/\/ decision_tree$/;"	m	struct:btrblocks::ThreadCacheContainer	access:public
lookup	btrblocks/scheme/CompressionScheme.hpp	/^  virtual INTEGER lookup(u32 id) = 0;$/;"	p	class:btrblocks::IntegerScheme	access:public	signature:(u32 id)
lookup	btrblocks/scheme/double/DoubleBP.cpp	/^DOUBLE DoubleBP::lookup(u32) {$/;"	f	class:btrblocks::doubles::DoubleBP	signature:(u32)
lookup	btrblocks/scheme/double/DoubleBP.hpp	/^  DOUBLE lookup(u32);$/;"	p	class:btrblocks::doubles::DoubleBP	access:public	signature:(u32)
lookup	btrblocks/scheme/integer/DynamicDictionary.cpp	/^INTEGER DynamicDictionary::lookup(u32) {$/;"	f	class:btrblocks::integers::DynamicDictionary	signature:(u32)
lookup	btrblocks/scheme/integer/FOR.cpp	/^INTEGER FOR::lookup(u32) {$/;"	f	class:btrblocks::legacy::integers::FOR	signature:(u32)
lookup	btrblocks/scheme/integer/Frequency.cpp	/^INTEGER Frequency::lookup(u32) {$/;"	f	class:btrblocks::integers::Frequency	signature:(u32)
lookup	btrblocks/scheme/integer/OneValue.cpp	/^INTEGER OneValue::lookup(u32) {$/;"	f	class:btrblocks::legacy::integers::OneValue	signature:(u32)
lookup	btrblocks/scheme/integer/PBP.cpp	/^INTEGER EXP_FBP::lookup(u32) {$/;"	f	class:btrblocks::integers::EXP_FBP	signature:(u32)
lookup	btrblocks/scheme/integer/PBP.cpp	/^INTEGER FBP::lookup(u32) {$/;"	f	class:btrblocks::integers::FBP	signature:(u32)
lookup	btrblocks/scheme/integer/PBP.cpp	/^INTEGER PBP::lookup(u32) {$/;"	f	class:btrblocks::integers::PBP	signature:(u32)
lookup	btrblocks/scheme/integer/PBP.cpp	/^INTEGER PBP_DELTA::lookup(u32) {$/;"	f	class:btrblocks::integers::PBP_DELTA	signature:(u32)
lookup	btrblocks/scheme/integer/RLE.cpp	/^INTEGER RLE::lookup(u32) {$/;"	f	class:btrblocks::integers::RLE	signature:(u32)
lookup	btrblocks/scheme/integer/Truncation.cpp	/^INTEGER Truncation16::lookup(u32) {$/;"	f	class:btrblocks::legacy::integers::Truncation16	signature:(u32)
lookup	btrblocks/scheme/integer/Truncation.cpp	/^INTEGER Truncation8::lookup(u32) {$/;"	f	class:btrblocks::legacy::integers::Truncation8	signature:(u32)
lookup	btrblocks/scheme/integer/Uncompressed.cpp	/^INTEGER Uncompressed::lookup(u32) {$/;"	f	class:btrblocks::legacy::integers::Uncompressed	signature:(u32)
ltrim	btrfiles/Trim.hpp	/^static inline void ltrim(std::string &s)$/;"	f	signature:(std::string &s)
ltrim_copy	btrfiles/Trim.hpp	/^static inline std::string ltrim_copy(std::string s)$/;"	f	signature:(std::string s)
lw	.cache/clangd/index/RLE.hpp.0A08AFC9783F16BF.idx	/^RIFF~/;"	v
m	.cache/clangd/index/BtrReader.hpp.E7E7B9E9DA428728.idx	/^RIFF /;"	v
m	.cache/clangd/index/regression_benchmark.cpp.F72AA2BF2FB1D31B.idx	/^CüïKm;ºÞÌASrò&ÏsrÈxtzH^õa+!åðþUAdýô\/§hÊe®ÅH(î`kÅ}X§ÒÅdV» Û¦X	Q{ê<wþIØá<F§§î2Ìzáù"ì£ÐjvÔ"ÆñÜ<TîÖ³_\\æãÖ`õÙ×µ!lLhRó½]âEÉÌ¬!Á¤®uKÒúÈÁÿ_íudÝÚþ$/;"	v
m_bitmap_wrappers	btrblocks/compression/BtrReader.hpp	/^  std::vector<BitmapWrapper*> m_bitmap_wrappers;$/;"	m	class:btrblocks::BtrReader	access:private
m_bitset	btrblocks/extern/RoaringBitmap.hpp	/^  boost::dynamic_bitset<>* m_bitset = nullptr;$/;"	m	class:btrblocks::bitmap::BitmapWrapper	access:private
m_bitset_initialized	btrblocks/extern/RoaringBitmap.hpp	/^  bool m_bitset_initialized = false;$/;"	m	class:btrblocks::bitmap::BitmapWrapper	access:private
m_bitsets	btrblocks/compression/BtrReader.hpp	/^  std::vector<boost::dynamic_bitset<>*> m_bitsets;$/;"	m	class:btrblocks::BtrReader	access:private
m_cardinality	btrblocks/extern/RoaringBitmap.hpp	/^  u32 m_cardinality;$/;"	m	class:btrblocks::bitmap::BitmapWrapper	access:private
m_roaring	btrblocks/extern/RoaringBitmap.hpp	/^  Roaring m_roaring;$/;"	m	class:btrblocks::bitmap::BitmapWrapper	access:private
m_tuple_count	btrblocks/extern/RoaringBitmap.hpp	/^  u32 m_tuple_count;$/;"	m	class:btrblocks::bitmap::BitmapWrapper	access:private
m_type	btrblocks/extern/RoaringBitmap.hpp	/^  BitmapType m_type;$/;"	m	class:btrblocks::bitmap::BitmapWrapper	access:private
main	bench/AwsDatasetDownloader.cpp	/^int main(int argc, char** argv) {$/;"	f	signature:(int argc, char** argv)
main	bench/benchmarks.cpp	/^int main(int argc, char** argv) {$/;"	f	signature:(int argc, char** argv)
main	test/DatasetGenerator.cpp	/^int main(int argc, char **argv)$/;"	f	signature:(int argc, char **argv)
main	test/tester.cpp	/^int main(int argc, char *argv[])$/;"	f	signature:(int argc, char *argv[])
main	tools/conversion/btrmeta.cpp	/^int main(int argc, char **argv) {$/;"	f	signature:(int argc, char **argv)
main	tools/conversion/btrtocsv.cpp	/^int main(int argc, char **argv)$/;"	f	signature:(int argc, char **argv)
main	tools/conversion/csvtobtr.cpp	/^int main(int argc, char **argv)$/;"	f	signature:(int argc, char **argv)
main	tools/conversion/decompression-speed-s3.cpp	/^int main(int argc, char **argv) {$/;"	f	signature:(int argc, char **argv)
main	tools/conversion/decompression-speed.cpp	/^int main(int argc, char **argv) {$/;"	f	signature:(int argc, char **argv)
main	tools/datasets/double-stats/DecimalApplication.cpp	/^int main(int argc, char **argv)$/;"	f	signature:(int argc, char **argv)
main	tools/datasets/double-stats/DoubleStatsExec.cpp	/^int main(int argc, char **argv)$/;"	f	signature:(int argc, char **argv)
main	tools/datasets/integer-stats/IntegerStats.cpp	/^int main(int argc, char **argv)$/;"	f	signature:(int argc, char **argv)
main	tools/datasets/string-stats/StringFSST.cpp	/^int main(int argc, char **argv)$/;"	f	signature:(int argc, char **argv)
main	tools/datasets/string-stats/StringStats.cpp	/^int main(int argc, char **argv)$/;"	f	signature:(int argc, char **argv)
main	tools/examples/compression.cpp	/^int main(int argc, char *argv[]) {$/;"	f	signature:(int argc, char *argv[])
main	tools/playground/config.cpp	/^int main(int argc, char *argv[]) {$/;"	f	signature:(int argc, char *argv[])
main	tools/playground/double.cpp	/^int main(int, char **) {$/;"	f	signature:(int, char **)
main	tools/playground/double_benchmarking.cpp	/^int main(int, char **)$/;"	f	signature:(int, char **)
main	tools/playground/for_tests.cpp	/^int main(void) {$/;"	f	signature:(void)
main	tools/playground/fsst_0.cpp	/^int main(int argc, char **argv)$/;"	f	signature:(int argc, char **argv)
main	tools/playground/generate_s3_data.cpp	/^int main(int argc, char** argv) {$/;"	f	signature:(int argc, char** argv)
main	tools/playground/playground.cpp	/^int main(int argc, char **argv)$/;"	f	signature:(int argc, char **argv)
main	tools/playground/pseudodecimal_benchmark.cpp	/^int main(int argc, char *argv[]) {$/;"	f	signature:(int argc, char *argv[])
main	tools/playground/rle.cpp	/^int main() {$/;"	f	signature:()
main	tools/playground/sampling_algorithms.cpp	/^int main(int argc, char *argv[]) {$/;"	f	signature:(int argc, char *argv[])
main	tools/playground/test-s3-crt.cpp	/^int main(int argc, char** argv) {$/;"	f	signature:(int argc, char** argv)
main	tools/playground/test-s3-custom-stream.cpp	/^int main(int argc, char** argv) {$/;"	f	signature:(int argc, char** argv)
main	tools/playground/test-s3-transfer.cpp	/^int main(int argc, char** argv) {$/;"	f	signature:(int argc, char** argv)
main	tools/playground/test-s3.cpp	/^int main(int argc, char **argv) {$/;"	f	signature:(int argc, char **argv)
makeBytesArray	btrblocks/common/Units.hpp	/^#define makeBytesArray(/;"	d
max	btrblocks/stats/NumberStats.hpp	/^  T max;$/;"	m	struct:btrblocks::NumberStats	access:public
maxCascadingLevel	btrblocks/compression/SchemePicker.hpp	/^  static u8 maxCascadingLevel() { return BtrBlocksConfig::get().doubles.max_cascade_depth; }$/;"	f	class:btrblocks::TypeWrapper	access:public	signature:()
maxCascadingLevel	btrblocks/compression/SchemePicker.hpp	/^  static u8 maxCascadingLevel() { return BtrBlocksConfig::get().integers.max_cascade_depth; }$/;"	f	class:btrblocks::TypeWrapper	access:public	signature:()
maxCascadingLevel	btrblocks/compression/SchemePicker.hpp	/^  static u8 maxCascadingLevel() { return BtrBlocksConfig::get().strings.max_cascade_depth; }$/;"	f	class:btrblocks::TypeWrapper	access:public	signature:()
max_exponent	btrblocks/scheme/double/MaxExponent.cpp	/^const u8 max_exponent = 22;$/;"	m	namespace:btrblocks::legacy::doubles	file:
max_exponent	btrblocks/scheme/double/MaxExponent.hpp	/^  u8 max_exponent;$/;"	m	struct:btrblocks::legacy::doubles::MaxExponentStructure	access:public
max_exponent	btrblocks/scheme/double/Pseudodecimal.cpp	/^const u32 max_exponent = 22;$/;"	m	namespace:btrblocks::doubles	file:
max_exponent	tools/playground/double.cpp	/^const u8 max_exponent = 22;$/;"	v
max_exponent_scheme_siginifcant_digit_bits_limit	btrblocks/scheme/double/MaxExponent.cpp	/^constexpr uint32_t max_exponent_scheme_siginifcant_digit_bits_limit = 64;$/;"	v
measure	tools/conversion/decompression-speed.cpp	/^u64 measure(const FileMetadata *metadata, std::vector<std::vector<BtrReader>> &readers, std::vector<u64> &runtimes, std::vector<u32> &columns) {$/;"	f	signature:(const FileMetadata *metadata, std::vector<std::vector<BtrReader>> &readers, std::vector<u64> &runtimes, std::vector<u32> &columns)
measure_single_thread	tools/conversion/decompression-speed.cpp	/^u64 measure_single_thread(const FileMetadata *metadata, std::vector<std::vector<BtrReader>> &readers, std::vector<u64> &runtimes, std::vector<u32> &columns) {$/;"	f	signature:(const FileMetadata *metadata, std::vector<std::vector<BtrReader>> &readers, std::vector<u64> &runtimes, std::vector<u32> &columns)
merge	LICENSE	/^to use, copy, modify, merge, publish, distribute, sublicense, and\/or sell$/;"	v
min	btrblocks/stats/NumberStats.hpp	/^  T min;$/;"	m	struct:btrblocks::NumberStats	access:public
mmapvector	btrblocks/storage/MMapVector.hpp	/^inline namespace mmapvector {$/;"	n	namespace:btrblocks
modify	LICENSE	/^to use, copy, modify, merge, publish, distribute, sublicense, and\/or sell$/;"	v
multiplyString	btrblocks/common/Utils.hpp	/^  static void multiplyString(char* dest, const char* src, u32 len, u32 n, u32 src_n) {$/;"	f	class:btrblocks::Utils	access:public	signature:(char* dest, const char* src, u32 len, u32 n, u32 src_n)
multiplyU32	btrblocks/common/Utils.hpp	/^  static void multiplyU32(u32* dest, const u32* src, u32 n) {$/;"	f	class:btrblocks::Utils	access:public	signature:(u32* dest, const u32* src, u32 n)
mutex	tools/conversion/s3-management.hpp	/^std::mutex mutex;$/;"	v
n	.cache/clangd/index/fsst_0.cpp.96D662909B45B131.idx	/^/;"	v
name	btrblocks/storage/Column.hpp	/^  const string name;$/;"	m	class:btrblocks::Column	access:public
name	btrblocks/storage/Relation.hpp	/^  string name;$/;"	m	class:btrblocks::Relation	access:public
name	btrfiles/Parser.cpp	/^  string name;$/;"	m	struct:btrblocks::files::ColumnDescriptor	file:	access:public
name	tools/playground/sampling_algorithms.cpp	/^  static constexpr char name[] = "double";$/;"	m	struct:Schemes	file:	access:public
name	tools/playground/sampling_algorithms.cpp	/^  static constexpr char name[] = "integer";$/;"	m	struct:Schemes	file:	access:public
name	tools/playground/sampling_algorithms.cpp	/^  static constexpr char name[] = "string";$/;"	m	struct:Schemes	file:	access:public
names	btrblocks/common/PerfEvent.hpp	/^  std::vector<std::string> names;$/;"	m	struct:PerfEvent	access:public
negatives_bitmap_offset	btrblocks/scheme/double/MaxExponent.hpp	/^  u32 negatives_bitmap_offset;$/;"	m	struct:btrblocks::legacy::doubles::MaxExponentStructure	access:public
next	tools/playground/pseudodecimal_benchmark.cpp	/^    bool next(std::string& output) {$/;"	f	struct:InputFiles	access:public	signature:(std::string& output)
next	tools/playground/sampling_algorithms.cpp	/^    bool next(std::string& output) {$/;"	f	struct:InputFiles	access:public	signature:(std::string& output)
next_block_i	btrblocks/scheme/double/Pseudodecimal.cpp	/^  u32 next_block_i;$/;"	m	struct:btrblocks::doubles::DecimalIterateParam	file:	access:public
next_index	tools/conversion/s3-management.hpp	/^size_t next_index = 0;$/;"	v
next_index	tools/playground/test-s3-crt.cpp	/^size_t next_index = 0;$/;"	v
next_scheme	btrblocks/scheme/integer/FOR.hpp	/^  u8 next_scheme;$/;"	m	struct:btrblocks::legacy::integers::FORStructure	access:public
next_scheme	btrblocks/scheme/integer/Frequency.hpp	/^  u8 next_scheme;$/;"	m	struct:btrblocks::integers::FrequencyStructure	access:public
next_scheme	btrblocks/scheme/templated/Frequency.hpp	/^  u8 next_scheme;$/;"	m	struct:btrblocks::FrequencyStructure	access:public
node_limit	tools/conversion/s3-management.hpp	/^size_t node_limit = 72;$/;"	v
noexcept	btrblocks/storage/MMapVector.hpp	/^  Vector(Vector&& o) noexcept : count(o.count), data(o.data) {$/;"	m	struct:btrblocks::mmapvector::Vector	access:public
noexcept	btrblocks/storage/MMapVector.hpp	/^  Vector(Vector&& o) noexcept : fileSize(o.fileSize), data(o.data) {$/;"	m	struct:btrblocks::mmapvector::Vector	access:public
noexcept	test/test-cases/TestHelper.hpp	/^   ~EnforceScheme() noexcept(false) { getSchemeRef() = static_cast<T>(autoScheme()); }$/;"	f	struct:EnforceScheme	access:public	signature:(false)
null_count	btrblocks/stats/NumberStats.hpp	/^  u32 null_count;$/;"	m	struct:btrblocks::NumberStats	access:public
null_count	btrblocks/stats/StringStats.hpp	/^  u32 null_count;$/;"	m	struct:btrblocks::StringStats	access:public
null_count	btrfiles/Parser.cpp	/^  u32 null_count = 0;   \/\/ when 'null' comes in the input$/;"	m	struct:btrblocks::files::ColumnDescriptor	file:	access:public
nullmap	btrblocks/storage/Chunk.hpp	/^  [[nodiscard]] inline const BITMAP* nullmap(u32 c) const { return bitmaps.get()[c].get(); }$/;"	f	class:btrblocks::Chunk	access:public	signature:(u32 c) const
nullmap	btrblocks/storage/Chunk.hpp	/^  unique_ptr<BITMAP[]> nullmap;$/;"	m	class:btrblocks::InputChunk	access:public
nullmap_offset	btrblocks/compression/Datablock.hpp	/^  u32 nullmap_offset = 0;$/;"	m	struct:btrblocks::ColumnChunkMeta	access:public
nullmap_offset	btrblocks/compression/Datablock.hpp	/^  u32 nullmap_offset = 0;$/;"	m	struct:btrblocks::ColumnMeta	access:public
nullmap_sizes	btrblocks/compression/Compressor.hpp	/^  vector<SIZE> nullmap_sizes;$/;"	m	struct:btrblocks::OutputBlockStats	access:public
nullmap_type	btrblocks/compression/Datablock.hpp	/^  BitmapType nullmap_type;$/;"	m	struct:btrblocks::ColumnChunkMeta	access:public
num_chunks	btrblocks/compression/Datablock.hpp	/^  u32 num_chunks;$/;"	m	struct:btrblocks::FileMetadata	access:public
num_chunks	btrblocks/storage/Chunk.hpp	/^  u32 num_chunks;$/;"	m	struct:btrblocks::ColumnPartMetadata	access:public
num_codes	btrblocks/scheme/string/DynamicDictionary.hpp	/^  u32 num_codes;$/;"	m	struct:btrblocks::strings::DynamicDictionaryStructure	access:public
num_columns	btrblocks/compression/Datablock.hpp	/^  u32 num_columns;$/;"	m	struct:btrblocks::FileMetadata	access:public
num_parts	btrblocks/compression/Datablock.hpp	/^  u32 num_parts;$/;"	m	struct:btrblocks::ColumnPartInfo	access:public
num_preallocated_buffers	tools/conversion/s3-management.hpp	/^static long num_preallocated_buffers; \/\/ We may be able to tune this down.$/;"	v
num_preallocated_buffers	tools/playground/test-s3-crt.cpp	/^long num_preallocated_buffers;$/;"	v
numbers_ptr	btrblocks/scheme/double/Pseudodecimal.cpp	/^  INTEGER* numbers_ptr;$/;"	m	struct:btrblocks::doubles::DecimalIterateParam	file:	access:public
numbers_scheme	btrblocks/scheme/double/Pseudodecimal.hpp	/^  u8 numbers_scheme;$/;"	m	struct:btrblocks::doubles::DecimalStructure	access:public
occupied_map	tools/conversion/s3-management.hpp	/^static tbb::concurrent_unordered_map<Aws::IOStream *, long> occupied_map;$/;"	v
occupied_map	tools/playground/test-s3-crt.cpp	/^std::unordered_map<Aws::IOStream*, long> occupied_map;$/;"	v
offset	btrblocks/compression/Datablock.hpp	/^  u32 offset;$/;"	m	struct:btrblocks::ColumnMeta	access:public
offset	btrblocks/storage/MMapVector.hpp	/^  uint64_t offset;$/;"	m	struct:btrblocks::mmapvector::StringIndexSlot	access:public
offset	btrblocks/storage/StringArrayViewer.hpp	/^    INTEGER offset;$/;"	m	struct:btrblocks::StringArrayViewer::Slot	access:public
offset	btrblocks/storage/StringPointerArrayViewer.hpp	/^    u32 offset;$/;"	m	struct:btrblocks::StringPointerArrayViewer::View	access:public
offsets	btrblocks/storage/Chunk.hpp	/^  u32 offsets[];$/;"	m	struct:btrblocks::ColumnPartMetadata	access:public
offsets_offset	btrblocks/scheme/string/Fsst.hpp	/^  u32 offsets_offset;$/;"	m	struct:btrblocks::strings::FsstStructure	access:public
offsets_scheme	btrblocks/scheme/string/Fsst.hpp	/^  u8 offsets_scheme;$/;"	m	struct:btrblocks::strings::FsstStructure	access:public
one_value	btrblocks/scheme/double/OneValue.hpp	/^  DOUBLE one_value;$/;"	m	struct:btrblocks::legacy::doubles::OneValueStructure	access:public
one_value	btrblocks/scheme/integer/OneValue.hpp	/^  UINTEGER one_value;$/;"	m	struct:btrblocks::legacy::integers::OneValueStructure	access:public
operator !=	btrblocks/storage/MMapVector.hpp	/^    bool operator!=(const _iterator& o) const { return slot != o.slot; }$/;"	f	struct:btrblocks::mmapvector::Vector::_iterator	access:public	signature:(const _iterator& o) const
operator ()	btrblocks/storage/Chunk.hpp	/^  inline const str operator()(u32 c, u32 i) const {$/;"	f	class:btrblocks::Chunk	access:public	signature:(u32 c, u32 i) const
operator ()	btrblocks/storage/StringArrayViewer.hpp	/^  inline const str operator()(u32 i) const {$/;"	f	struct:btrblocks::StringArrayViewer	access:public	signature:(u32 i) const
operator ()	btrblocks/storage/StringPointerArrayViewer.hpp	/^  inline str operator()(u32 i) const {$/;"	f	struct:btrblocks::StringPointerArrayViewer	access:public	signature:(u32 i) const
operator ()	tools/playground/sampling_algorithms.cpp	/^  virtual sample_t<T> operator()(const T* input, size_t count, stats_t& stats) const = 0;$/;"	p	struct:Sampler	file:	access:public	signature:(const T* input, size_t count, stats_t& stats) const
operator *	btrblocks/storage/MMapVector.hpp	/^    std::string_view operator*() const { return {data, slot->size}; }$/;"	f	struct:btrblocks::mmapvector::Vector::_iterator	access:public	signature:() const
operator ++	btrblocks/storage/MMapVector.hpp	/^    _iterator operator++(int) {$/;"	f	struct:btrblocks::mmapvector::Vector::_iterator	access:public	signature:(int)
operator ++	btrblocks/storage/MMapVector.hpp	/^    _iterator& operator++() {$/;"	f	struct:btrblocks::mmapvector::Vector::_iterator	access:public	signature:()
operator <<	btrblocks/cache/ThreadCache.hpp	/^  std::ostream& operator<<([[maybe_unused]] const string& str) {$/;"	f	struct:btrblocks::ThreadCacheContainer	access:public	signature:([[maybe_unused]] const string& str)
operator <<	tools/playground/sampling_algorithms.cpp	/^    friend std::ostream& operator<<(std::ostream& s, const TestResult&) {$/;"	f	struct:TestResult	access:friend	signature:(std::ostream& s, const TestResult&)
operator ==	btrblocks/storage/Chunk.cpp	/^bool Chunk::operator==(const btrblocks::Chunk& other) const {$/;"	f	class:btrblocks::Chunk	signature:(const btrblocks::Chunk& other) const
operator ==	btrblocks/storage/Chunk.hpp	/^  bool operator==(const Chunk& other) const;$/;"	p	class:btrblocks::Chunk	access:public	signature:(const Chunk& other) const
operator []	btrblocks/storage/MMapVector.hpp	/^  T& operator[](std::size_t idx) { return data[idx]; }$/;"	f	struct:btrblocks::mmapvector::Vector	access:public	signature:(std::size_t idx)
operator []	btrblocks/storage/MMapVector.hpp	/^  const T& operator[](std::size_t idx) const { return data[idx]; }$/;"	f	struct:btrblocks::mmapvector::Vector	access:public	signature:(std::size_t idx) const
operator []	btrblocks/storage/MMapVector.hpp	/^  std::string_view operator[](std::size_t idx) const {$/;"	f	struct:btrblocks::mmapvector::Vector	access:public	signature:(std::size_t idx) const
out_dir_name	bench/AwsDatasetDownloader.cpp	/^const string out_dir_name = "bench-dataset";$/;"	v
out_dir_name	test/DatasetGenerator.cpp	/^const string out_dir_name = "test-dataset";$/;"	v
outputChunk	tools/conversion/btrtocsv.cpp	/^void outputChunk(std::ofstream &csvstream, u32 tuple_count,$/;"	f	signature:(std::ofstream &csvstream, u32 tuple_count, const std::vector<std::pair<u32, u32>> &counters, const std::vector<std::vector<u8>> &decompressed_columns, std::vector<std::vector<BtrReader>> &readers, const std::vector<u32>& requires_copy)
override	btrblocks/compression/Datablock.hpp	/^  Chunk decompress(const BytesArray& input_block) override;$/;"	m	class:btrblocks::Datablock	access:public
override	btrblocks/compression/Datablock.hpp	/^  OutputBlockStats compress(const Chunk& input_chunk, BytesArray& output_block) override;$/;"	m	class:btrblocks::Datablock	access:public
override	btrblocks/scheme/double/DoubleBP.hpp	/^                  u32 level) override;$/;"	m	class:btrblocks::doubles::DoubleBP	access:public
override	btrblocks/scheme/double/DoubleBP.hpp	/^               u8 allowed_cascading_level) override;$/;"	m	class:btrblocks::doubles::DoubleBP	access:public
override	btrblocks/scheme/double/DynamicDictionary.hpp	/^                  u32 level) override;$/;"	m	class:btrblocks::doubles::DynamicDictionary	access:public
override	btrblocks/scheme/double/DynamicDictionary.hpp	/^               u8 allowed_cascading_level) override;$/;"	m	class:btrblocks::doubles::DynamicDictionary	access:public
override	btrblocks/scheme/double/DynamicDictionary.hpp	/^  double expectedCompressionRatio(DoubleStats& stats, u8 allowed_cascading_level) override;$/;"	m	class:btrblocks::doubles::DynamicDictionary	access:public
override	btrblocks/scheme/double/DynamicDictionary.hpp	/^  std::string fullDescription(const u8* src) override;$/;"	m	class:btrblocks::doubles::DynamicDictionary	access:public
override	btrblocks/scheme/double/Frequency.hpp	/^                  u32 level) override;$/;"	m	class:btrblocks::legacy::doubles::Frequency	access:public
override	btrblocks/scheme/double/Frequency.hpp	/^               u8 allowed_cascading_level) override;$/;"	m	class:btrblocks::legacy::doubles::Frequency	access:public
override	btrblocks/scheme/double/Frequency.hpp	/^  double expectedCompressionRatio(DoubleStats& stats, u8 allowed_cascading_level) override;$/;"	m	class:btrblocks::legacy::doubles::Frequency	access:public
override	btrblocks/scheme/double/Frequency.hpp	/^  std::string fullDescription(const u8* src) override;$/;"	m	class:btrblocks::legacy::doubles::Frequency	access:public
override	btrblocks/scheme/double/MaxExponent.hpp	/^                  u32 level) override;$/;"	m	class:btrblocks::legacy::doubles::MaxExponent	access:public
override	btrblocks/scheme/double/MaxExponent.hpp	/^               u8 allowed_cascading_level) override;$/;"	m	class:btrblocks::legacy::doubles::MaxExponent	access:public
override	btrblocks/scheme/double/OneValue.hpp	/^                  u32 level) override;$/;"	m	class:btrblocks::legacy::doubles::OneValue	access:public
override	btrblocks/scheme/double/OneValue.hpp	/^               u8 allowed_cascading_level) override;$/;"	m	class:btrblocks::legacy::doubles::OneValue	access:public
override	btrblocks/scheme/double/OneValue.hpp	/^  double expectedCompressionRatio(DoubleStats& stats, u8 allowed_cascading_level) override;$/;"	m	class:btrblocks::legacy::doubles::OneValue	access:public
override	btrblocks/scheme/double/Pseudodecimal.hpp	/^                  u32 level) override;$/;"	m	class:btrblocks::doubles::Decimal	access:public
override	btrblocks/scheme/double/Pseudodecimal.hpp	/^               u8 allowed_cascading_level) override;$/;"	m	class:btrblocks::doubles::Decimal	access:public
override	btrblocks/scheme/double/Pseudodecimal.hpp	/^  bool isUsable(DoubleStats& stats) override;$/;"	m	class:btrblocks::doubles::Decimal	access:public
override	btrblocks/scheme/double/Pseudodecimal.hpp	/^  std::string fullDescription(const u8* src) override;$/;"	m	class:btrblocks::doubles::Decimal	access:public
override	btrblocks/scheme/double/RLE.hpp	/^                  u32 level) override;$/;"	m	class:btrblocks::doubles::RLE	access:public
override	btrblocks/scheme/double/RLE.hpp	/^               u8 allowed_cascading_level) override;$/;"	m	class:btrblocks::doubles::RLE	access:public
override	btrblocks/scheme/double/RLE.hpp	/^  double expectedCompressionRatio(DoubleStats& stats, u8 allowed_cascading_level) override;$/;"	m	class:btrblocks::doubles::RLE	access:public
override	btrblocks/scheme/double/RLE.hpp	/^  std::string fullDescription(const u8* src) override;$/;"	m	class:btrblocks::doubles::RLE	access:public
override	btrblocks/scheme/double/Uncompressed.hpp	/^                  u32 level) override;$/;"	m	class:btrblocks::legacy::doubles::Uncompressed	access:public
override	btrblocks/scheme/double/Uncompressed.hpp	/^               u8 allowed_cascading_level) override;$/;"	m	class:btrblocks::legacy::doubles::Uncompressed	access:public
override	btrblocks/scheme/double/Uncompressed.hpp	/^  double expectedCompressionRatio(DoubleStats& stats, u8 allowed_cascading_level) override;$/;"	m	class:btrblocks::legacy::doubles::Uncompressed	access:public
override	btrblocks/scheme/integer/DynamicDictionary.hpp	/^                  u32 level) override;$/;"	m	class:btrblocks::integers::DynamicDictionary	access:public
override	btrblocks/scheme/integer/DynamicDictionary.hpp	/^               u8 allowed_cascading_level) override;$/;"	m	class:btrblocks::integers::DynamicDictionary	access:public
override	btrblocks/scheme/integer/DynamicDictionary.hpp	/^  INTEGER lookup(u32) override;$/;"	m	class:btrblocks::integers::DynamicDictionary	access:public
override	btrblocks/scheme/integer/DynamicDictionary.hpp	/^  double expectedCompressionRatio(SInteger32Stats& stats, u8 allowed_cascading_level) override;$/;"	m	class:btrblocks::integers::DynamicDictionary	access:public
override	btrblocks/scheme/integer/DynamicDictionary.hpp	/^  std::string fullDescription(const u8* src) override;$/;"	m	class:btrblocks::integers::DynamicDictionary	access:public
override	btrblocks/scheme/integer/DynamicDictionary.hpp	/^  void scan(Predicate, BITMAP*, const u8*, u32) override;$/;"	m	class:btrblocks::integers::DynamicDictionary	access:public
override	btrblocks/scheme/integer/FOR.hpp	/^                  u32 level) override;$/;"	m	class:btrblocks::legacy::integers::FOR	access:public
override	btrblocks/scheme/integer/FOR.hpp	/^               u8 allowed_cascading_level) override;$/;"	m	class:btrblocks::legacy::integers::FOR	access:public
override	btrblocks/scheme/integer/FOR.hpp	/^  INTEGER lookup(u32) override;$/;"	m	class:btrblocks::legacy::integers::FOR	access:public
override	btrblocks/scheme/integer/FOR.hpp	/^  double expectedCompressionRatio(SInteger32Stats& stats, u8 allowed_cascading_level) override;$/;"	m	class:btrblocks::legacy::integers::FOR	access:public
override	btrblocks/scheme/integer/FOR.hpp	/^  std::string fullDescription(const u8* src) override;$/;"	m	class:btrblocks::legacy::integers::FOR	access:public
override	btrblocks/scheme/integer/FOR.hpp	/^  void scan(Predicate, BITMAP*, const u8*, u32) override;$/;"	m	class:btrblocks::legacy::integers::FOR	access:public
override	btrblocks/scheme/integer/Frequency.hpp	/^                  u32 level) override;$/;"	m	class:btrblocks::integers::Frequency	access:public
override	btrblocks/scheme/integer/Frequency.hpp	/^               u8 allowed_cascading_level) override;$/;"	m	class:btrblocks::integers::Frequency	access:public
override	btrblocks/scheme/integer/Frequency.hpp	/^  INTEGER lookup(u32) override;$/;"	m	class:btrblocks::integers::Frequency	access:public
override	btrblocks/scheme/integer/Frequency.hpp	/^  double expectedCompressionRatio(SInteger32Stats& stats, u8 allowed_cascading_level) override;$/;"	m	class:btrblocks::integers::Frequency	access:public
override	btrblocks/scheme/integer/Frequency.hpp	/^  std::string fullDescription(const u8* src) override;$/;"	m	class:btrblocks::integers::Frequency	access:public
override	btrblocks/scheme/integer/Frequency.hpp	/^  void scan(Predicate, BITMAP*, const u8*, u32) override;$/;"	m	class:btrblocks::integers::Frequency	access:public
override	btrblocks/scheme/integer/OneValue.hpp	/^                  u32 level) override;$/;"	m	class:btrblocks::legacy::integers::OneValue	access:public
override	btrblocks/scheme/integer/OneValue.hpp	/^               u8 allowed_cascading_level) override;$/;"	m	class:btrblocks::legacy::integers::OneValue	access:public
override	btrblocks/scheme/integer/OneValue.hpp	/^  INTEGER lookup(u32) override;$/;"	m	class:btrblocks::legacy::integers::OneValue	access:public
override	btrblocks/scheme/integer/OneValue.hpp	/^  double expectedCompressionRatio(SInteger32Stats& stats, u8 allowed_cascading_level) override;$/;"	m	class:btrblocks::legacy::integers::OneValue	access:public
override	btrblocks/scheme/integer/OneValue.hpp	/^  void scan(Predicate, BITMAP*, const u8*, u32) override;$/;"	m	class:btrblocks::legacy::integers::OneValue	access:public
override	btrblocks/scheme/integer/PBP.hpp	/^                  u32 level) override;$/;"	m	class:btrblocks::integers::EXP_FBP	access:public
override	btrblocks/scheme/integer/PBP.hpp	/^                  u32 level) override;$/;"	m	class:btrblocks::integers::FBP	access:public
override	btrblocks/scheme/integer/PBP.hpp	/^                  u32 level) override;$/;"	m	class:btrblocks::integers::PBP	access:public
override	btrblocks/scheme/integer/PBP.hpp	/^                  u32 level) override;$/;"	m	class:btrblocks::integers::PBP_DELTA	access:public
override	btrblocks/scheme/integer/PBP.hpp	/^               u8 allowed_cascading_level) override;$/;"	m	class:btrblocks::integers::EXP_FBP	access:public
override	btrblocks/scheme/integer/PBP.hpp	/^               u8 allowed_cascading_level) override;$/;"	m	class:btrblocks::integers::FBP	access:public
override	btrblocks/scheme/integer/PBP.hpp	/^               u8 allowed_cascading_level) override;$/;"	m	class:btrblocks::integers::PBP	access:public
override	btrblocks/scheme/integer/PBP.hpp	/^               u8 allowed_cascading_level) override;$/;"	m	class:btrblocks::integers::PBP_DELTA	access:public
override	btrblocks/scheme/integer/PBP.hpp	/^  INTEGER lookup(u32) override;$/;"	m	class:btrblocks::integers::EXP_FBP	access:public
override	btrblocks/scheme/integer/PBP.hpp	/^  INTEGER lookup(u32) override;$/;"	m	class:btrblocks::integers::FBP	access:public
override	btrblocks/scheme/integer/PBP.hpp	/^  INTEGER lookup(u32) override;$/;"	m	class:btrblocks::integers::PBP	access:public
override	btrblocks/scheme/integer/PBP.hpp	/^  INTEGER lookup(u32) override;$/;"	m	class:btrblocks::integers::PBP_DELTA	access:public
override	btrblocks/scheme/integer/PBP.hpp	/^  double expectedCompressionRatio(SInteger32Stats& stats, u8 allowed_cascading_level) override;$/;"	m	class:btrblocks::integers::EXP_FBP	access:public
override	btrblocks/scheme/integer/PBP.hpp	/^  double expectedCompressionRatio(SInteger32Stats& stats, u8 allowed_cascading_level) override;$/;"	m	class:btrblocks::integers::FBP	access:public
override	btrblocks/scheme/integer/PBP.hpp	/^  double expectedCompressionRatio(SInteger32Stats& stats, u8 allowed_cascading_level) override;$/;"	m	class:btrblocks::integers::PBP_DELTA	access:public
override	btrblocks/scheme/integer/PBP.hpp	/^  void scan(Predicate, BITMAP*, const u8*, u32) override;$/;"	m	class:btrblocks::integers::EXP_FBP	access:public
override	btrblocks/scheme/integer/PBP.hpp	/^  void scan(Predicate, BITMAP*, const u8*, u32) override;$/;"	m	class:btrblocks::integers::FBP	access:public
override	btrblocks/scheme/integer/PBP.hpp	/^  void scan(Predicate, BITMAP*, const u8*, u32) override;$/;"	m	class:btrblocks::integers::PBP	access:public
override	btrblocks/scheme/integer/PBP.hpp	/^  void scan(Predicate, BITMAP*, const u8*, u32) override;$/;"	m	class:btrblocks::integers::PBP_DELTA	access:public
override	btrblocks/scheme/integer/RLE.hpp	/^                  u32 level) override;$/;"	m	class:btrblocks::integers::RLE	access:public
override	btrblocks/scheme/integer/RLE.hpp	/^               u8 allowed_cascading_level) override;$/;"	m	class:btrblocks::integers::RLE	access:public
override	btrblocks/scheme/integer/RLE.hpp	/^  INTEGER lookup(u32) override;$/;"	m	class:btrblocks::integers::RLE	access:public
override	btrblocks/scheme/integer/RLE.hpp	/^  double expectedCompressionRatio(SInteger32Stats& stats, u8 allowed_cascading_level) override;$/;"	m	class:btrblocks::integers::RLE	access:public
override	btrblocks/scheme/integer/RLE.hpp	/^  std::string fullDescription(const u8* src) override;$/;"	m	class:btrblocks::integers::RLE	access:public
override	btrblocks/scheme/integer/RLE.hpp	/^  void scan(Predicate, BITMAP*, const u8*, u32) override;$/;"	m	class:btrblocks::integers::RLE	access:public
override	btrblocks/scheme/integer/Truncation.hpp	/^                  u32 level) override;$/;"	m	class:btrblocks::legacy::integers::Truncation16	access:public
override	btrblocks/scheme/integer/Truncation.hpp	/^                  u32 level) override;$/;"	m	class:btrblocks::legacy::integers::Truncation8	access:public
override	btrblocks/scheme/integer/Truncation.hpp	/^               u8 allowed_cascading_level) override;$/;"	m	class:btrblocks::legacy::integers::Truncation16	access:public
override	btrblocks/scheme/integer/Truncation.hpp	/^               u8 allowed_cascading_level) override;$/;"	m	class:btrblocks::legacy::integers::Truncation8	access:public
override	btrblocks/scheme/integer/Truncation.hpp	/^  INTEGER lookup(u32) override;$/;"	m	class:btrblocks::legacy::integers::Truncation16	access:public
override	btrblocks/scheme/integer/Truncation.hpp	/^  INTEGER lookup(u32) override;$/;"	m	class:btrblocks::legacy::integers::Truncation8	access:public
override	btrblocks/scheme/integer/Truncation.hpp	/^  double expectedCompressionRatio(SInteger32Stats& stats, u8 allowed_cascading_level) override;$/;"	m	class:btrblocks::legacy::integers::Truncation16	access:public
override	btrblocks/scheme/integer/Truncation.hpp	/^  double expectedCompressionRatio(SInteger32Stats& stats, u8 allowed_cascading_level) override;$/;"	m	class:btrblocks::legacy::integers::Truncation8	access:public
override	btrblocks/scheme/integer/Truncation.hpp	/^  void scan(Predicate, BITMAP*, const u8*, u32) override;$/;"	m	class:btrblocks::legacy::integers::Truncation16	access:public
override	btrblocks/scheme/integer/Truncation.hpp	/^  void scan(Predicate, BITMAP*, const u8*, u32) override;$/;"	m	class:btrblocks::legacy::integers::Truncation8	access:public
override	btrblocks/scheme/integer/Uncompressed.hpp	/^                  u32 level) override;$/;"	m	class:btrblocks::legacy::integers::Uncompressed	access:public
override	btrblocks/scheme/integer/Uncompressed.hpp	/^               u8 allowed_cascading_level) override;$/;"	m	class:btrblocks::legacy::integers::Uncompressed	access:public
override	btrblocks/scheme/integer/Uncompressed.hpp	/^  INTEGER lookup(u32) override;$/;"	m	class:btrblocks::legacy::integers::Uncompressed	access:public
override	btrblocks/scheme/integer/Uncompressed.hpp	/^  double expectedCompressionRatio(SInteger32Stats& stats, u8 allowed_cascading_level) override;$/;"	m	class:btrblocks::legacy::integers::Uncompressed	access:public
override	btrblocks/scheme/integer/Uncompressed.hpp	/^  void scan(Predicate, BITMAP*, const u8*, u32) override;$/;"	m	class:btrblocks::legacy::integers::Uncompressed	access:public
override	btrblocks/scheme/string/DynamicDictionary.hpp	/^                        u32 level) override;$/;"	m	class:btrblocks::strings::DynamicDictionary	access:public
override	btrblocks/scheme/string/DynamicDictionary.hpp	/^                  u32 level) override;$/;"	m	class:btrblocks::strings::DynamicDictionary	access:public
override	btrblocks/scheme/string/DynamicDictionary.hpp	/^  bool isUsable(StringStats& stats) override;$/;"	m	class:btrblocks::strings::DynamicDictionary	access:public
override	btrblocks/scheme/string/DynamicDictionary.hpp	/^  bool usesFsst(const u8* src) override;$/;"	m	class:btrblocks::strings::DynamicDictionary	access:public
override	btrblocks/scheme/string/DynamicDictionary.hpp	/^  double expectedCompressionRatio(StringStats& stats, u8 allowed_cascading_level) override;$/;"	m	class:btrblocks::strings::DynamicDictionary	access:public
override	btrblocks/scheme/string/DynamicDictionary.hpp	/^  std::string fullDescription(const u8* src) override;$/;"	m	class:btrblocks::strings::DynamicDictionary	access:public
override	btrblocks/scheme/string/DynamicDictionary.hpp	/^  u32 compress(StringArrayViewer src, const BITMAP* nullmap, u8* dest, StringStats& stats) override;$/;"	m	class:btrblocks::strings::DynamicDictionary	access:public
override	btrblocks/scheme/string/DynamicDictionary.hpp	/^  u32 getDecompressedSize(const u8* src, u32 tuple_count, BitmapWrapper* nullmap) override;$/;"	m	class:btrblocks::strings::DynamicDictionary	access:public
override	btrblocks/scheme/string/DynamicDictionary.hpp	/^  u32 getDecompressedSizeNoCopy(const u8* src, u32 tuple_count, BitmapWrapper* nullmap) override;$/;"	m	class:btrblocks::strings::DynamicDictionary	access:public
override	btrblocks/scheme/string/DynamicDictionary.hpp	/^  u32 getTotalLength(const u8* src, u32 tuple_count, BitmapWrapper* nullmap) override;$/;"	m	class:btrblocks::strings::DynamicDictionary	access:public
override	btrblocks/scheme/string/FixedDictionary.hpp	/^                  u32 level) override;$/;"	m	class:btrblocks::legacy::strings::Dictionary16	access:public
override	btrblocks/scheme/string/FixedDictionary.hpp	/^                  u32 level) override;$/;"	m	class:btrblocks::legacy::strings::Dictionary8	access:public
override	btrblocks/scheme/string/FixedDictionary.hpp	/^               StringStats& stats) override;$/;"	m	class:btrblocks::legacy::strings::Dictionary16	access:public
override	btrblocks/scheme/string/FixedDictionary.hpp	/^               StringStats& stats) override;$/;"	m	class:btrblocks::legacy::strings::Dictionary8	access:public
override	btrblocks/scheme/string/FixedDictionary.hpp	/^  double expectedCompressionRatio(StringStats& stats, u8 allowed_cascading_level) override;$/;"	m	class:btrblocks::legacy::strings::Dictionary16	access:public
override	btrblocks/scheme/string/FixedDictionary.hpp	/^  double expectedCompressionRatio(StringStats& stats, u8 allowed_cascading_level) override;$/;"	m	class:btrblocks::legacy::strings::Dictionary8	access:public
override	btrblocks/scheme/string/FixedDictionary.hpp	/^  u32 getDecompressedSize(const u8* src, u32 tuple_count, BitmapWrapper* nullmap) override;$/;"	m	class:btrblocks::legacy::strings::Dictionary16	access:public
override	btrblocks/scheme/string/FixedDictionary.hpp	/^  u32 getDecompressedSize(const u8* src, u32 tuple_count, BitmapWrapper* nullmap) override;$/;"	m	class:btrblocks::legacy::strings::Dictionary8	access:public
override	btrblocks/scheme/string/FixedDictionary.hpp	/^  u32 getTotalLength(const u8* src, u32 tuple_count, BitmapWrapper* nullmap) override;$/;"	m	class:btrblocks::legacy::strings::Dictionary16	access:public
override	btrblocks/scheme/string/FixedDictionary.hpp	/^  u32 getTotalLength(const u8* src, u32 tuple_count, BitmapWrapper* nullmap) override;$/;"	m	class:btrblocks::legacy::strings::Dictionary8	access:public
override	btrblocks/scheme/string/Fsst.hpp	/^                  u32 level) override;$/;"	m	class:btrblocks::strings::Fsst	access:public
override	btrblocks/scheme/string/Fsst.hpp	/^  bool isUsable(StringStats& stats) override;$/;"	m	class:btrblocks::strings::Fsst	access:public
override	btrblocks/scheme/string/Fsst.hpp	/^  double expectedCompressionRatio(StringStats& stats, u8 allowed_cascading_level) override;$/;"	m	class:btrblocks::strings::Fsst	access:public
override	btrblocks/scheme/string/Fsst.hpp	/^  std::string fullDescription(const u8* src) override;$/;"	m	class:btrblocks::strings::Fsst	access:public
override	btrblocks/scheme/string/Fsst.hpp	/^  u32 compress(StringArrayViewer src, const BITMAP* nullmap, u8* dest, StringStats& stats) override;$/;"	m	class:btrblocks::strings::Fsst	access:public
override	btrblocks/scheme/string/Fsst.hpp	/^  u32 getDecompressedSize(const u8* src, u32 tuple_count, BitmapWrapper* nullmap) override;$/;"	m	class:btrblocks::strings::Fsst	access:public
override	btrblocks/scheme/string/Fsst.hpp	/^  u32 getTotalLength(const u8* src, u32 tuple_count, BitmapWrapper* nullmap) override;$/;"	m	class:btrblocks::strings::Fsst	access:public
override	btrblocks/scheme/string/OneValue.hpp	/^                        u32 level) override;$/;"	m	class:btrblocks::legacy::strings::OneValue	access:public
override	btrblocks/scheme/string/OneValue.hpp	/^                  u32 level) override;$/;"	m	class:btrblocks::legacy::strings::OneValue	access:public
override	btrblocks/scheme/string/OneValue.hpp	/^               StringStats& stats) override;$/;"	m	class:btrblocks::legacy::strings::OneValue	access:public
override	btrblocks/scheme/string/OneValue.hpp	/^  double expectedCompressionRatio(StringStats& stats, u8 allowed_cascading_level) override;$/;"	m	class:btrblocks::legacy::strings::OneValue	access:public
override	btrblocks/scheme/string/OneValue.hpp	/^  u32 getDecompressedSize(const u8* src, u32 tuple_count, BitmapWrapper* nullmap) override;$/;"	m	class:btrblocks::legacy::strings::OneValue	access:public
override	btrblocks/scheme/string/OneValue.hpp	/^  u32 getDecompressedSizeNoCopy(const u8* src, u32 tuple_count, BitmapWrapper* nullmap) override;$/;"	m	class:btrblocks::legacy::strings::OneValue	access:public
override	btrblocks/scheme/string/OneValue.hpp	/^  u32 getTotalLength(const u8* src, u32 tuple_count, BitmapWrapper* nullmap) override;$/;"	m	class:btrblocks::legacy::strings::OneValue	access:public
override	btrblocks/scheme/string/Uncompressed.hpp	/^                  u32 level) override;$/;"	m	class:btrblocks::legacy::strings::Uncompressed	access:public
override	btrblocks/scheme/string/Uncompressed.hpp	/^               StringStats& stats) override;$/;"	m	class:btrblocks::legacy::strings::Uncompressed	access:public
override	btrblocks/scheme/string/Uncompressed.hpp	/^  double expectedCompressionRatio(StringStats& stats, u8 allowed_cascading_level) override;$/;"	m	class:btrblocks::legacy::strings::Uncompressed	access:public
override	btrblocks/scheme/string/Uncompressed.hpp	/^  u32 getDecompressedSize(const u8* src, u32 tuple_count, BitmapWrapper* nullmap) override;$/;"	m	class:btrblocks::legacy::strings::Uncompressed	access:public
override	btrblocks/scheme/string/Uncompressed.hpp	/^  u32 getTotalLength(const u8* src, u32 tuple_count, BitmapWrapper* nullmap) override;$/;"	m	class:btrblocks::legacy::strings::Uncompressed	access:public
pImpl	btrblocks/extern/FastPFOR.hpp	/^  std::unique_ptr<impl> pImpl;$/;"	m	struct:LemiereImpl	access:private
p_offset	btrblocks/scheme/double/MaxExponent.hpp	/^  u32 p_offset;$/;"	m	struct:btrblocks::legacy::doubles::MaxExponentStructure	access:public
p_scheme	btrblocks/scheme/double/MaxExponent.hpp	/^  u8 p_scheme;$/;"	m	struct:btrblocks::legacy::doubles::MaxExponentStructure	access:public
padding	btrblocks/compression/Datablock.hpp	/^  u32 padding;$/;"	m	struct:btrblocks::DatablockMeta	access:public
padding	btrblocks/compression/Datablock.hpp	/^  u8 padding;$/;"	m	struct:btrblocks::ColumnMeta	access:public
padding	btrblocks/scheme/double/DoubleBP.hpp	/^  u8 padding;$/;"	m	struct:btrblocks::doubles::DoubleBPStructure	access:public
padding	btrblocks/scheme/integer/PBP.hpp	/^  u8 padding;$/;"	m	struct:btrblocks::integers::XPBPStructure	access:public
params	btrblocks/common/PerfEvent.hpp	/^  std::map<std::string, std::string> params;$/;"	m	struct:PerfEvent	access:public
part_count	tools/conversion/decompression-speed-s3.cpp	/^static std::atomic<uint64_t> part_count = 0;$/;"	v	file:
part_size	tools/conversion/s3-management.hpp	/^static const long part_size = 16 * 1024 * 1024; \/\/ 16 MiB$/;"	v
part_size	tools/playground/generate_s3_data.cpp	/^static const size_t part_size = 128 * 1024 * 1024;$/;"	v	file:
part_size	tools/playground/test-s3-crt.cpp	/^long part_size;$/;"	v
parts	btrblocks/compression/Datablock.hpp	/^  struct ColumnPartInfo parts[];$/;"	m	struct:btrblocks::FileMetadata	typeref:struct:btrblocks::FileMetadata::ColumnPartInfo	access:public
patches_offset	btrblocks/scheme/double/Pseudodecimal.hpp	/^  u32 patches_offset;$/;"	m	struct:btrblocks::doubles::DecimalStructure	access:public
patches_ptr	btrblocks/scheme/double/Pseudodecimal.cpp	/^  DOUBLE* patches_ptr;$/;"	m	struct:btrblocks::doubles::DecimalIterateParam	file:	access:public
patches_scheme	btrblocks/scheme/double/Pseudodecimal.hpp	/^  u8 patches_scheme;$/;"	m	struct:btrblocks::doubles::DecimalStructure	access:public
pe	btrblocks/common/PerfEvent.hpp	/^    perf_event_attr pe;$/;"	m	struct:PerfEvent::event	access:public
prepare_buffers	tools/playground/test-s3-crt.cpp	/^static void prepare_buffers() {$/;"	f	file:	signature:()
prev	btrblocks/common/PerfEvent.hpp	/^    read_format prev;$/;"	m	struct:PerfEvent::event	access:public
printCounter	btrblocks/common/PerfEvent.hpp	/^  static void printCounter(std::ostream& headerOut,$/;"	f	struct:PerfEvent	access:public	signature:(std::ostream& headerOut, std::ostream& dataOut, const std::string& name, const std::string& counterValue, bool addComma = true)
printCounter	btrblocks/common/PerfEvent.hpp	/^  static void printCounter(std::ostream& headerOut,$/;"	f	struct:PerfEvent	access:public	signature:(std::ostream& headerOut, std::ostream& dataOut, std::string name, T counterValue, bool addComma = true)
printDouble	btrblocks/scheme/double/MaxExponent.cpp	/^void printDouble(double input) {$/;"	f	signature:(double input)
printDouble	tools/datasets/double-stats/DecimalApplication.cpp	/^void printDouble(double input)$/;"	f	signature:(double input)
printDouble	tools/datasets/double-stats/DoubleStatsExec.cpp	/^void printDouble(double input)$/;"	f	signature:(double input)
printDouble	tools/playground/double.cpp	/^void printDouble(double input) {$/;"	f	signature:(double input)
printDouble	tools/playground/double_benchmarking.cpp	/^void printDouble(double input) {$/;"	f	signature:(double input)
printFloat	tools/playground/double.cpp	/^void printFloat(float input) {$/;"	f	signature:(float input)
printFloat	tools/playground/double_benchmarking.cpp	/^void printFloat(float input) {$/;"	f	signature:(float input)
printHeader	btrblocks/common/PerfEvent.hpp	/^  bool printHeader;$/;"	m	struct:PerfEvent	access:public
printParams	btrblocks/common/PerfEvent.hpp	/^  void printParams(std::ostream& header, std::ostream& data) {$/;"	f	struct:PerfEvent	access:public	signature:(std::ostream& header, std::ostream& data)
printReport	btrblocks/common/PerfEvent.hpp	/^  void printReport(std::ostream& headerOut, std::ostream& dataOut, uint64_t normalizationConstant) {$/;"	f	struct:PerfEvent	access:public	signature:(std::ostream& headerOut, std::ostream& dataOut, uint64_t normalizationConstant)
printReport	btrblocks/common/PerfEvent.hpp	/^  void printReport(std::ostream& out, uint64_t normalizationConstant) {$/;"	f	struct:PerfEvent	access:public	signature:(std::ostream& out, uint64_t normalizationConstant)
printReport	btrblocks/common/PerfEvent.hpp	/^  void printReport(std::ostream&, uint64_t) {}$/;"	f	struct:PerfEvent	access:public	signature:(std::ostream&, uint64_t)
print_vec	tools/playground/for_tests.cpp	/^static void print_vec(std::vector<T> &v, const char *msg) {$/;"	f	file:	signature:(std::vector<T> &v, const char *msg)
processYaml	tools/datasets/prepare_dataset.sh	/^function processYaml() {$/;"	f	signature:()
publish	LICENSE	/^to use, copy, modify, merge, publish, distribute, sublicense, and\/or sell$/;"	v
put_object	tools/playground/generate_s3_data.cpp	/^static bool put_object(const Aws::S3Crt::S3CrtClient& s3_client,$/;"	f	file:	signature:(const Aws::S3Crt::S3CrtClient& s3_client, const std::string& bucket, std::shared_ptr<std::stringstream>& sstream, long object_idx, long object_size)
readBinary	btrblocks/storage/MMapVector.hpp	/^  void readBinary(const char* pathname) {$/;"	f	struct:btrblocks::mmapvector::Vector	access:public	signature:(const char* pathname)
readColumn	btrblocks/compression/BtrReader.cpp	/^bool BtrReader::readColumn(std::vector<u8>& output_chunk_v, u32 index) {$/;"	f	class:btrblocks::BtrReader	signature:(std::vector<u8>& output_chunk_v, u32 index)
readColumn	btrblocks/compression/BtrReader.hpp	/^  bool readColumn(std::vector<u8>& output_chunk, u32 index);$/;"	p	class:btrblocks::BtrReader	access:public	signature:(std::vector<u8>& output_chunk, u32 index)
readCounter	btrblocks/common/PerfEvent.hpp	/^    double readCounter() {$/;"	f	struct:PerfEvent::event	access:public	signature:()
readDirectory	btrfiles/Relation.cpp	/^Relation readDirectory(const YAML::Node& schema, const string& columns_dir, const string& only_type) {$/;"	f	namespace:btrblocks::files	signature:(const YAML::Node& schema, const string& columns_dir, const string& only_type)
readDirectory	btrfiles/btrfiles.hpp	/^Relation readDirectory(const YAML::Node& schema, const string& columns_dir, const string& only_type = "");$/;"	p	namespace:btrblocks::files	signature:(const YAML::Node& schema, const string& columns_dir, const string& only_type = Ó)
readFileToMemory	btrblocks/common/Utils.hpp	/^  static void readFileToMemory(const std::string& path, std::vector<char>& target) {$/;"	f	class:btrblocks::Utils	access:public	signature:(const std::string& path, std::vector<char>& target)
readRaw	btrblocks/common/Units.hpp	/^inline constexpr T readRaw(const u8* base, u32 offset) {$/;"	f	namespace:btrblocks::units	signature:(const u8* base, u32 offset)
readRaw	btrblocks/common/Units.hpp	/^inline constexpr T readRaw(u8* base, u32 offset) {  \/\/ TODO: Deprecate$/;"	f	namespace:btrblocks::units	signature:(u8* base, u32 offset)
read_format	btrblocks/common/PerfEvent.hpp	/^    struct read_format {$/;"	s	struct:PerfEvent::event	access:public
read_metatdata	tools/conversion/decompression-speed-s3.cpp	/^static inline const FileMetadata *read_metatdata(const s3_client_t &s3_client) {$/;"	f	file:	signature:(const s3_client_t &s3_client)
refresh	btrblocks/scheme/SchemePool.cpp	/^void SchemePool::refresh() {$/;"	f	class:btrblocks::SchemePool	signature:()
refresh	btrblocks/scheme/SchemePool.hpp	/^  static void refresh();$/;"	p	class:btrblocks::SchemePool	access:public	signature:()
registerCounter	btrblocks/common/PerfEvent.hpp	/^  void registerCounter(const std::string& name, uint64_t type, uint64_t eventID) {$/;"	f	struct:PerfEvent	access:public	signature:(const std::string& name, uint64_t type, uint64_t eventID)
rel_name	btrblocks/cache/ThreadCache.hpp	/^    string rel_name;$/;"	m	struct:btrblocks::ThreadCacheContainer::DumpMeta	access:public
relation	btrblocks/compression/Compressor.hpp	/^  const Relation& relation;$/;"	m	class:btrblocks::RelationCompressor	access:protected
relation	btrblocks/storage/Chunk.hpp	/^  const Relation& relation;$/;"	m	class:btrblocks::Chunk	access:public
releaseBitmap	btrblocks/compression/BtrReader.cpp	/^void BtrReader::releaseBitmap(u32 index) {$/;"	f	class:btrblocks::BtrReader	signature:(u32 index)
releaseBitmap	btrblocks/compression/BtrReader.hpp	/^  void releaseBitmap(u32 index);$/;"	p	class:btrblocks::BtrReader	access:public	signature:(u32 index)
releaseBitmapOwnership	btrblocks/compression/BtrReader.cpp	/^BitmapWrapper* BtrReader::releaseBitmapOwnership(u32 index) {$/;"	f	class:btrblocks::BtrReader	signature:(u32 index)
releaseBitmapOwnership	btrblocks/compression/BtrReader.hpp	/^  BitmapWrapper* releaseBitmapOwnership(u32 index);$/;"	p	class:btrblocks::BtrReader	access:public	signature:(u32 index)
releaseBitset	btrblocks/extern/RoaringBitmap.cpp	/^void BitmapWrapper::releaseBitset() {$/;"	f	class:btrblocks::bitmap::BitmapWrapper	signature:()
releaseBitset	btrblocks/extern/RoaringBitmap.hpp	/^  void releaseBitset();$/;"	p	class:btrblocks::bitmap::BitmapWrapper	access:public	signature:()
releaseStream	tools/playground/test-s3-crt.cpp	/^static void releaseStream(Aws::IOStream* stream) {$/;"	f	file:	signature:(Aws::IOStream* stream)
releasedBuffers	tools/conversion/s3-management.hpp	/^static std::atomic<uint64_t> releasedBuffers = 0;$/;"	v
releasedStreams	tools/conversion/s3-management.hpp	/^static std::atomic<uint64_t> releasedStreams = 0;$/;"	v
remaining_results	tools/conversion/s3-management.hpp	/^long remaining_results;$/;"	v
remaining_results	tools/playground/test-s3-crt.cpp	/^long remaining_results;$/;"	v
requestColumn	tools/conversion/decompression-speed-s3.cpp	/^static inline void requestColumn(const s3_client_t& s3_client, const FileMetadata *file_metadata, u32 column) {$/;"	f	file:	signature:(const s3_client_t& s3_client, const FileMetadata *file_metadata, u32 column)
reset	btrblocks/storage/Chunk.cpp	/^void Chunk::reset() {$/;"	f	class:btrblocks::Chunk	signature:()
reset	btrblocks/storage/Chunk.cpp	/^void ColumnPart::reset() {$/;"	f	class:btrblocks::ColumnPart	signature:()
reset	btrblocks/storage/Chunk.hpp	/^  void reset();$/;"	p	class:btrblocks::Chunk	access:public	signature:()
reset	btrblocks/storage/Chunk.hpp	/^  void reset();$/;"	p	class:btrblocks::ColumnPart	access:public	signature:()
reset_bitmaps	tools/conversion/decompression-speed.cpp	/^void reset_bitmaps(const FileMetadata *metadata, std::vector<std::vector<BtrReader>> &readers, std::vector<u32> &columns) {$/;"	f	signature:(const FileMetadata *metadata, std::vector<std::vector<BtrReader>> &readers, std::vector<u32> &columns)
response_stream_factory	tools/conversion/s3-management.hpp	/^static Aws::IOStreamFactory response_stream_factory;$/;"	v
response_stream_factory	tools/playground/test-s3-crt.cpp	/^Aws::IOStreamFactory response_stream_factory;$/;"	v
restriction	LICENSE	/^in the Software without restriction, including without limitation the rights$/;"	v
revertDelta	btrblocks/extern/FastPFOR.cpp	/^void LemiereImpl<Codec>::revertDelta(data_t* src, size_t count) {$/;"	f	class:LemiereImpl	signature:(data_t* src, size_t count)
revertDelta	btrblocks/extern/FastPFOR.hpp	/^  static void revertDelta(data_t* src, size_t count);$/;"	p	struct:LemiereImpl	access:public	signature:(data_t* src, size_t count)
roaring	btrblocks/extern/RoaringBitmap.hpp	/^  [[nodiscard]] inline Roaring& roaring() { return this->m_roaring; };$/;"	f	class:btrblocks::bitmap::BitmapWrapper	access:public	signature:()
rtrim	btrfiles/Trim.hpp	/^static inline void rtrim(std::string &s)$/;"	f	signature:(std::string &s)
rtrim_copy	btrfiles/Trim.hpp	/^static inline std::string rtrim_copy(std::string s)$/;"	f	signature:(std::string s)
runs_count	btrblocks/scheme/integer/RLE.hpp	/^  u32 runs_count;$/;"	m	struct:btrblocks::integers::RLEStructure	access:public
runs_count	btrblocks/scheme/templated/RLE.hpp	/^  u32 runs_count;$/;"	m	struct:btrblocks::RLEStructure	access:public
runs_count_offset	btrblocks/scheme/integer/RLE.hpp	/^  u32 runs_count_offset;$/;"	m	struct:btrblocks::integers::RLEStructure	access:public
runs_count_offset	btrblocks/scheme/templated/RLE.hpp	/^  u32 runs_count_offset;$/;"	m	struct:btrblocks::RLEStructure	access:public
s	.cache/clangd/index/VarDictionary.hpp.05E9C85E28A28EC3.idx	/^/;"	v
s3_GetObjectResponseReceiveHandler	tools/conversion/s3-management.hpp	/^void s3_GetObjectResponseReceiveHandler($/;"	f	signature:( const s3_client_t*, const s3::Model::GetObjectRequest&, s3::Model::GetObjectOutcome outcome, const std::shared_ptr<const Aws::Client::AsyncCallerContext>&)
s3_bucket	tools/conversion/s3-management.hpp	/^std::string s3_bucket;$/;"	v
s3_decompressPartFinish	tools/conversion/s3-management.hpp	/^inline void s3_decompressPartFinish(long idx) {$/;"	f	signature:(long idx)
s3_free_buffers	tools/conversion/s3-management.hpp	/^static void s3_free_buffers() {$/;"	f	signature:()
s3_getStream	tools/conversion/s3-management.hpp	/^inline Aws::IOStream *s3_getStream() {$/;"	f	signature:()
s3_get_client	tools/conversion/s3-management.hpp	/^inline s3_client_t s3_get_client(std::string &region) {$/;"	f	signature:(std::string &region)
s3_init	tools/conversion/s3-management.hpp	/^inline void s3_init(std::size_t total_requests, long prealloc, std::size_t threads, std::string &bucket, uint64_t (*decompressPart)(long)) {$/;"	f	signature:(std::size_t total_requests, long prealloc, std::size_t threads, std::string &bucket, uint64_t (*decompressPart)(long))
s3_prepare_buffers	tools/conversion/s3-management.hpp	/^static void s3_prepare_buffers(long prealloc) {$/;"	f	signature:(long prealloc)
s3_region	tools/conversion/s3-management.hpp	/^std::string s3_region;$/;"	v
s3_releaseBuffer	tools/conversion/s3-management.hpp	/^inline void s3_releaseBuffer(long idx) {$/;"	f	signature:(long idx)
s3_releaseStream	tools/conversion/s3-management.hpp	/^inline long s3_releaseStream(Aws::IOStream *stream) {$/;"	f	signature:(Aws::IOStream *stream)
s3_requestFile	tools/conversion/s3-management.hpp	/^inline void s3_requestFile(const s3_client_t &s3_client, const std::string &key) {$/;"	f	signature:(const s3_client_t &s3_client, const std::string &key)
s3_wait_for_end	tools/conversion/s3-management.hpp	/^inline void s3_wait_for_end() {$/;"	f	signature:()
sample_count	tools/playground/sampling_algorithms.cpp	/^  u32 sample_size, sample_count;$/;"	m	struct:RandomSampler	file:	access:public
sample_size	tools/playground/sampling_algorithms.cpp	/^  u32 sample_size, sample_count;$/;"	m	struct:RandomSampler	file:	access:public
sampled_items	tools/playground/sampling_algorithms.cpp	/^  virtual u32 sampled_items() const = 0;$/;"	p	struct:Sampler	file:	access:public	signature:() const
samples	btrblocks/stats/NumberStats.hpp	/^  tuple<vector<T>, vector<BITMAP>> samples(u32 n, u32 length) {$/;"	f	struct:btrblocks::NumberStats	access:public	signature:(u32 n, u32 length)
scale	btrblocks/common/PerfEvent.hpp	/^  uint64_t scale;$/;"	m	struct:PerfEventBlock	access:public
scan	btrblocks/scheme/CompressionScheme.hpp	/^  virtual void scan(Predicate, BITMAP* result, const u8* src, u32 tuple_count) = 0;$/;"	p	class:btrblocks::IntegerScheme	access:public	signature:(Predicate, BITMAP* result, const u8* src, u32 tuple_count)
scan	btrblocks/scheme/double/DoubleBP.cpp	/^void DoubleBP::scan(Predicate, BITMAP*, const u8*, u32) {$/;"	f	class:btrblocks::doubles::DoubleBP	signature:(Predicate, BITMAP*, const u8*, u32)
scan	btrblocks/scheme/double/DoubleBP.hpp	/^  void scan(Predicate, BITMAP*, const u8*, u32);$/;"	p	class:btrblocks::doubles::DoubleBP	access:public	signature:(Predicate, BITMAP*, const u8*, u32)
scan	btrblocks/scheme/integer/DynamicDictionary.cpp	/^void DynamicDictionary::scan(Predicate, BITMAP*, const u8*, u32) {$/;"	f	class:btrblocks::integers::DynamicDictionary	signature:(Predicate, BITMAP*, const u8*, u32)
scan	btrblocks/scheme/integer/FOR.cpp	/^void FOR::scan(Predicate, BITMAP*, const u8*, u32) {$/;"	f	class:btrblocks::legacy::integers::FOR	signature:(Predicate, BITMAP*, const u8*, u32)
scan	btrblocks/scheme/integer/Frequency.cpp	/^void Frequency::scan(Predicate, BITMAP*, const u8*, u32) {$/;"	f	class:btrblocks::integers::Frequency	signature:(Predicate, BITMAP*, const u8*, u32)
scan	btrblocks/scheme/integer/OneValue.cpp	/^void OneValue::scan(Predicate, BITMAP*, const u8*, u32) {$/;"	f	class:btrblocks::legacy::integers::OneValue	signature:(Predicate, BITMAP*, const u8*, u32)
scan	btrblocks/scheme/integer/PBP.cpp	/^void EXP_FBP::scan(Predicate, BITMAP*, const u8*, u32) {$/;"	f	class:btrblocks::integers::EXP_FBP	signature:(Predicate, BITMAP*, const u8*, u32)
scan	btrblocks/scheme/integer/PBP.cpp	/^void FBP::scan(Predicate, BITMAP*, const u8*, u32) {$/;"	f	class:btrblocks::integers::FBP	signature:(Predicate, BITMAP*, const u8*, u32)
scan	btrblocks/scheme/integer/PBP.cpp	/^void PBP::scan(Predicate, BITMAP*, const u8*, u32) {$/;"	f	class:btrblocks::integers::PBP	signature:(Predicate, BITMAP*, const u8*, u32)
scan	btrblocks/scheme/integer/PBP.cpp	/^void PBP_DELTA::scan(Predicate, BITMAP*, const u8*, u32) {$/;"	f	class:btrblocks::integers::PBP_DELTA	signature:(Predicate, BITMAP*, const u8*, u32)
scan	btrblocks/scheme/integer/RLE.cpp	/^void RLE::scan(Predicate, BITMAP*, const u8*, u32) {$/;"	f	class:btrblocks::integers::RLE	signature:(Predicate, BITMAP*, const u8*, u32)
scan	btrblocks/scheme/integer/Truncation.cpp	/^void Truncation16::scan(Predicate, BITMAP*, const u8*, u32) {$/;"	f	class:btrblocks::legacy::integers::Truncation16	signature:(Predicate, BITMAP*, const u8*, u32)
scan	btrblocks/scheme/integer/Truncation.cpp	/^void Truncation8::scan(Predicate, BITMAP*, const u8*, u32) {$/;"	f	class:btrblocks::legacy::integers::Truncation8	signature:(Predicate, BITMAP*, const u8*, u32)
scan	btrblocks/scheme/integer/Uncompressed.cpp	/^void Uncompressed::scan(Predicate, BITMAP*, const u8*, u32) {$/;"	f	class:btrblocks::legacy::integers::Uncompressed	signature:(Predicate, BITMAP*, const u8*, u32)
schemeType	btrblocks/scheme/CompressionScheme.hpp	/^  virtual DoubleSchemeType schemeType() = 0;$/;"	p	class:btrblocks::DoubleScheme	access:public	signature:()
schemeType	btrblocks/scheme/CompressionScheme.hpp	/^  virtual IntegerSchemeType schemeType() = 0;$/;"	p	class:btrblocks::IntegerScheme	access:public	signature:()
schemeType	btrblocks/scheme/CompressionScheme.hpp	/^  virtual StringSchemeType schemeType() = 0;$/;"	p	class:btrblocks::StringScheme	access:public	signature:()
schemes	tools/playground/sampling_algorithms.cpp	/^  static const pool& schemes() {$/;"	f	struct:Schemes	access:public	signature:()
sd_offset	btrblocks/scheme/double/MaxExponent.hpp	/^  u32 sd_offset;$/;"	m	struct:btrblocks::legacy::doubles::MaxExponentStructure	access:public
sd_scheme	btrblocks/scheme/double/MaxExponent.hpp	/^  u8 sd_scheme;$/;"	m	struct:btrblocks::legacy::doubles::MaxExponentStructure	access:public
selfDescription	btrblocks/scheme/CompressionScheme.hpp	/^  inline string selfDescription() { return ConvertSchemeTypeToString(this->schemeType()); }$/;"	f	class:btrblocks::DoubleScheme	access:public	signature:()
selfDescription	btrblocks/scheme/CompressionScheme.hpp	/^  inline string selfDescription() { return ConvertSchemeTypeToString(this->schemeType()); }$/;"	f	class:btrblocks::IntegerScheme	access:public	signature:()
selfDescription	btrblocks/scheme/CompressionScheme.hpp	/^  inline string selfDescription(const u8* src = nullptr) {$/;"	f	class:btrblocks::StringScheme	access:public	signature:(const u8* src = nullptr)
set	btrblocks/scheme/SchemeSet.hpp	/^  std::bitset<N> set;$/;"	m	struct:btrblocks::SchemeSet	access:private
setFsst	btrblocks/cache/ThreadCache.hpp	/^  static void setFsst() {$/;"	f	class:btrblocks::ThreadCache	access:public	signature:()
setParam	btrblocks/common/PerfEvent.hpp	/^  void setParam(const std::string& name, T value) {$/;"	f	struct:PerfEvent	access:public	signature:(const std::string& name, T value)
setParam	btrblocks/common/PerfEvent.hpp	/^  void setParam(const std::string& name, const char* value) { params[name] = value; }$/;"	f	struct:PerfEvent	access:public	signature:(const std::string& name, const char* value)
setParam	btrblocks/common/PerfEvent.hpp	/^  void setParam(const std::string& name, const std::string& value) { params[name] = value; }$/;"	f	struct:PerfEvent	access:public	signature:(const std::string& name, const std::string& value)
set_bitmap	btrfiles/Parser.cpp	/^  vector<BITMAP> set_bitmap;$/;"	m	struct:btrblocks::files::ColumnDescriptor	file:	access:public
set_count	btrblocks/stats/NumberStats.hpp	/^  u32 set_count;$/;"	m	struct:btrblocks::NumberStats	access:public
set_count	btrblocks/stats/StringStats.hpp	/^  u32 set_count;$/;"	m	struct:btrblocks::StringStats	access:public
set_level	btrblocks/common/Log.hpp	/^inline void set_level(level) { \/* noop *\/$/;"	f	namespace:Log	signature:(level)
setupSchemePool	tools/playground/pseudodecimal_benchmark.cpp	/^void setupSchemePool() {$/;"	f	signature:()
shouldUseFOR	btrblocks/compression/SchemePicker.hpp	/^  constexpr static bool shouldUseFOR(DOUBLE) { return false; }$/;"	f	class:btrblocks::TypeWrapper	access:public	signature:(DOUBLE)
shouldUseFOR	btrblocks/compression/SchemePicker.hpp	/^  constexpr static bool shouldUseFOR(INTEGER min) {$/;"	f	class:btrblocks::TypeWrapper	access:public	signature:(INTEGER min)
shouldUseFOR	btrblocks/compression/SchemePicker.hpp	/^  constexpr static bool shouldUseFOR(str) { return false; }$/;"	f	class:btrblocks::TypeWrapper	access:public	signature:(str)
size	btrblocks/compression/Datablock.hpp	/^  u32 size;$/;"	m	struct:btrblocks::DatablockMeta	access:public
size	btrblocks/storage/Chunk.hpp	/^  SIZE size;$/;"	m	class:btrblocks::InputChunk	access:public
size	btrblocks/storage/Chunk.hpp	/^  [[nodiscard]] inline SIZE size(u32 c) const { return sizes[c]; }$/;"	f	class:btrblocks::Chunk	access:public	signature:(u32 c) const
size	btrblocks/storage/Column.cpp	/^SIZE Column::size() const {$/;"	f	class:btrblocks::Column	signature:() const
size	btrblocks/storage/Column.hpp	/^  [[nodiscard]] SIZE size() const;$/;"	p	class:btrblocks::Column	access:public	signature:() const
size	btrblocks/storage/MMapVector.hpp	/^  [[nodiscard]] uint64_t size() const { return count; }$/;"	f	struct:btrblocks::mmapvector::Vector	access:public	signature:() const
size	btrblocks/storage/MMapVector.hpp	/^  [[nodiscard]] uint64_t size() const { return data->count; }$/;"	f	struct:btrblocks::mmapvector::Vector	access:public	signature:() const
size	btrblocks/storage/MMapVector.hpp	/^  uint64_t size;$/;"	m	struct:btrblocks::mmapvector::StringIndexSlot	access:public
size	btrblocks/storage/StringArrayViewer.hpp	/^  [[nodiscard]] inline u32 size(u32 i) const {$/;"	f	struct:btrblocks::StringArrayViewer	access:public	signature:(u32 i) const
sizeInBytes	btrblocks/storage/Column.cpp	/^SIZE Column::sizeInBytes() const {$/;"	f	class:btrblocks::Column	signature:() const
sizeInBytes	btrblocks/storage/Column.hpp	/^  [[nodiscard]] SIZE sizeInBytes() const;$/;"	p	class:btrblocks::Column	access:public	signature:() const
size_bytes	btrblocks/storage/Chunk.hpp	/^  [[nodiscard]] inline SIZE size_bytes() const {$/;"	f	class:btrblocks::Chunk	access:public	signature:() const
sizeof	btrblocks/compression/Datablock.hpp	/^static_assert(sizeof(ColumnChunkMeta) == 12);$/;"	p	namespace:btrblocks	signature:(ColumnChunkMeta)
sizeof	btrblocks/compression/Datablock.hpp	/^static_assert(sizeof(ColumnMeta) == 16);$/;"	p	namespace:btrblocks	signature:(ColumnMeta)
sizeof	btrblocks/compression/Datablock.hpp	/^static_assert(sizeof(ColumnPartInfo) == 8);$/;"	p	namespace:btrblocks	signature:(ColumnPartInfo)
sizeof	btrblocks/compression/Datablock.hpp	/^static_assert(sizeof(DatablockMeta) == 16);$/;"	p	namespace:btrblocks	signature:(DatablockMeta)
sizeof	btrblocks/compression/Datablock.hpp	/^static_assert(sizeof(FileMetadata) == 8);$/;"	p	namespace:btrblocks	signature:(FileMetadata)
sizeof	btrblocks/scheme/double/Pseudodecimal.cpp	/^static_assert(sizeof(exact_fractions_of_ten) == sizeof(double) * 23);$/;"	m	namespace:btrblocks::doubles	file:
sizeof	btrblocks/scheme/double/Pseudodecimal.hpp	/^  static_assert(sizeof(Slot) == 1);$/;"	p	struct:btrblocks::doubles::DecimalStructure	access:public	signature:(Slot)
sizeof	btrblocks/storage/StringPointerArrayViewer.hpp	/^  static_assert(sizeof(View) == 8);$/;"	p	struct:btrblocks::StringPointerArrayViewer	access:public	signature:(View)
sizes	btrblocks/storage/Chunk.hpp	/^  unique_ptr<SIZE[]> sizes;$/;"	m	class:btrblocks::Chunk	access:public
slot	btrblocks/storage/MMapVector.hpp	/^    SlotPtr slot;$/;"	m	struct:btrblocks::mmapvector::Vector::_iterator	access:public
slot	btrblocks/storage/MMapVector.hpp	/^    StringIndexSlot slot[];$/;"	m	struct:btrblocks::mmapvector::Vector::Data	access:public
slots_ptr	btrblocks/storage/StringArrayViewer.hpp	/^  const u8* slots_ptr;$/;"	m	struct:btrblocks::StringArrayViewer	access:public
so	LICENSE	/^furnished to do so, subject to the following conditions:$/;"	v
src	btrblocks/stats/NumberStats.hpp	/^  const T* src;$/;"	m	struct:btrblocks::NumberStats	access:public
start	btrblocks/common/PerfExternal.hpp	/^  static void start(bool print = false) {$/;"	f	struct:PerfExternal	access:public	signature:(bool print = false)
start	btrblocks/common/PerfExternal.hpp	/^  void start() {$/;"	f	struct:PerfExternalBlock	access:private	signature:()
startCounters	btrblocks/common/PerfEvent.hpp	/^  void startCounters() {$/;"	f	struct:PerfEvent	access:public	signature:()
startCounters	btrblocks/common/PerfEvent.hpp	/^  void startCounters() {}$/;"	f	struct:PerfEvent	access:public	signature:()
startTime	btrblocks/common/PerfEvent.hpp	/^  std::chrono::time_point<std::chrono::steady_clock> startTime;$/;"	m	struct:PerfEvent	access:public
staticSchemeType	btrblocks/scheme/double/DoubleBP.hpp	/^  inline static DoubleSchemeType staticSchemeType() { return DoubleSchemeType::DOUBLE_BP; }$/;"	f	class:btrblocks::doubles::DoubleBP	access:public	signature:()
staticSchemeType	btrblocks/scheme/double/DynamicDictionary.hpp	/^  inline static DoubleSchemeType staticSchemeType() { return DoubleSchemeType::DICT; }$/;"	f	class:btrblocks::doubles::DynamicDictionary	access:public	signature:()
staticSchemeType	btrblocks/scheme/double/FixedDictionary.hpp	/^  inline static DoubleSchemeType staticSchemeType() { return DoubleSchemeType::DICTIONARY_16; }$/;"	f	class:btrblocks::legacy::doubles::Dictionary16	access:public	signature:()
staticSchemeType	btrblocks/scheme/double/FixedDictionary.hpp	/^  inline static DoubleSchemeType staticSchemeType() { return DoubleSchemeType::DICTIONARY_8; }$/;"	f	class:btrblocks::legacy::doubles::Dictionary8	access:public	signature:()
staticSchemeType	btrblocks/scheme/double/Frequency.hpp	/^  inline static DoubleSchemeType staticSchemeType() { return DoubleSchemeType::FREQUENCY; }$/;"	f	class:btrblocks::legacy::doubles::Frequency	access:public	signature:()
staticSchemeType	btrblocks/scheme/double/MaxExponent.hpp	/^  inline static DoubleSchemeType staticSchemeType() { return DoubleSchemeType::PSEUDODECIMAL; }$/;"	f	class:btrblocks::legacy::doubles::MaxExponent	access:public	signature:()
staticSchemeType	btrblocks/scheme/double/OneValue.hpp	/^  inline static DoubleSchemeType staticSchemeType() { return DoubleSchemeType::ONE_VALUE; }$/;"	f	class:btrblocks::legacy::doubles::OneValue	access:public	signature:()
staticSchemeType	btrblocks/scheme/double/Pseudodecimal.hpp	/^  inline static DoubleSchemeType staticSchemeType() { return DoubleSchemeType::PSEUDODECIMAL; }$/;"	f	class:btrblocks::doubles::Decimal	access:public	signature:()
staticSchemeType	btrblocks/scheme/double/RLE.hpp	/^  inline static DoubleSchemeType staticSchemeType() { return DoubleSchemeType::RLE; }$/;"	f	class:btrblocks::doubles::RLE	access:public	signature:()
staticSchemeType	btrblocks/scheme/double/Uncompressed.hpp	/^  inline static DoubleSchemeType staticSchemeType() { return DoubleSchemeType::UNCOMPRESSED; }$/;"	f	class:btrblocks::legacy::doubles::Uncompressed	access:public	signature:()
staticSchemeType	btrblocks/scheme/integer/DynamicDictionary.hpp	/^  inline static IntegerSchemeType staticSchemeType() { return IntegerSchemeType::DICT; }$/;"	f	class:btrblocks::integers::DynamicDictionary	access:public	signature:()
staticSchemeType	btrblocks/scheme/integer/FOR.hpp	/^  inline static IntegerSchemeType staticSchemeType() { return IntegerSchemeType::FOR; }$/;"	f	class:btrblocks::legacy::integers::FOR	access:public	signature:()
staticSchemeType	btrblocks/scheme/integer/FixedDictionary.hpp	/^  inline static IntegerSchemeType staticSchemeType() { return IntegerSchemeType::DICTIONARY_16; }$/;"	f	class:btrblocks::legacy::integers::Dictionary16	access:public	signature:()
staticSchemeType	btrblocks/scheme/integer/FixedDictionary.hpp	/^  inline static IntegerSchemeType staticSchemeType() { return IntegerSchemeType::DICTIONARY_8; }$/;"	f	class:btrblocks::legacy::integers::Dictionary8	access:public	signature:()
staticSchemeType	btrblocks/scheme/integer/Frequency.hpp	/^  inline static IntegerSchemeType staticSchemeType() { return IntegerSchemeType::FREQUENCY; }$/;"	f	class:btrblocks::integers::Frequency	access:public	signature:()
staticSchemeType	btrblocks/scheme/integer/OneValue.hpp	/^  inline static IntegerSchemeType staticSchemeType() { return IntegerSchemeType::ONE_VALUE; }$/;"	f	class:btrblocks::legacy::integers::OneValue	access:public	signature:()
staticSchemeType	btrblocks/scheme/integer/PBP.hpp	/^  inline static IntegerSchemeType staticSchemeType() { return IntegerSchemeType::BP; }$/;"	f	class:btrblocks::integers::EXP_FBP	access:public	signature:()
staticSchemeType	btrblocks/scheme/integer/PBP.hpp	/^  inline static IntegerSchemeType staticSchemeType() { return IntegerSchemeType::BP; }$/;"	f	class:btrblocks::integers::FBP	access:public	signature:()
staticSchemeType	btrblocks/scheme/integer/PBP.hpp	/^  inline static IntegerSchemeType staticSchemeType() { return IntegerSchemeType::PFOR; }$/;"	f	class:btrblocks::integers::PBP	access:public	signature:()
staticSchemeType	btrblocks/scheme/integer/PBP.hpp	/^  inline static IntegerSchemeType staticSchemeType() { return IntegerSchemeType::PFOR_DELTA; }$/;"	f	class:btrblocks::integers::PBP_DELTA	access:public	signature:()
staticSchemeType	btrblocks/scheme/integer/RLE.hpp	/^  inline static IntegerSchemeType staticSchemeType() { return IntegerSchemeType::RLE; }$/;"	f	class:btrblocks::integers::RLE	access:public	signature:()
staticSchemeType	btrblocks/scheme/integer/Truncation.hpp	/^  inline static IntegerSchemeType staticSchemeType() { return IntegerSchemeType::TRUNCATION_16; }$/;"	f	class:btrblocks::legacy::integers::Truncation16	access:public	signature:()
staticSchemeType	btrblocks/scheme/integer/Truncation.hpp	/^  inline static IntegerSchemeType staticSchemeType() { return IntegerSchemeType::TRUNCATION_8; }$/;"	f	class:btrblocks::legacy::integers::Truncation8	access:public	signature:()
staticSchemeType	btrblocks/scheme/integer/Uncompressed.hpp	/^  inline static IntegerSchemeType staticSchemeType() { return IntegerSchemeType::UNCOMPRESSED; }$/;"	f	class:btrblocks::legacy::integers::Uncompressed	access:public	signature:()
staticSchemeType	btrblocks/scheme/string/DynamicDictionary.hpp	/^  inline static StringSchemeType staticSchemeType() { return StringSchemeType::DICT; }$/;"	f	class:btrblocks::strings::DynamicDictionary	access:public	signature:()
staticSchemeType	btrblocks/scheme/string/FixedDictionary.hpp	/^  inline static StringSchemeType staticSchemeType() { return StringSchemeType::DICTIONARY_16; }$/;"	f	class:btrblocks::legacy::strings::Dictionary16	access:public	signature:()
staticSchemeType	btrblocks/scheme/string/FixedDictionary.hpp	/^  inline static StringSchemeType staticSchemeType() { return StringSchemeType::DICTIONARY_8; }$/;"	f	class:btrblocks::legacy::strings::Dictionary8	access:public	signature:()
staticSchemeType	btrblocks/scheme/string/Fsst.hpp	/^  inline static StringSchemeType staticSchemeType() { return StringSchemeType::FSST; }$/;"	f	class:btrblocks::strings::Fsst	access:public	signature:()
staticSchemeType	btrblocks/scheme/string/OneValue.hpp	/^  inline static StringSchemeType staticSchemeType() { return StringSchemeType::ONE_VALUE; }$/;"	f	class:btrblocks::legacy::strings::OneValue	access:public	signature:()
staticSchemeType	btrblocks/scheme/string/Uncompressed.hpp	/^  inline static StringSchemeType staticSchemeType() { return StringSchemeType::UNCOMPRESSED; }$/;"	f	class:btrblocks::legacy::strings::Uncompressed	access:public	signature:()
stop	btrblocks/common/PerfExternal.hpp	/^  static void stop(bool print = false) {$/;"	f	struct:PerfExternal	access:public	signature:(bool print = false)
stop	btrblocks/common/PerfExternal.hpp	/^  void stop() {$/;"	f	struct:PerfExternalBlock	access:private	signature:()
stopCounters	btrblocks/common/PerfEvent.hpp	/^  void stopCounters() {$/;"	f	struct:PerfEvent	access:public	signature:()
stopCounters	btrblocks/common/PerfEvent.hpp	/^  void stopCounters() {}$/;"	f	struct:PerfEvent	access:public	signature:()
stopTime	btrblocks/common/PerfEvent.hpp	/^  std::chrono::time_point<std::chrono::steady_clock> stopTime;$/;"	m	struct:PerfEvent	access:public
streambufarrays	tools/conversion/s3-management.hpp	/^static std::vector<std::vector<unsigned char>> streambufarrays;$/;"	v
streambufarrays	tools/playground/test-s3-crt.cpp	/^std::vector<std::vector<unsigned char>> streambufarrays;$/;"	v
streambuflens	tools/conversion/s3-management.hpp	/^static std::vector<unsigned long> streambuflens;$/;"	v
streambufs	tools/conversion/s3-management.hpp	/^static std::vector<Aws::Utils::Stream::PreallocatedStreamBuf *> streambufs;$/;"	v
streambufs	tools/playground/test-s3-crt.cpp	/^std::vector<Aws::Utils::Stream::PreallocatedStreamBuf*> streambufs;$/;"	v
stri	.cache/clangd/index/SchemeType.hpp.2F48A657A9FDB12C.idx	/^RIFFÖ$/;"	v
stri	.cache/clangd/index/Uncompressed.cpp.4E7FAD4D80846C10.idx	/^RIFF,/;"	v
stri7	.cache/clangd/index/fsst_0.cpp.96D662909B45B131.idx	/^RIFF/;"	v
striH	.cache/clangd/index/test-s3.cpp.BDE17F5541015E4F.idx	/^RIFF\\/;"	v
string_schemes	btrblocks/scheme/SchemePool.hpp	/^  std::unordered_map<StringSchemeType, unique_ptr<StringScheme>> string_schemes;$/;"	m	struct:btrblocks::SchemesCollection	access:public
strings	btrblocks/btrblocks.hpp	/^  } strings;$/;"	m	struct:btrblocks::BtrBlocksConfig	typeref:struct:btrblocks::BtrBlocksConfig::__anon7	access:public
strings	btrblocks/scheme/SchemeConfig.hpp	/^  } strings;$/;"	m	struct:btrblocks::SchemeConfig	typeref:struct:btrblocks::SchemeConfig::__anon4	access:public
strings	btrblocks/scheme/string/DynamicDictionary.cpp	/^namespace btrblocks::strings {$/;"	n	class:btrblocks	file:
strings	btrblocks/scheme/string/DynamicDictionary.hpp	/^namespace btrblocks::strings {$/;"	n	class:btrblocks
strings	btrblocks/scheme/string/FixedDictionary.cpp	/^namespace btrblocks::legacy::strings {$/;"	n	class:btrblocks::legacy	file:
strings	btrblocks/scheme/string/FixedDictionary.hpp	/^namespace btrblocks::legacy::strings {$/;"	n	class:btrblocks::legacy
strings	btrblocks/scheme/string/Fsst.cpp	/^namespace btrblocks::strings {$/;"	n	class:btrblocks	file:
strings	btrblocks/scheme/string/Fsst.hpp	/^namespace btrblocks::strings {$/;"	n	class:btrblocks
strings	btrblocks/scheme/string/OneValue.cpp	/^namespace btrblocks::legacy::strings {$/;"	n	class:btrblocks::legacy	file:
strings	btrblocks/scheme/string/OneValue.hpp	/^namespace btrblocks::legacy::strings {$/;"	n	class:btrblocks::legacy
strings	btrblocks/scheme/string/Uncompressed.cpp	/^namespace btrblocks::legacy::strings {$/;"	n	class:btrblocks::legacy	file:
strings	btrblocks/scheme/string/Uncompressed.hpp	/^namespace btrblocks::legacy::strings {$/;"	n	class:btrblocks::legacy
strings	btrblocks/storage/Column.cpp	/^const Vector<str>& Column::strings() const {$/;"	f	class:btrblocks::Column	signature:() const
strings	btrblocks/storage/Column.hpp	/^  [[nodiscard]] const Vector<str>& strings() const;$/;"	p	class:btrblocks::Column	access:public	signature:() const
strings_offset	btrblocks/scheme/string/Fsst.hpp	/^  u32 strings_offset;$/;"	m	struct:btrblocks::strings::FsstStructure	access:public
stripped_line	tools/conversion/compare_csvs.py	/^                stripped_line = part$/;"	v
sublicense	LICENSE	/^to use, copy, modify, merge, publish, distribute, sublicense, and\/or sell$/;"	v
test	btrblocks/extern/RoaringBitmap.hpp	/^  [[nodiscard]] inline bool test(u32 idx) { return this->get_bitset()->test(idx); }$/;"	f	class:btrblocks::bitmap::BitmapWrapper	access:public	signature:(u32 idx)
testSampling	tools/playground/sampling_algorithms.cpp	/^TestResult testSampling(const std::string& filename, const std::string& bitmap_file, u8* output, PerfEvent& e) {$/;"	f	signature:(const std::string& filename, const std::string& bitmap_file, u8* output, PerfEvent& e)
test_compression	tools/playground/for_tests.cpp	/^static bool test_compression(std::vector<INTEGER> &src, btrblocks::IntegerScheme &scheme) {$/;"	f	file:	signature:(std::vector<INTEGER> &src, btrblocks::IntegerScheme &scheme)
test_compression	tools/playground/pseudodecimal_benchmark.cpp	/^bool test_compression(DoubleScheme &scheme, DoubleStats& stats, T* src, size_t size, PerfEvent& e, u8 cascade) {$/;"	f	signature:(DoubleScheme &scheme, DoubleStats& stats, T* src, size_t size, PerfEvent& e, u8 cascade)
time_enabled	btrblocks/common/PerfEvent.hpp	/^      uint64_t time_enabled;$/;"	m	struct:PerfEvent::event::read_format	access:public
time_running	btrblocks/common/PerfEvent.hpp	/^      uint64_t time_running;$/;"	m	struct:PerfEvent::event::read_format	access:public
top_value	btrblocks/scheme/integer/Frequency.hpp	/^  UINTEGER top_value;$/;"	m	struct:btrblocks::integers::FrequencyStructure	access:public
top_value	btrblocks/scheme/templated/Frequency.hpp	/^  NumberType top_value;$/;"	m	struct:btrblocks::FrequencyStructure	access:public
total_data_size	btrblocks/compression/Compressor.hpp	/^  SIZE total_data_size;$/;"	m	struct:btrblocks::OutputBlockStats	access:public
total_db_size	btrblocks/compression/Compressor.hpp	/^  SIZE total_db_size;$/;"	m	struct:btrblocks::OutputBlockStats	access:public
total_decompressed_size	btrblocks/scheme/string/DynamicDictionary.hpp	/^  u32 total_decompressed_size;  \/\/ i.e original input size$/;"	m	struct:btrblocks::strings::DynamicDictionaryStructure	access:public
total_decompressed_size	btrblocks/scheme/string/Fsst.hpp	/^  u32 total_decompressed_size;$/;"	m	struct:btrblocks::strings::FsstStructure	access:public
total_decompressed_size	tools/conversion/decompression-speed-s3.cpp	/^static std::atomic<uint64_t> total_decompressed_size = 0;$/;"	v	file:
total_downloaded_size	tools/conversion/s3-management.hpp	/^static std::atomic<uint64_t> total_downloaded_size = 0;$/;"	v
total_downloaded_size	tools/playground/test-s3-crt.cpp	/^static std::atomic<uint64_t> total_downloaded_size = 0;$/;"	v	file:
total_length	btrblocks/stats/StringStats.hpp	/^  u32 total_length;         \/\/ only string starting from slots end$/;"	m	struct:btrblocks::StringStats	access:public
total_nullmap_size	btrblocks/compression/Compressor.hpp	/^  SIZE total_nullmap_size;$/;"	m	struct:btrblocks::OutputBlockStats	access:public
total_requests	tools/conversion/s3-management.hpp	/^static std::atomic<uint64_t> total_requests = 0;$/;"	v
total_size	btrblocks/scheme/string/Uncompressed.hpp	/^  u32 total_size;$/;"	m	struct:btrblocks::legacy::strings::UncompressedStructure	access:public
total_size	btrblocks/scheme/templated/VarDictionary.hpp	/^  u32 total_size;$/;"	m	struct:btrblocks::legacy::VarDictionaryStructure	access:public
total_size	btrblocks/stats/NumberStats.hpp	/^  u32 total_size;$/;"	m	struct:btrblocks::NumberStats	access:public
total_size	btrblocks/stats/StringStats.hpp	/^  u32 total_size;           \/\/ everything in the column including slots$/;"	m	struct:btrblocks::StringStats	access:public
total_size	btrblocks/storage/Chunk.hpp	/^  SIZE total_size = 0;$/;"	m	class:btrblocks::ColumnPart	access:public
total_unique_length	btrblocks/stats/StringStats.hpp	/^  u32 total_unique_length;  \/\/ only the unique (dict) strings$/;"	m	struct:btrblocks::StringStats	access:public
trace	btrblocks/common/Log.hpp	/^enum class level { trace, debug, info, warn, err, critical, off };$/;"	m	class:Log::level	access:private
trim	btrfiles/Trim.hpp	/^static inline void trim(std::string &s)$/;"	f	signature:(std::string &s)
trim_copy	btrfiles/Trim.hpp	/^static inline std::string trim_copy(std::string s)$/;"	f	signature:(std::string s)
truncated_values	btrblocks/scheme/integer/Truncation.hpp	/^  CodeType truncated_values[];$/;"	m	struct:btrblocks::legacy::integers::TruncationStructure	access:public
tuple_count	btrblocks/compression/Datablock.hpp	/^  u32 tuple_count;$/;"	m	struct:btrblocks::ColumnChunkMeta	access:public
tuple_count	btrblocks/scheme/double/Pseudodecimal.cpp	/^  u32 tuple_count;$/;"	m	struct:btrblocks::doubles::DecimalIterateParam	file:	access:public
tuple_count	btrblocks/stats/NumberStats.hpp	/^  u32 tuple_count;$/;"	m	struct:btrblocks::NumberStats	access:public
tuple_count	btrblocks/stats/StringStats.hpp	/^  u32 tuple_count;$/;"	m	struct:btrblocks::StringStats	access:public
tuple_count	btrblocks/storage/Chunk.hpp	/^  const u64 tuple_count;$/;"	m	class:btrblocks::Chunk	access:public
tuple_count	btrblocks/storage/Chunk.hpp	/^  const u64 tuple_count;$/;"	m	class:btrblocks::InputChunk	access:public
tuple_count	btrblocks/storage/Relation.hpp	/^  u64 tuple_count;$/;"	m	class:btrblocks::Relation	access:public
type	btrblocks/compression/Datablock.hpp	/^  ColumnType type;$/;"	m	struct:btrblocks::ColumnChunkMeta	access:public
type	btrblocks/compression/Datablock.hpp	/^  ColumnType type;$/;"	m	struct:btrblocks::ColumnPartInfo	access:public
type	btrblocks/extern/RoaringBitmap.hpp	/^  [[nodiscard]] inline BitmapType type() const { return this->m_type; };$/;"	f	class:btrblocks::bitmap::BitmapWrapper	access:public	signature:() const
type	btrblocks/storage/Chunk.hpp	/^  ColumnType type;$/;"	m	class:btrblocks::InputChunk	access:public
type	btrblocks/storage/Column.hpp	/^  const ColumnType type;$/;"	m	class:btrblocks::Column	access:public
u32_count	btrblocks/scheme/double/DoubleBP.hpp	/^  u32 u32_count;  \/\/ number of 4 bytes written by FastBP$/;"	m	struct:btrblocks::doubles::DoubleBPStructure	access:public
u32_count	btrblocks/scheme/integer/PBP.hpp	/^  u32 u32_count;        \/\/ number of 4 bytes written by FastPFor$/;"	m	struct:btrblocks::integers::XPBPStructure	access:public
unique_count	btrblocks/stats/NumberStats.hpp	/^  u32 unique_count;$/;"	m	struct:btrblocks::NumberStats	access:public
unique_count	btrblocks/stats/StringStats.hpp	/^  u32 unique_count;$/;"	m	struct:btrblocks::StringStats	access:public
units	btrblocks/common/Units.hpp	/^inline namespace units {$/;"	n	namespace:btrblocks
upload_part	tools/playground/generate_s3_data.cpp	/^static std::pair<bool, std::string> upload_part(const Aws::S3Crt::S3CrtClient& s3_client,$/;"	f	file:	signature:(const Aws::S3Crt::S3CrtClient& s3_client, const std::string& bucket, std::string& key, std::string& upload_id, size_t part_number, std::shared_ptr<std::stringstream>& sstream)
usage	tools/playground/generate_s3_data.cpp	/^static void usage(const char* program) {$/;"	f	file:	signature:(const char* program)
usage	tools/playground/test-s3-crt.cpp	/^static void usage(const char* program) {$/;"	f	file:	signature:(const char* program)
use	LICENSE	/^to use, copy, modify, merge, publish, distribute, sublicense, and\/or sell$/;"	v
use_fsst	btrblocks/scheme/string/DynamicDictionary.hpp	/^  bool use_fsst;$/;"	m	struct:btrblocks::strings::DynamicDictionaryStructure	access:public
use_rle_optimized_path	btrblocks/scheme/string/DynamicDictionary.hpp	/^  bool use_rle_optimized_path;$/;"	m	struct:btrblocks::strings::DynamicDictionaryStructure	access:public
used_compression_schemes	btrblocks/compression/Compressor.hpp	/^  vector<u8> used_compression_schemes;$/;"	m	struct:btrblocks::OutputBlockStats	access:public
usesFsst	btrblocks/scheme/CompressionScheme.hpp	/^  virtual bool usesFsst(const u8* src) {$/;"	f	class:btrblocks::StringScheme	access:public	signature:(const u8* src)
usesFsst	btrblocks/scheme/string/DynamicDictionary.cpp	/^bool DynamicDictionary::usesFsst(const u8* src) {$/;"	f	class:btrblocks::strings::DynamicDictionary	signature:(const u8* src)
valid_types	tools/conversion/compare_csvs.py	/^valid_types = ["integer", "smallint", "double", "float", "string"]$/;"	v
validateData	tools/examples/compression.cpp	/^bool validateData(size_t size, T* input, T* output) {$/;"	f	signature:(size_t size, T* input, T* output)
value	btrblocks/common/PerfEvent.hpp	/^      uint64_t value;$/;"	m	struct:PerfEvent::event::read_format	access:public
values_scheme_code	btrblocks/scheme/integer/RLE.hpp	/^  u8 values_scheme_code;$/;"	m	struct:btrblocks::integers::RLEStructure	access:public
values_scheme_code	btrblocks/scheme/templated/RLE.hpp	/^  u8 values_scheme_code;$/;"	m	struct:btrblocks::RLEStructure	access:public
variant_no	tools/datasets/prepare_dataset.sh	/^         variant_no=$(echo $variant_name | sed -E 's\/\\w+_([0-9]+).*\/\\1\/g')$/;"	v
variant_selector	btrblocks/scheme/double/Pseudodecimal.hpp	/^  u8 variant_selector;$/;"	m	struct:btrblocks::doubles::DecimalStructure	access:public
vector_offset	btrfiles/Parser.cpp	/^  u32 vector_offset;$/;"	m	struct:btrblocks::files::ColumnDescriptor	file:	access:public
verify_or_die	tools/conversion/csvtobtr.cpp	/^void verify_or_die(const std::string& filename, const std::vector<InputChunk> &input_chunks) {$/;"	f	signature:(const std::string& filename, const std::vector<InputChunk> &input_chunks)
views	btrblocks/storage/StringPointerArrayViewer.hpp	/^  const View* views;$/;"	m	struct:btrblocks::StringPointerArrayViewer	access:public
w	.cache/clangd/index/Frequency.hpp.78EDBBB4A857C68B.idx	/^	/;"	v
w	.cache/clangd/index/Frequency.hpp.78EDBBB4A857C68B.idx	/^$/;"	v
warn	btrblocks/common/Log.hpp	/^enum class level { trace, debug, info, warn, err, critical, off };$/;"	m	class:Log::level	access:private
warn	btrblocks/common/Log.hpp	/^inline void warn([[maybe_unused]] Args&&... args) { \/* noop *\/$/;"	f	namespace:Log	signature:([[maybe_unused]] Args&&.... args)
writeBITMAP	btrblocks/extern/RoaringBitmap.cpp	/^std::vector<BITMAP> BitmapWrapper::writeBITMAP() {$/;"	f	class:btrblocks::bitmap::BitmapWrapper	signature:()
writeBITMAP	btrblocks/extern/RoaringBitmap.cpp	/^void BitmapWrapper::writeBITMAP(BITMAP* dest) {$/;"	f	class:btrblocks::bitmap::BitmapWrapper	signature:(BITMAP* dest)
writeBITMAP	btrblocks/extern/RoaringBitmap.hpp	/^  std::vector<BITMAP> writeBITMAP();$/;"	p	class:btrblocks::bitmap::BitmapWrapper	access:public	signature:()
writeBITMAP	btrblocks/extern/RoaringBitmap.hpp	/^  void writeBITMAP(BITMAP* dest);$/;"	p	class:btrblocks::bitmap::BitmapWrapper	access:public	signature:(BITMAP* dest)
writeBinary	btrblocks/storage/MMapVector.cpp	/^void btrblocks::writeBinary(const char* pathname, std::vector<std::string>& v) {$/;"	f	class:btrblocks	signature:(const char* pathname, std::vector<std::string>& v)
writeBinary	btrblocks/storage/MMapVector.hpp	/^void writeBinary(const char* pathname, std::vector<T>& v) {$/;"	f	namespace:btrblocks::mmapvector	signature:(const char* pathname, std::vector<T>& v)
writeBinary	btrblocks/storage/MMapVector.hpp	/^void writeBinary(const char* pathname, std::vector<std::string>& v);$/;"	p	namespace:btrblocks::mmapvector	signature:(const char* pathname, std::vector<std::string>& v)
writeMetadata	btrblocks/compression/Datablock.cpp	/^u32 Datablock::writeMetadata(const std::string& path,$/;"	f	class:btrblocks::Datablock	signature:(const std::string& path, std::vector<ColumnType> types, vector<u32> part_counters, u32 num_chunks)
writeMetadata	btrblocks/compression/Datablock.hpp	/^  static u32 writeMetadata(const std::string& path,$/;"	p	class:btrblocks::Datablock	access:public	signature:(const std::string& path, std::vector<ColumnType> types, vector<u32> part_counters, u32 num_chunks)
writeOffsetsU32	btrblocks/common/Utils.hpp	/^  static u32* writeOffsetsU32(u32* dest, u32 start, u32 len, u32 n) {$/;"	f	class:btrblocks::Utils	access:public	signature:(u32* dest, u32 start, u32 len, u32 n)
writeRaw	btrblocks/common/Units.hpp	/^inline constexpr void writeRaw(u8* base, u32 offset, T value) {$/;"	f	namespace:btrblocks::units	signature:(u8* base, u32 offset, T value)
writeToDisk	btrblocks/storage/Chunk.cpp	/^u32 ColumnPart::writeToDisk(const std::string& outputfile) {$/;"	f	class:btrblocks::ColumnPart	signature:(const std::string& outputfile)
writeToDisk	btrblocks/storage/Chunk.hpp	/^  u32 writeToDisk(const std::string& outputfile);$/;"	p	class:btrblocks::ColumnPart	access:public	signature:(const std::string& outputfile)
write_ptr	btrblocks/scheme/double/Pseudodecimal.cpp	/^  DOUBLE* write_ptr;$/;"	m	struct:btrblocks::doubles::DecimalIterateParam	file:	access:public
x	.cache/clangd/index/OneValue.hpp.E99BAA713A17B9BB.idx	/^RIFF°/;"	v
x	.cache/clangd/index/Relation.hpp.3445CECF2F3A715D.idx	/^RIFFÜ/;"	v
x	.cache/clangd/index/Uncompressed.hpp.BFA50096FD4599BC.idx	/^RIFF´/;"	v
y6	.cache/clangd/index/RLE.hpp.0A08AFC9783F16BF.idx	/^RIFF~/;"	v
zu	.cache/clangd/index/Pseudodecimal.hpp.5BF37A45E94C55D7.idx	/^RIFFZ	/;"	v
~	.cache/clangd/index/Chunk.cpp.0E9FEA2399D19887.idx	/^RIFFØ$/;"	v
~BitmapWrapper	btrblocks/extern/RoaringBitmap.cpp	/^BitmapWrapper::~BitmapWrapper() {$/;"	f	class:btrblocks::bitmap::BitmapWrapper	signature:()
~BitmapWrapper	btrblocks/extern/RoaringBitmap.hpp	/^  virtual ~BitmapWrapper();$/;"	p	class:btrblocks::bitmap::BitmapWrapper	access:public	signature:()
~BtrReader	btrblocks/compression/BtrReader.cpp	/^BtrReader::~BtrReader() {$/;"	f	class:btrblocks::BtrReader	signature:()
~BtrReader	btrblocks/compression/BtrReader.hpp	/^  virtual ~BtrReader();$/;"	p	class:btrblocks::BtrReader	access:public	signature:()
~LemiereImpl	btrblocks/extern/FastPFOR.cpp	/^LemiereImpl<Codec>::~LemiereImpl() = default;$/;"	p	class:LemiereImpl	file:	signature:()
~LemiereImpl	btrblocks/extern/FastPFOR.hpp	/^  ~LemiereImpl();$/;"	p	struct:LemiereImpl	access:public	signature:()
~PerfEvent	btrblocks/common/PerfEvent.hpp	/^  ~PerfEvent() {$/;"	f	struct:PerfEvent	access:public	signature:()
~PerfEventBlock	btrblocks/common/PerfEvent.hpp	/^  ~PerfEventBlock() {$/;"	f	struct:PerfEventBlock	access:public	signature:()
~PerfExternalBlock	btrblocks/common/PerfExternal.hpp	/^  ~PerfExternalBlock() { stop(); }$/;"	f	struct:PerfExternalBlock	access:public	signature:()
~ThreadCacheContainer	btrblocks/cache/ThreadCache.hpp	/^  ~ThreadCacheContainer() {$/;"	f	struct:btrblocks::ThreadCacheContainer	access:public	signature:()
~Vector	btrblocks/storage/MMapVector.hpp	/^  ~Vector() {$/;"	f	struct:btrblocks::mmapvector::Vector	access:public	signature:()
~~	.cache/clangd/index/SchemePool.hpp.BFE90725439EEC65.idx	/^	~~=6R:N¡ö9×üQ$/;"	v
~Tp	.cache/clangd/index/Uncompressed.cpp.0E8DC573F381A75A.idx	/^!Ät~ÄéX]]¢ô3ñÊ¶>¯ßªW~Tp,jë>ã ôG×²ÏG\/QEiRëm|îbo\\Ø÷(kÃþè1QOUEßwºux.à  I&ø(hÎÐº;Â Ñøû[z6Zm¤»D»EqOë´àÝý­©Ù}¾'ðt%wðÍX¸/;"	v
